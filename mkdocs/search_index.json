{
    "docs": [
        {
            "location": "/index.html",
            "text": "Overview\n\n\nKoma is a scientific computing library written in Kotlin, designed to allow development \nof cross-platform numerical applications targeting Javascript, Java (JVM), and embedded (native) platforms.\n\n\nProject goals:\n\n\n\n\nCreate a scientific programming environment that is similar in style to NumPy or MATLAB\n\n\nEnable writing numerical applications which can be deployed on JVM, JS, and native platforms\n\n\nSupport using said applications from Python, MATLAB, Java, and other pre-existing codebases\n\n\nUse pluggable back-ends to enable optimized computation via pre-existing platform libraries\n\n\n\n\nTo get started, try the quickstart instructions below for your desired platform. After that,\ntake a look at the \nfunctionality overview\n for a quick intro on what Koma provides.\n\n\nQuickstart (Java)\n\n\nKoma is hosted on bintray. First add the koma repository to your repo list. If\nusing gradle:\n\n\nrepositories { \n    maven { \n        url \"http://dl.bintray.com/kyonifer/maven\" \n        jcenter()\n    } \n}\n\n\n\n\nNow add a dependency on the \ncore\n artifact:\n\n\ndependencies{\n    compile group: \"koma\", name:\"core\", version:\"0.10\"\n    // Optional, uses EJML's optimized routines for matrix operations\n    compile group: \"koma\", name:\"backend-matrix-ejml\", version: \"0.10\"\n}\n\n\n\n\nAnd we're ready to go. Lets plot a random walk:\n\n\nimport koma.*\n\nfun main(args: Array<String>)\n{\n\n    // Create some normal random noise\n    var a = randn(100,2)\n    var b = cumsum(a)\n\n    figure(1)\n    // Second parameter is color\n    plot(a, 'b', \"First Run\")\n    plot(a+1, 'y', \"First Run Offset\")\n    xlabel(\"Time (s)\")\n    ylabel(\"Magnitude\")\n    title(\"White Noise\")\n\n    figure(2)\n    plot(b, 'g') // green\n    xlabel(\"Velocity (lightweeks/minute)\")\n    ylabel(\"Intelligence\")\n    title(\"Random Walk\")\n\n}\n\n\n\n\n\n\nQuickstart (Javascript)\n\n\nTo use Koma from javascript you currently have to \nbuild from source\n.\nAfter doing so, you should have commonjs modules in the \n./node_modules/\n folder. \nYou can then use koma directly from javascript:\n\n\nkoma = require('koma-core').koma\n\nm = koma.randn(3,3)\n\nconsole.log(m)\nconsole.log(m.plus(m.timesScalar(5)))\n\nm2 = koma.ones(3,4)\n\nconsole.log(m2)\nconsole.log(m2.plus(m2).minusScalar(3))\n\n\n\n\nQuickstart (Native)\n\n\nTo produce a native executable including koma you currently have to \nbuild from source\n. \nThis will produce an executable called \nKoma.kexe\n which includes the koma library as\nwell as the toy example main function defined at \nexamples/native/main.kt\n:\n\n\nimport koma.*\nimport koma.matrix.default.*\n\nfun main(args: Array<String>) {\n\n    factory = DefaultDoubleMatrixFactory()\n\n    println(\"randn(5,6): \\n${randn(5,6).repr()}\")\n\n    var a = mat[1,2,3 end\n                4,5,6]\n\n    var b = mat[2, 0 end\n                0, 1 end\n               -1, 5]\n\n    println(\"a: \\n${a.repr()}\")\n    println(\"b: \\n${b.repr()}\")\n    println(\"a*b: \\n${(a*b).repr()}\")\n\n}\n\n\n\n\nYou can run the executable directly, without any js or java runtime dependency:\n\n\n./Koma.kexe\n\n\n\n\nYou can edit the binary by making modifications to \nexamples/native/main.kt\n in the source tree.\nSupport for building shared or static libraries will be added as the kotlin-native backend matures\n(currently in pre-release).",
            "title": "Home"
        },
        {
            "location": "/index.html#overview",
            "text": "Koma is a scientific computing library written in Kotlin, designed to allow development \nof cross-platform numerical applications targeting Javascript, Java (JVM), and embedded (native) platforms.  Project goals:   Create a scientific programming environment that is similar in style to NumPy or MATLAB  Enable writing numerical applications which can be deployed on JVM, JS, and native platforms  Support using said applications from Python, MATLAB, Java, and other pre-existing codebases  Use pluggable back-ends to enable optimized computation via pre-existing platform libraries   To get started, try the quickstart instructions below for your desired platform. After that,\ntake a look at the  functionality overview  for a quick intro on what Koma provides.",
            "title": "Overview"
        },
        {
            "location": "/index.html#quickstart-java",
            "text": "Koma is hosted on bintray. First add the koma repository to your repo list. If\nusing gradle:  repositories { \n    maven { \n        url \"http://dl.bintray.com/kyonifer/maven\" \n        jcenter()\n    } \n}  Now add a dependency on the  core  artifact:  dependencies{\n    compile group: \"koma\", name:\"core\", version:\"0.10\"\n    // Optional, uses EJML's optimized routines for matrix operations\n    compile group: \"koma\", name:\"backend-matrix-ejml\", version: \"0.10\"\n}  And we're ready to go. Lets plot a random walk:  import koma.*\n\nfun main(args: Array<String>)\n{\n\n    // Create some normal random noise\n    var a = randn(100,2)\n    var b = cumsum(a)\n\n    figure(1)\n    // Second parameter is color\n    plot(a, 'b', \"First Run\")\n    plot(a+1, 'y', \"First Run Offset\")\n    xlabel(\"Time (s)\")\n    ylabel(\"Magnitude\")\n    title(\"White Noise\")\n\n    figure(2)\n    plot(b, 'g') // green\n    xlabel(\"Velocity (lightweeks/minute)\")\n    ylabel(\"Intelligence\")\n    title(\"Random Walk\")\n\n}",
            "title": "Quickstart (Java)"
        },
        {
            "location": "/index.html#quickstart-javascript",
            "text": "To use Koma from javascript you currently have to  build from source .\nAfter doing so, you should have commonjs modules in the  ./node_modules/  folder. \nYou can then use koma directly from javascript:  koma = require('koma-core').koma\n\nm = koma.randn(3,3)\n\nconsole.log(m)\nconsole.log(m.plus(m.timesScalar(5)))\n\nm2 = koma.ones(3,4)\n\nconsole.log(m2)\nconsole.log(m2.plus(m2).minusScalar(3))",
            "title": "Quickstart (Javascript)"
        },
        {
            "location": "/index.html#quickstart-native",
            "text": "To produce a native executable including koma you currently have to  build from source . \nThis will produce an executable called  Koma.kexe  which includes the koma library as\nwell as the toy example main function defined at  examples/native/main.kt :  import koma.*\nimport koma.matrix.default.*\n\nfun main(args: Array<String>) {\n\n    factory = DefaultDoubleMatrixFactory()\n\n    println(\"randn(5,6): \\n${randn(5,6).repr()}\")\n\n    var a = mat[1,2,3 end\n                4,5,6]\n\n    var b = mat[2, 0 end\n                0, 1 end\n               -1, 5]\n\n    println(\"a: \\n${a.repr()}\")\n    println(\"b: \\n${b.repr()}\")\n    println(\"a*b: \\n${(a*b).repr()}\")\n\n}  You can run the executable directly, without any js or java runtime dependency:  ./Koma.kexe  You can edit the binary by making modifications to  examples/native/main.kt  in the source tree.\nSupport for building shared or static libraries will be added as the kotlin-native backend matures\n(currently in pre-release).",
            "title": "Quickstart (Native)"
        },
        {
            "location": "/General_Usage_Guide/Functionality_Overview/index.html",
            "text": "Functionality Overview\n\n\nCore Interfaces\n\n\nKoma has 3 core interfaces that define the available data containers:\n\n\n\n\n\n\n\n\nInterface\n\n\nDimensions\n\n\nNon-numerical Elements\n\n\nMath Operations\n\n\nConvenience Methods for Generation\n\n\n\n\n\n\n\n\n\n\nkoma.matrix.Matrix<T>\n\n\n2\n\n\nN\n\n\nLinAlg + Elementwise\n\n\nkoma.matrix.MatrixFactory<T>\n\n\n\n\n\n\nkoma.ndarray.NDArray<T>\n\n\nArbitrary\n\n\nY\n\n\nElementwise\n\n\n\n\n\n\n\n\nkoma.ndarray.NumericalNDArray<T>\n\n\nArbitrary\n\n\nN\n\n\nElementwise\n\n\nkoma.ndarray.NumericalNDArrayFactory<T>\n\n\n\n\n\n\n\n\nAvailable Implementations\n\n\nKoma consists of the \ncore\n module and several (optional) platform optimized modules. The \ncore\n module is always available on every\n platform, and contains unoptimized pure-Kotlin implementations of \nNDArray\n, \nNumericalNDArray\n, and \nMatrix\n. In the interest of not reinventing the wheel, \nthe default implementation doesnt implement some of the advanced functionalities on \nMatrix\n, such as \ndecompositions. For a complete implementation of the \nMatrix\n interface, you'll want to select an \noptimized backend available on your target platform. Currently optimized backends are only available\n for the JVM, with more on the way for JS and Native soon. Here's a summary of the current available backends:\n\n\n\n\n\n\n\n\nArtifact\n\n\nSupported Platforms\n\n\nProvided Classes\n\n\n...which implement (respectively)\n\n\n\n\n\n\n\n\n\n\ncore\n\n\nJVM, JS, Native\n\n\nDefaultNDArray<T>\n Default\nXX\nMatrix*\nDefault\nXX\nMatrixFactory\nDefault\nXX\nNDArray\nDefault\nXX\nNDArrayFactory\n\n\nNDArray<T>\nMatrix<\nXX\n>\nMatrixFactory<\nXX\n>\nNumericalNDArray<\nXX\n>>\nNumericalNDArrayFactory<\nXX\n>\n\n\n\n\n\n\nbackend-matrix-mtj\n\n\nJVM\n\n\nMTJMatrix\nMTJMatrixFactory\n\n\nMatrix<Double>\nMatrixFactory<Double>\n\n\n\n\n\n\nbackend-matrix-ejml\n\n\nJVM\n\n\nEJMLMatrix\nEJMLMatrixFactory\n\n\nMatrix<Double>\nMatrixFactory<Double>\n\n\n\n\n\n\nbackend-matrix-jblas\n\n\nJVM\n\n\nJBlasMatrix\nJBlasMatrixFactory\n\n\nMatrix<Double>\nMatrixFactory<Double>\n\n\n\n\n\n\n\n\nwhere \nXX\n is any of \nInt\n, \nDouble\n, \nLong\n, or \nFloat\n. \n\n\nEach of the backends uses an external library optimized for the platform \nto do the actual computation. For example, backend-matrix-ejml uses the \nEJML\n library for matrix operations.\nThus the core interfaces above serve as a facade for dispatching work to platform-specific libraries in the backends, with the default\nimplementation in \ncore\n acting as a fallback that is unoptimized but always available.\n\n\n* Only contains support for basic functionality like additions or multiplications. Please use \nan optimized backend for advanced features like matrix decompositions.\n\n\nEnabling a Backend (JVM)\n\n\nOnce you've chosen a backend you want to use, you can enable it by adding it to your dependencies.\nFor example, if you would like to use the Matrix container based on MTJ, you can add the corresponding\nartifact to your build.gradle dependencies:\n\n\ndependencies {\n    compile group: \"koma\", name:\"backend-matrix-mtj\", version: \"0.10\"\n    compile group: \"koma\", name:\"core\", version:\"0.10\"\n}\n\n\n\n\nKoma should now pick up the new backend and use it for the \ntop-level functions\n. Koma will always try to \nuse a platform specific backend if one is available, and fallback to the default \ncore\n implementations \nif that fails. Continue to the next section if you are interested in forcing which backend is used.\n\n\nMultiple Backends at Once\n\n\nKoma supports using multiple backends simultaneously. This is useful if e.g.\nyou need to work with multiple libraries which require different matrix containers. \n\n\nTo begin, list more than one backend in your build.gradle dependencies. For example,\nto have both EJML and MTJ available you might write:\n\n\ndependencies {\n    compile group: \"koma\", name:\"backend-matrix-mtj\", version: \"0.10\"\n    compile group: \"koma\", name:\"backend-matrix-ejml\", version: \"0.10\"\n    compile group: \"koma\", name:\"core\", version:\"0.10\"\n}\n\n\n\n\nYou can now change the backend being used by koma's \ntop-level functions\n at\nany time by setting a property in the koma namespace. In Kotlin this looks\nlike:\n\n\nimport koma.matrix.ejml.EJMLMatrixFactory\nimport koma.matrix.mtj.MTJMatrixFactory\n\n// Make subsequent function calls use the EJML backend\nkoma.factory = EJMLMatrixFactory()\n\nval a = zeros(3,3) // An EJMLMatrix\n\n// Make subsequent function calls use the MTJ backend\n// (doesnt affect previous returns)\nkoma.factory = MTJMatrixFactory()\n\nval b = zeros(3,3) // Now returns an MTJMatrix\n\n\n\n\nThis property can be set from Java and other languages via\n\nkoma.Options.setFactory(...)\n. If not set, koma will default\nto using MTJ, EJML, and then JBlas in that order, falling back to Default if\nnone of them are found.\n\n\nIt is also possible to create any matrix type manually by using the\ncorresponding factory. For example, even if \nkoma.factory\n is set to\nMTJMatrixFactory, you could write\n\n\nval eFac = EJMLMatrixFactory()\nval a = eFac.eye(3, 3)\nval b = eFac.ones(3, 3)\nprintln(a+b) // Uses EJML's addition algorithm, not MTJ's\n\n\n\n\nInteroperating with Other Linear Algebra Libraries\n\n\nSuppose you are using the EJML backend, and you need to use some code that is\nexpecting to receive EJML's \nSimpleMatrix\n type. You can get ahold of the underlying\n\nSimpleMatrix\n by using the \nstorage\n property:\n\n\nval a = EJMLMatrixFactory().ones(3,3)\nsomethingThatNeedsSimpleMatrices(a.storage)\n\n\n\n\nThis makes it easy to use libraries requiring different matrix\ncontainers simultaneously.",
            "title": "Functionality Overview"
        },
        {
            "location": "/General_Usage_Guide/Functionality_Overview/index.html#functionality-overview",
            "text": "",
            "title": "Functionality Overview"
        },
        {
            "location": "/General_Usage_Guide/Functionality_Overview/index.html#core-interfaces",
            "text": "Koma has 3 core interfaces that define the available data containers:     Interface  Dimensions  Non-numerical Elements  Math Operations  Convenience Methods for Generation      koma.matrix.Matrix<T>  2  N  LinAlg + Elementwise  koma.matrix.MatrixFactory<T>    koma.ndarray.NDArray<T>  Arbitrary  Y  Elementwise     koma.ndarray.NumericalNDArray<T>  Arbitrary  N  Elementwise  koma.ndarray.NumericalNDArrayFactory<T>",
            "title": "Core Interfaces"
        },
        {
            "location": "/General_Usage_Guide/Functionality_Overview/index.html#available-implementations",
            "text": "Koma consists of the  core  module and several (optional) platform optimized modules. The  core  module is always available on every\n platform, and contains unoptimized pure-Kotlin implementations of  NDArray ,  NumericalNDArray , and  Matrix . In the interest of not reinventing the wheel, \nthe default implementation doesnt implement some of the advanced functionalities on  Matrix , such as \ndecompositions. For a complete implementation of the  Matrix  interface, you'll want to select an \noptimized backend available on your target platform. Currently optimized backends are only available\n for the JVM, with more on the way for JS and Native soon. Here's a summary of the current available backends:     Artifact  Supported Platforms  Provided Classes  ...which implement (respectively)      core  JVM, JS, Native  DefaultNDArray<T>  Default XX Matrix* Default XX MatrixFactory Default XX NDArray Default XX NDArrayFactory  NDArray<T> Matrix< XX > MatrixFactory< XX > NumericalNDArray< XX >> NumericalNDArrayFactory< XX >    backend-matrix-mtj  JVM  MTJMatrix MTJMatrixFactory  Matrix<Double> MatrixFactory<Double>    backend-matrix-ejml  JVM  EJMLMatrix EJMLMatrixFactory  Matrix<Double> MatrixFactory<Double>    backend-matrix-jblas  JVM  JBlasMatrix JBlasMatrixFactory  Matrix<Double> MatrixFactory<Double>     where  XX  is any of  Int ,  Double ,  Long , or  Float .   Each of the backends uses an external library optimized for the platform \nto do the actual computation. For example, backend-matrix-ejml uses the  EJML  library for matrix operations.\nThus the core interfaces above serve as a facade for dispatching work to platform-specific libraries in the backends, with the default\nimplementation in  core  acting as a fallback that is unoptimized but always available.  * Only contains support for basic functionality like additions or multiplications. Please use \nan optimized backend for advanced features like matrix decompositions.",
            "title": "Available Implementations"
        },
        {
            "location": "/General_Usage_Guide/Functionality_Overview/index.html#enabling-a-backend-jvm",
            "text": "Once you've chosen a backend you want to use, you can enable it by adding it to your dependencies.\nFor example, if you would like to use the Matrix container based on MTJ, you can add the corresponding\nartifact to your build.gradle dependencies:  dependencies {\n    compile group: \"koma\", name:\"backend-matrix-mtj\", version: \"0.10\"\n    compile group: \"koma\", name:\"core\", version:\"0.10\"\n}  Koma should now pick up the new backend and use it for the  top-level functions . Koma will always try to \nuse a platform specific backend if one is available, and fallback to the default  core  implementations \nif that fails. Continue to the next section if you are interested in forcing which backend is used.",
            "title": "Enabling a Backend (JVM)"
        },
        {
            "location": "/General_Usage_Guide/Functionality_Overview/index.html#multiple-backends-at-once",
            "text": "Koma supports using multiple backends simultaneously. This is useful if e.g.\nyou need to work with multiple libraries which require different matrix containers.   To begin, list more than one backend in your build.gradle dependencies. For example,\nto have both EJML and MTJ available you might write:  dependencies {\n    compile group: \"koma\", name:\"backend-matrix-mtj\", version: \"0.10\"\n    compile group: \"koma\", name:\"backend-matrix-ejml\", version: \"0.10\"\n    compile group: \"koma\", name:\"core\", version:\"0.10\"\n}  You can now change the backend being used by koma's  top-level functions  at\nany time by setting a property in the koma namespace. In Kotlin this looks\nlike:  import koma.matrix.ejml.EJMLMatrixFactory\nimport koma.matrix.mtj.MTJMatrixFactory\n\n// Make subsequent function calls use the EJML backend\nkoma.factory = EJMLMatrixFactory()\n\nval a = zeros(3,3) // An EJMLMatrix\n\n// Make subsequent function calls use the MTJ backend\n// (doesnt affect previous returns)\nkoma.factory = MTJMatrixFactory()\n\nval b = zeros(3,3) // Now returns an MTJMatrix  This property can be set from Java and other languages via koma.Options.setFactory(...) . If not set, koma will default\nto using MTJ, EJML, and then JBlas in that order, falling back to Default if\nnone of them are found.  It is also possible to create any matrix type manually by using the\ncorresponding factory. For example, even if  koma.factory  is set to\nMTJMatrixFactory, you could write  val eFac = EJMLMatrixFactory()\nval a = eFac.eye(3, 3)\nval b = eFac.ones(3, 3)\nprintln(a+b) // Uses EJML's addition algorithm, not MTJ's",
            "title": "Multiple Backends at Once"
        },
        {
            "location": "/General_Usage_Guide/Functionality_Overview/index.html#interoperating-with-other-linear-algebra-libraries",
            "text": "Suppose you are using the EJML backend, and you need to use some code that is\nexpecting to receive EJML's  SimpleMatrix  type. You can get ahold of the underlying SimpleMatrix  by using the  storage  property:  val a = EJMLMatrixFactory().ones(3,3)\nsomethingThatNeedsSimpleMatrices(a.storage)  This makes it easy to use libraries requiring different matrix\ncontainers simultaneously.",
            "title": "Interoperating with Other Linear Algebra Libraries"
        },
        {
            "location": "/General_Usage_Guide/Matrices_&_Linear_Algebra/index.html",
            "text": "Matrices & Linear Algebra\n\n\nWhile it is always possible to use the \n*Factory\n and \n*Matrix\n classes provided by your chosen backend or the core directly,\nKoma provides a set of top-level convenience functions to make the experience more similar to other scientific environments.\nAll these functions reside in the \nimport koma.*\n namespace and use the underlying \nobject-oriented hierarchy internally.\n\n\nCreating Matrices\n\n\nKoma provides several functions for creating new matrices:\n\n\n// x is a 3x3 identity matrix\nvar x = eye(3)\n\n// x is a 3x3 with Gaussian random noise, distribution 0,1\nx = randn(3,3)\n\n// x is a 3x3 with uniform random noise\nx = rand(3,3)\n\n// x is a 4x5 matrix where the ith row and jth column has the value i+j*2\nx = fill(4,5) { row, col -> row+col*2.0 }\n\nval someData = arrayOf(doubleArrayOf(1.0,2.0,3.0), doubleArrayOf(4.0,5.0,6.0))\n// x is a 2x3 matrix constructed from the data in a java array of arrays\nx = create(someData)\n\n\n\n\nSee \nhere\n for a complete list of\navailable creators. There is also a DSL for matrix literals:\n\n\n// a is a 2x3 matrix filled with the numbers passed in\nval a = mat[1,2,3.3 end\n            4,5,6]\n\n\n\n\nMath Functions\n\n\nMatrices have useful map functions that return matrices for chaining operations (see \nhere\n for a complete list).\n\n\n    // Create a 3x3 identity and then add 0.1 to all elements\n    val x = eye(3) + 0.1\n\n    // Map each element through a function that adds .01\n    val y = x.map { it + .01 }\n\n    // Map each element through a function that adds or subtracts depending on the element index\n    val z = x.mapIndexed { row, col, ele -> if (row > col) ele + 1 else ele - 1 }\n\n    // Are there any elements greater than 1?\n    val hasGreater = x.any { it > 1 }\n\n    // Are all elements greater than 1?\n    val allGreater = x.all { it > 1 }\n\n    // Print all the elements in row-order\n    x.forEach { println(it) }\n\n    // Print all the elements including their column number\n    x.forEachIndexed { row, col, ele -> println(\"$col $it\") }\n\n    // Apply a function to a row at a time and store the outputs in a contiguous matrix\n    val sins = x.mapRows { row -> sin(row) }\n\n    // Print all elements greater than 1\n    x.each { if (it>1) println(it) }\n\n\n\n\n\nWe can also do some linear algebra:\n\n\n\n    // Matrix literal syntax, see creators.kt for \n    // convenience functions like zeros(5,5)\n    var A = mat[1,0,0 end\n                0,3,0 end\n                0,0,4]\n\n    // Calculate the matrix inverse\n    var Ainv = A.inv()\n\n    var b = mat[2,2,4].T\n\n    // Use overloaded operators:\n\n    // * is matrix multiplication \n    var c = A*b + 1\n\n    // emul is element-wise multiplication\n    var d = (A emul A) + 1\n\n    // Number of decimals to show\n    format(\"short\")\n\n    println(c)\n\n\n\n\n\nWhich produces:\n\n\nOutput:\n\nmat[ 3.00  end\n     7.00  end\n     17.00 ]\n\n\n\n\nMany special functions are supported (see \nthe matrix interface\n for a complete list):\n\n\n\n    val a = 2*eye(3)+.01 // eye is identity matrix\n\n    a.chol()  // Cholesky decomposition\n    a.det()   // Determinant\n    a.diag()  // Diagonal vector\n    a.inv()   // Matrix inverse\n    a.norm()  // Matrix norm\n\n\n\n\n\nScalar functions can be applied elementwise to matrices (see \nhere\n for a complete list):\n\n\n    val x = create(0..100)/5.0  // Matrix of 0, 1/5, 2/5, ...\n    val y = sin(x)              // Sin applied elementwise\n    plot(y)                     // Plot of sin function\n\n\n\n\nMatrix indexing and slicing is supported (see \nhere\n for a list of operators as well as the Matrix\n type):\n\n\n\n    val x = randn(5,5)\n    val y = x[0,0..4] // Grab the first row\n\n    x[0..2,0..3] = zeros(3,4) // Set the upper-left 3x4 sub-matrix of x to zero\n\n\n\n\n\nA Matrix is convertible to an Iterable:\n\n\n    val x = randn(5,5).toIterable()\n\n    // Adds all elements and returns sum\n    x.reduce { x, y -> x+y }\n\n    // Returns list of all elements greater than 4\n    x.find { it > 4 }",
            "title": "Matrices & Linear Algebra"
        },
        {
            "location": "/General_Usage_Guide/Matrices_&_Linear_Algebra/index.html#matrices-linear-algebra",
            "text": "While it is always possible to use the  *Factory  and  *Matrix  classes provided by your chosen backend or the core directly,\nKoma provides a set of top-level convenience functions to make the experience more similar to other scientific environments.\nAll these functions reside in the  import koma.*  namespace and use the underlying \nobject-oriented hierarchy internally.",
            "title": "Matrices &amp; Linear Algebra"
        },
        {
            "location": "/General_Usage_Guide/Matrices_&_Linear_Algebra/index.html#creating-matrices",
            "text": "Koma provides several functions for creating new matrices:  // x is a 3x3 identity matrix\nvar x = eye(3)\n\n// x is a 3x3 with Gaussian random noise, distribution 0,1\nx = randn(3,3)\n\n// x is a 3x3 with uniform random noise\nx = rand(3,3)\n\n// x is a 4x5 matrix where the ith row and jth column has the value i+j*2\nx = fill(4,5) { row, col -> row+col*2.0 }\n\nval someData = arrayOf(doubleArrayOf(1.0,2.0,3.0), doubleArrayOf(4.0,5.0,6.0))\n// x is a 2x3 matrix constructed from the data in a java array of arrays\nx = create(someData)  See  here  for a complete list of\navailable creators. There is also a DSL for matrix literals:  // a is a 2x3 matrix filled with the numbers passed in\nval a = mat[1,2,3.3 end\n            4,5,6]",
            "title": "Creating Matrices"
        },
        {
            "location": "/General_Usage_Guide/Matrices_&_Linear_Algebra/index.html#math-functions",
            "text": "Matrices have useful map functions that return matrices for chaining operations (see  here  for a complete list).      // Create a 3x3 identity and then add 0.1 to all elements\n    val x = eye(3) + 0.1\n\n    // Map each element through a function that adds .01\n    val y = x.map { it + .01 }\n\n    // Map each element through a function that adds or subtracts depending on the element index\n    val z = x.mapIndexed { row, col, ele -> if (row > col) ele + 1 else ele - 1 }\n\n    // Are there any elements greater than 1?\n    val hasGreater = x.any { it > 1 }\n\n    // Are all elements greater than 1?\n    val allGreater = x.all { it > 1 }\n\n    // Print all the elements in row-order\n    x.forEach { println(it) }\n\n    // Print all the elements including their column number\n    x.forEachIndexed { row, col, ele -> println(\"$col $it\") }\n\n    // Apply a function to a row at a time and store the outputs in a contiguous matrix\n    val sins = x.mapRows { row -> sin(row) }\n\n    // Print all elements greater than 1\n    x.each { if (it>1) println(it) }  We can also do some linear algebra:  \n    // Matrix literal syntax, see creators.kt for \n    // convenience functions like zeros(5,5)\n    var A = mat[1,0,0 end\n                0,3,0 end\n                0,0,4]\n\n    // Calculate the matrix inverse\n    var Ainv = A.inv()\n\n    var b = mat[2,2,4].T\n\n    // Use overloaded operators:\n\n    // * is matrix multiplication \n    var c = A*b + 1\n\n    // emul is element-wise multiplication\n    var d = (A emul A) + 1\n\n    // Number of decimals to show\n    format(\"short\")\n\n    println(c)  Which produces:  Output:\n\nmat[ 3.00  end\n     7.00  end\n     17.00 ]  Many special functions are supported (see  the matrix interface  for a complete list):  \n    val a = 2*eye(3)+.01 // eye is identity matrix\n\n    a.chol()  // Cholesky decomposition\n    a.det()   // Determinant\n    a.diag()  // Diagonal vector\n    a.inv()   // Matrix inverse\n    a.norm()  // Matrix norm  Scalar functions can be applied elementwise to matrices (see  here  for a complete list):      val x = create(0..100)/5.0  // Matrix of 0, 1/5, 2/5, ...\n    val y = sin(x)              // Sin applied elementwise\n    plot(y)                     // Plot of sin function  Matrix indexing and slicing is supported (see  here  for a list of operators as well as the Matrix  type):  \n    val x = randn(5,5)\n    val y = x[0,0..4] // Grab the first row\n\n    x[0..2,0..3] = zeros(3,4) // Set the upper-left 3x4 sub-matrix of x to zero  A Matrix is convertible to an Iterable:      val x = randn(5,5).toIterable()\n\n    // Adds all elements and returns sum\n    x.reduce { x, y -> x+y }\n\n    // Returns list of all elements greater than 4\n    x.find { it > 4 }",
            "title": "Math Functions"
        },
        {
            "location": "/General_Usage_Guide/N-Dimensional_Arrays/index.html",
            "text": "N-Dimensional Containers\n\n\nKoma has two N-D container interfaces, \nNDArray\n and \nNumericalNDArray\n.\n\n\nNDArray\n\n\nNDArray\n is designed to hold high dimensional data of arbitrary type. Because its not guaranteed\nto be 2D or numerical, it does not have facilities for doing any mathematics.\n\n\nThe default implementation of \nNDArray\n is \nkoma.ndarray.default.DefaultNDArray\n, available in core (and thus\non every target platform). You can create a \nDefaultNDArray\n by giving it a vararg of index lengths and\nan init function:\n\n\n// Construct a 5x3x4 NDArray, and populate it using the passed function\nval a: NDArray<Int> = DefaultNDArray(5, 3, 4) { idx -> idx[0] * 2 + idx[1] * 3 }\n\nassert(a[1,2,1] == 1*2 + 2*3)\nassert(a[3,1,3] == 3*2 + 1*3)\n\n\n\n\nYou can iterate over each of the elements with knowledge of their N-D index coordinates:\n\n\nval a: NDArray<Int> = DefaultNDArray(2,4) { idx -> idx[0] * 2 + idx[1] * 3 }\n\na.forEachIndexedN { indices, value ->\n    println(\"Element at ${indices.joinToString(\",\")} is $value\")\n}\n\n\n\n\nYou can also map elements to another NDArray:\n\n\nval a: NDArray<Int> = DefaultNDArray(2,4) { idx -> idx[0] * 2 + idx[1] * 3 }\n\nval b = a.map { value -> value + 1 }\n\n\n\n\nThe full set of functionality can be seen \nhere\n.\nFor both \nmap\n and \nforEach\n, \nIndexedN\n at the end of the function name indicates you'd like to receive\na N dimensional index, and \nIndexed\n indicates you'd like a linear index:\n\n\nval a: NDArray<Int> = DefaultNDArray(2,4) { idx -> idx[0] * 2 + idx[1] * 3 }\n\n// No index provided\na.map { value -> value + 1 }\na.forEach { value -> print(value + 1) }\n// Linear index of element provided\na.mapIndexed { value, idx -> value+idx }\na.forEachIndexed { value, idx -> print(value+idx) }\n// N-D index of element provided\na.mapIndexedN { value, indices -> value + indices[0] }\na.forEachIndexedN { value, indices -> print(value + indices[0]) }\n\n\n\n\nYou can also convert an NDArray into an iterator (this will produce each element \nin the same order as the linear index \nforEach\n would have):\n\n\nval a: NDArray<Int> = DefaultNDArray(2,4) { idx -> idx[0] * 2 + idx[1] * 3 }\na.toIterable()\n\n\n\n\nAnd get the shape of the current container:\n\n\nval a: NDArray<Int> = DefaultNDArray(2,4) { idx -> idx[0] * 2 + idx[1] * 3 }\nval dims: List<Int>  = a.shape()\n\n\n\n\nNumericalNDArray\n\n\nNumericalNDArray\n is a subtype of NDArray that guarantees its element type\nwill be numerical. Because of this, we can now perform math operations\non the array, and provide optimized (non-boxed) implementations for various primitives. The\ncore provides Default\nXX\nNDArray and Default\nXX\nNDArrayFactory implementations,\nwhere \nXX\n is any of \nInt\n, \nDouble\n, \nLong\n, or \nFloat\n. For example, if we wanted\nto work in single precision we could write:\n\n\n// Create a 3x4x5 array filled with the number 1, stored as floats\nval a = DefaultFloatNDArrayFactory().ones(3,4,5)\n\n// Create a 2x8 array filled with the number 1, stored as coubles\nval b = DefaultDoubleNDArrayFactory().randn(2, 8)\n\n\n\n\nJust like in the non-numerical case, we can instead initialize a \nNumericalNDArray\n\nby a init function:\n\n\nval arr = DefaultFloatNDArray(3,5,4) { idx -> idx[0].toFloat() }\n\n\n\n\nBecause we are now guaranteed numerical elements, arithmetic is available:\n\n\nval arr = DefaultDoubleNDArray(3,5,4) { idx -> idx[0].toDouble() }\n// All operations are elementwise\nval out = arr + arr\nval out2 = arr - arr*4.0 - 1.5\n\n\n\n\nThe full list of operators available is \nhere\n.\nNote that linear algebra operations are not available as \nNumericalNDArray\n is not\nguaranteed to be 2D.\n\n\nConversions between types\n\n\nThere are some conversions available between types. If a \nNDArray\n's \nT\n value \nis known in the current context to be numerical, it can be converted to a \nNumericalNDArray\n:\n\n\nval a: NDArray<Int> = DefaultNDArray(2,4) { idx -> idx[0] * 2 + idx[1] * 3 }\n\n// Because we know the element type is Int, \n// the toNumerical extension function becomes available\nval b: NumericalNDArray<Int> = a.toNumerical()",
            "title": "N Dimensional Arrays"
        },
        {
            "location": "/General_Usage_Guide/N-Dimensional_Arrays/index.html#n-dimensional-containers",
            "text": "Koma has two N-D container interfaces,  NDArray  and  NumericalNDArray .",
            "title": "N-Dimensional Containers"
        },
        {
            "location": "/General_Usage_Guide/N-Dimensional_Arrays/index.html#ndarray",
            "text": "NDArray  is designed to hold high dimensional data of arbitrary type. Because its not guaranteed\nto be 2D or numerical, it does not have facilities for doing any mathematics.  The default implementation of  NDArray  is  koma.ndarray.default.DefaultNDArray , available in core (and thus\non every target platform). You can create a  DefaultNDArray  by giving it a vararg of index lengths and\nan init function:  // Construct a 5x3x4 NDArray, and populate it using the passed function\nval a: NDArray<Int> = DefaultNDArray(5, 3, 4) { idx -> idx[0] * 2 + idx[1] * 3 }\n\nassert(a[1,2,1] == 1*2 + 2*3)\nassert(a[3,1,3] == 3*2 + 1*3)  You can iterate over each of the elements with knowledge of their N-D index coordinates:  val a: NDArray<Int> = DefaultNDArray(2,4) { idx -> idx[0] * 2 + idx[1] * 3 }\n\na.forEachIndexedN { indices, value ->\n    println(\"Element at ${indices.joinToString(\",\")} is $value\")\n}  You can also map elements to another NDArray:  val a: NDArray<Int> = DefaultNDArray(2,4) { idx -> idx[0] * 2 + idx[1] * 3 }\n\nval b = a.map { value -> value + 1 }  The full set of functionality can be seen  here .\nFor both  map  and  forEach ,  IndexedN  at the end of the function name indicates you'd like to receive\na N dimensional index, and  Indexed  indicates you'd like a linear index:  val a: NDArray<Int> = DefaultNDArray(2,4) { idx -> idx[0] * 2 + idx[1] * 3 }\n\n// No index provided\na.map { value -> value + 1 }\na.forEach { value -> print(value + 1) }\n// Linear index of element provided\na.mapIndexed { value, idx -> value+idx }\na.forEachIndexed { value, idx -> print(value+idx) }\n// N-D index of element provided\na.mapIndexedN { value, indices -> value + indices[0] }\na.forEachIndexedN { value, indices -> print(value + indices[0]) }  You can also convert an NDArray into an iterator (this will produce each element \nin the same order as the linear index  forEach  would have):  val a: NDArray<Int> = DefaultNDArray(2,4) { idx -> idx[0] * 2 + idx[1] * 3 }\na.toIterable()  And get the shape of the current container:  val a: NDArray<Int> = DefaultNDArray(2,4) { idx -> idx[0] * 2 + idx[1] * 3 }\nval dims: List<Int>  = a.shape()",
            "title": "NDArray"
        },
        {
            "location": "/General_Usage_Guide/N-Dimensional_Arrays/index.html#numericalndarray",
            "text": "NumericalNDArray  is a subtype of NDArray that guarantees its element type\nwill be numerical. Because of this, we can now perform math operations\non the array, and provide optimized (non-boxed) implementations for various primitives. The\ncore provides Default XX NDArray and Default XX NDArrayFactory implementations,\nwhere  XX  is any of  Int ,  Double ,  Long , or  Float . For example, if we wanted\nto work in single precision we could write:  // Create a 3x4x5 array filled with the number 1, stored as floats\nval a = DefaultFloatNDArrayFactory().ones(3,4,5)\n\n// Create a 2x8 array filled with the number 1, stored as coubles\nval b = DefaultDoubleNDArrayFactory().randn(2, 8)  Just like in the non-numerical case, we can instead initialize a  NumericalNDArray \nby a init function:  val arr = DefaultFloatNDArray(3,5,4) { idx -> idx[0].toFloat() }  Because we are now guaranteed numerical elements, arithmetic is available:  val arr = DefaultDoubleNDArray(3,5,4) { idx -> idx[0].toDouble() }\n// All operations are elementwise\nval out = arr + arr\nval out2 = arr - arr*4.0 - 1.5  The full list of operators available is  here .\nNote that linear algebra operations are not available as  NumericalNDArray  is not\nguaranteed to be 2D.",
            "title": "NumericalNDArray"
        },
        {
            "location": "/General_Usage_Guide/N-Dimensional_Arrays/index.html#conversions-between-types",
            "text": "There are some conversions available between types. If a  NDArray 's  T  value \nis known in the current context to be numerical, it can be converted to a  NumericalNDArray :  val a: NDArray<Int> = DefaultNDArray(2,4) { idx -> idx[0] * 2 + idx[1] * 3 }\n\n// Because we know the element type is Int, \n// the toNumerical extension function becomes available\nval b: NumericalNDArray<Int> = a.toNumerical()",
            "title": "Conversions between types"
        },
        {
            "location": "/General_Usage_Guide/Plotting/index.html",
            "text": "Plotting\n\n\nKoma has limited plotting support via xchart. The basic functionality mimics that of\nmatplotlib and matlab:\n\n\n// Create some normal random noise\nvar a = randn(100,2)\nvar b = cumsum(a)\n\nfigure(1)\n// Second parameter is color\nplot(a, 'b', \"First Run\")\nplot(a+1, 'y', \"First Run Offset\")\nxlabel(\"Time (s)\")\nylabel(\"Magnitude\")\ntitle(\"White Noise\")\n\n\n\n\nAn imshow command is also available for 2D plotting:\n\n\nimshow(randn(100,100))\nimshow(randn(100,100), BufferedImage.TYPE_BYTE_INDEXED)",
            "title": "Plotting"
        },
        {
            "location": "/General_Usage_Guide/Plotting/index.html#plotting",
            "text": "Koma has limited plotting support via xchart. The basic functionality mimics that of\nmatplotlib and matlab:  // Create some normal random noise\nvar a = randn(100,2)\nvar b = cumsum(a)\n\nfigure(1)\n// Second parameter is color\nplot(a, 'b', \"First Run\")\nplot(a+1, 'y', \"First Run Offset\")\nxlabel(\"Time (s)\")\nylabel(\"Magnitude\")\ntitle(\"White Noise\")  An imshow command is also available for 2D plotting:  imshow(randn(100,100))\nimshow(randn(100,100), BufferedImage.TYPE_BYTE_INDEXED)",
            "title": "Plotting"
        },
        {
            "location": "/General_Usage_Guide/Validation_DSL/index.html",
            "text": "Matrix Validation DSL\n\n\nKoma provides definitions for a domain-specific language that you can use to validate matrices used as inputs to your functions in a consistent way. The rules throw detailed, human-readable exceptions using an appropriate Java exception class based on rules that look like this:\n\n\nimport koma.*\nimport koma.util.validation.*\n\nfun mFunction(foo: Matrix<Double>, bar: Matrix<Double>, baz: Matrix<Double>) {\n    validate {\n        foo(\"foo\") {  1  x 'N'; transposable }\n        bar(\"bar\") { 'N' x 'N'; symmetric }\n        baz(\"baz\") { 'N' x  1 ; max = 5 }\n    }\n\n    /* Your code here */\n}\n\n\n\n\nSome of the exceptions the above code could generate include:\n\n\njava.lang.IndexOutOfBoundsException: Invalid matrix dimensions.\n\nMatrix Required Actual \n====== ======== ====== \nfoo       1xN     1x2\nbar       NxN     2x2\nbaz       Nx1     2x3\n\nbaz must have the same number of rows as foo has columns\nbaz must have the same number of rows as bar has rows\nbaz must have the same number of rows as bar has columns\nbaz must have exactly 1 columns (has 3)\n\n\n\n\nor\n\n\njava.lang.IndexOutOfBoundsException: bar must be symmetric, but has dimensions 1x2\n\n\n\n\nor\n\n\njava.lang.IllegalArgumentException: baz[0, 0] > 5.0 (value was 15.0)\n\n\n\n\nAnnotated Syntax\n\n\nfun myFunction(foo: Matrix<Double>, bar: Matrix<Double>, baz: Matrix<Double>) {\n    validate { /*\n        vvv ------------------------------------ Matrix to examine.\n            vvvvv ------------------------------ Name to use in the exception.\n                    vvvvvvvvvvvvvvvvvvvvvvvv --- Rules to check the matrix */\n        foo(\"foo\") { 1  x 'N'; transposable }\n    }\n}\n\n\n\n\nRules\n\n\nRules are regular Kotlin statements, which can be separated either by semicolons or newlines. The rules block will be evaluated with an instance of \nValidaitonContext\n as its receiver.\n\n\n\n\n\n\n\n\nSyntax\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n1 x 2\n or \ndim(1, 2)\n\n\nVerify the matrix has 1 row and 2 columns. Values can be any expression that evaluates to \nInt\n. The latter syntax is provided as an alternative if the order-of-operations for \ninfix functions\n does something weird.\n\n\n\n\n\n\n1 x 'N'\n\n\nVerify the matrix has 1 row and any number of columns; compare the column count to other things that use the character \n'N'\n\n\n\n\n\n\ntransposable\n\n\nThe given dimensions can be in either order. So, a \n1 x 3; transposable\n matrix can have either 1 row and 3 columns or 3 rows and 1 column.\n\n\n\n\n\n\nsymmetric\n\n\nVerify that the matrix is \nsymmetric\n\n\n\n\n\n\nmax = 4.0\n\n\nSpecify a maximum allowable value for individual coefficients in the matrix. Can be any expression that evaluates to \nDouble\n\n\n\n\n\n\nmin = 2.0\n\n\nSpecify a minimum allowable value for individual coefficients in the matrix. Can be any expression that evaluates to \nDouble\n\n\n\n\n\n\n\n\nShorthand for a single Matrix\n\n\nIf you've written a function that only has a single Matrix argument, you can use this shorthand syntax instead of a full validate block.\n\n\nfun myFunction(foo: Matrix<Double>) {\n    foo.validate(\"foo\") { 1 x 3; transposable }\n\n    /* Your code here */\n}\n\n\n\n\nA Cautionary Example\n\n\nIf you have more than one matrix, you should avoid the shorthand syntax because dimensions variables will not \"stick\" as you might expect. For example:\n\n\nfun myFunction(foo: Matrix<Double>, bar: Matrix<Double>) {\n    foo.validate(\"foo\") {  1  x 'N'; transposable }\n    bar.validate(\"bar\") { 'N' x 'N' } // <-- WILL NOT WORK\n\n\n    /* Your code here */\n}\n\n\n\n\nIn that example, it will validate that \nbar\n is square, but not that its dimensions correspond with the number of columns in \nfoo\n as you might expect. This is because each validate block allocates a separate \nValidationContext\n that performs some of its validations at the end of the block.\n\n\nHow it works\n\n\nBehind the scenes, the validation code uses kotlin \nextension methods\n to enable a syntax inspired by Kotlin's \n\"Type-safe builders\" feature\n.\n\n\nEach of the validation rules you define is calling an extension method on the \nValidationContext\n class.\n\n\nIf you'd like to extend the validation syntax yourself, you can do so by adding more extension methods to \nValidationContext\n. \nbounds.kt\n probably offers the best example to work from.",
            "title": "Validation DSL"
        },
        {
            "location": "/General_Usage_Guide/Validation_DSL/index.html#matrix-validation-dsl",
            "text": "Koma provides definitions for a domain-specific language that you can use to validate matrices used as inputs to your functions in a consistent way. The rules throw detailed, human-readable exceptions using an appropriate Java exception class based on rules that look like this:  import koma.*\nimport koma.util.validation.*\n\nfun mFunction(foo: Matrix<Double>, bar: Matrix<Double>, baz: Matrix<Double>) {\n    validate {\n        foo(\"foo\") {  1  x 'N'; transposable }\n        bar(\"bar\") { 'N' x 'N'; symmetric }\n        baz(\"baz\") { 'N' x  1 ; max = 5 }\n    }\n\n    /* Your code here */\n}  Some of the exceptions the above code could generate include:  java.lang.IndexOutOfBoundsException: Invalid matrix dimensions.\n\nMatrix Required Actual \n====== ======== ====== \nfoo       1xN     1x2\nbar       NxN     2x2\nbaz       Nx1     2x3\n\nbaz must have the same number of rows as foo has columns\nbaz must have the same number of rows as bar has rows\nbaz must have the same number of rows as bar has columns\nbaz must have exactly 1 columns (has 3)  or  java.lang.IndexOutOfBoundsException: bar must be symmetric, but has dimensions 1x2  or  java.lang.IllegalArgumentException: baz[0, 0] > 5.0 (value was 15.0)",
            "title": "Matrix Validation DSL"
        },
        {
            "location": "/General_Usage_Guide/Validation_DSL/index.html#annotated-syntax",
            "text": "fun myFunction(foo: Matrix<Double>, bar: Matrix<Double>, baz: Matrix<Double>) {\n    validate { /*\n        vvv ------------------------------------ Matrix to examine.\n            vvvvv ------------------------------ Name to use in the exception.\n                    vvvvvvvvvvvvvvvvvvvvvvvv --- Rules to check the matrix */\n        foo(\"foo\") { 1  x 'N'; transposable }\n    }\n}",
            "title": "Annotated Syntax"
        },
        {
            "location": "/General_Usage_Guide/Validation_DSL/index.html#rules",
            "text": "Rules are regular Kotlin statements, which can be separated either by semicolons or newlines. The rules block will be evaluated with an instance of  ValidaitonContext  as its receiver.     Syntax  Description      1 x 2  or  dim(1, 2)  Verify the matrix has 1 row and 2 columns. Values can be any expression that evaluates to  Int . The latter syntax is provided as an alternative if the order-of-operations for  infix functions  does something weird.    1 x 'N'  Verify the matrix has 1 row and any number of columns; compare the column count to other things that use the character  'N'    transposable  The given dimensions can be in either order. So, a  1 x 3; transposable  matrix can have either 1 row and 3 columns or 3 rows and 1 column.    symmetric  Verify that the matrix is  symmetric    max = 4.0  Specify a maximum allowable value for individual coefficients in the matrix. Can be any expression that evaluates to  Double    min = 2.0  Specify a minimum allowable value for individual coefficients in the matrix. Can be any expression that evaluates to  Double",
            "title": "Rules"
        },
        {
            "location": "/General_Usage_Guide/Validation_DSL/index.html#shorthand-for-a-single-matrix",
            "text": "If you've written a function that only has a single Matrix argument, you can use this shorthand syntax instead of a full validate block.  fun myFunction(foo: Matrix<Double>) {\n    foo.validate(\"foo\") { 1 x 3; transposable }\n\n    /* Your code here */\n}",
            "title": "Shorthand for a single Matrix"
        },
        {
            "location": "/General_Usage_Guide/Validation_DSL/index.html#a-cautionary-example",
            "text": "If you have more than one matrix, you should avoid the shorthand syntax because dimensions variables will not \"stick\" as you might expect. For example:  fun myFunction(foo: Matrix<Double>, bar: Matrix<Double>) {\n    foo.validate(\"foo\") {  1  x 'N'; transposable }\n    bar.validate(\"bar\") { 'N' x 'N' } // <-- WILL NOT WORK\n\n\n    /* Your code here */\n}  In that example, it will validate that  bar  is square, but not that its dimensions correspond with the number of columns in  foo  as you might expect. This is because each validate block allocates a separate  ValidationContext  that performs some of its validations at the end of the block.",
            "title": "A Cautionary Example"
        },
        {
            "location": "/General_Usage_Guide/Validation_DSL/index.html#how-it-works",
            "text": "Behind the scenes, the validation code uses kotlin  extension methods  to enable a syntax inspired by Kotlin's  \"Type-safe builders\" feature .  Each of the validation rules you define is calling an extension method on the  ValidationContext  class.  If you'd like to extend the validation syntax yourself, you can do so by adding more extension methods to  ValidationContext .  bounds.kt  probably offers the best example to work from.",
            "title": "How it works"
        },
        {
            "location": "/General_Usage_Guide/Advanced/Build_From_Source/index.html",
            "text": "Building Koma from Source\n\n\nPrerequisites\n\n\nBuilding Koma from source requires:\n\n\n\n\nA JDK targeting Java 8 on the system path\n\n\ngit\n\n\n\n\nBuilding\n\n\nGrab a copy of the latest Koma code and enter the checked out directory:\n\n\ngit clone https://github.com/kyonifer/koma.git\ncd koma\n\n\n\n\nNow run the gradle build command, passing in a parameter specifying which platform you\nare building for:\n\n\n\n\n\n./gradlew build\n\n# Optionally, build a fat jar with all dependencies included to ./build/libs/\n./gradlew shadowJar\n\n\n\n\n# Outputs commonjs modules in ./node_modules/\n./gradlew build -Ptarget=js\n\n\n\n\n# Outputs a linked executable with main supplied by examples/native/main.kt\n# (lib not yet supported)\n./gradlew build -Ptarget=native\n\n\n\n\nTo verify success, run some test code:\n\n\n\n\n\n# Runs the unit tests\n./gradlew clean test\n\n\n\n\n# Runs a toy example assuming node is installed\nnode examples/js/example.js\n\n\n\n\n# Runs the previously built executable\n./Koma.kexe\n\n\n\n\nNote About IDEs\n\n\nIf you use an IDE, make sure that you run the gradle \n:codegen\n \ntask when building Koma from source. This is done for you when using gradle \ndirectly, but your IDEs build system will likely not know that it needs to. The\n\n:codegen\n task generates the primitive-optimized implementations from the \n\nimplementation templates\n.\nIf you are getting errors such as \nDefaultDoubleMatrix\n not existing, its probably\nbecause the \n:codegen\n task has yet to run.",
            "title": "Build From Source"
        },
        {
            "location": "/General_Usage_Guide/Advanced/Build_From_Source/index.html#building-koma-from-source",
            "text": "",
            "title": "Building Koma from Source"
        },
        {
            "location": "/General_Usage_Guide/Advanced/Build_From_Source/index.html#prerequisites",
            "text": "Building Koma from source requires:   A JDK targeting Java 8 on the system path  git",
            "title": "Prerequisites"
        },
        {
            "location": "/General_Usage_Guide/Advanced/Build_From_Source/index.html#building",
            "text": "Grab a copy of the latest Koma code and enter the checked out directory:  git clone https://github.com/kyonifer/koma.git\ncd koma  Now run the gradle build command, passing in a parameter specifying which platform you\nare building for:   ./gradlew build\n\n# Optionally, build a fat jar with all dependencies included to ./build/libs/\n./gradlew shadowJar  # Outputs commonjs modules in ./node_modules/\n./gradlew build -Ptarget=js  # Outputs a linked executable with main supplied by examples/native/main.kt\n# (lib not yet supported)\n./gradlew build -Ptarget=native  To verify success, run some test code:   # Runs the unit tests\n./gradlew clean test  # Runs a toy example assuming node is installed\nnode examples/js/example.js  # Runs the previously built executable\n./Koma.kexe",
            "title": "Building"
        },
        {
            "location": "/General_Usage_Guide/Advanced/Build_From_Source/index.html#note-about-ides",
            "text": "If you use an IDE, make sure that you run the gradle  :codegen  \ntask when building Koma from source. This is done for you when using gradle \ndirectly, but your IDEs build system will likely not know that it needs to. The :codegen  task generates the primitive-optimized implementations from the  implementation templates .\nIf you are getting errors such as  DefaultDoubleMatrix  not existing, its probably\nbecause the  :codegen  task has yet to run.",
            "title": "Note About IDEs"
        },
        {
            "location": "/General_Usage_Guide/Advanced/Contributing/index.html",
            "text": "Building the source\n\n\nPlease see \nthe instructions for building from source\n\n\nUnit Tests\n\n\nKoma's unit tests are located \nhere\n.\nYou can verify that the project still builds successfully on all three targets by running\n\n\n./gradlew test\n./gradlew -Ptarget=native\n./gradlew -Ptarget=js\n\n\n\n\nUnit tests on platforms other than java aren't currently available.\n\n\nBuilding docs\n\n\nTo build the docs, you'll need the python mkdocs and themes packages:\n\n\npip install mkdocs\npip install mkdocs-bootswatch\n\n\n\n\nYou can now run \nmkdocs serve\n and connect to localhost:8000 to view \nthe resulting docs as you make changes.\n\n\nHacking on Koma with Intellij\n\n\nBy default, importing Koma's \nsettings.gradle\n into Intellij will result in a \nproject configured for the JVM. If you'd like to load it in a different mode, \nyou can set \ntarget=js\n or \ntarget=native\n in \n$GRADLE_HOME/gradle.properties\n.\n\n\nNote\n: Because native doesn't have official Intellij support yet, setting\n\ntarget=native\n will cause importing Koma into Intellij to use \na jury rigged \nbuild file\n\nthats designed to trick Intellij into completion of some kotlin-native types. \n\n\nNote\n: Setting the target property in gradle.properties will also affect \n./gradlew\n\n behavior. Be sure to unset them if you later want the target property unset when building\n from the command line.",
            "title": "Contributing"
        },
        {
            "location": "/General_Usage_Guide/Advanced/Contributing/index.html#building-the-source",
            "text": "Please see  the instructions for building from source",
            "title": "Building the source"
        },
        {
            "location": "/General_Usage_Guide/Advanced/Contributing/index.html#unit-tests",
            "text": "Koma's unit tests are located  here .\nYou can verify that the project still builds successfully on all three targets by running  ./gradlew test\n./gradlew -Ptarget=native\n./gradlew -Ptarget=js  Unit tests on platforms other than java aren't currently available.",
            "title": "Unit Tests"
        },
        {
            "location": "/General_Usage_Guide/Advanced/Contributing/index.html#building-docs",
            "text": "To build the docs, you'll need the python mkdocs and themes packages:  pip install mkdocs\npip install mkdocs-bootswatch  You can now run  mkdocs serve  and connect to localhost:8000 to view \nthe resulting docs as you make changes.",
            "title": "Building docs"
        },
        {
            "location": "/General_Usage_Guide/Advanced/Contributing/index.html#hacking-on-koma-with-intellij",
            "text": "By default, importing Koma's  settings.gradle  into Intellij will result in a \nproject configured for the JVM. If you'd like to load it in a different mode, \nyou can set  target=js  or  target=native  in  $GRADLE_HOME/gradle.properties .  Note : Because native doesn't have official Intellij support yet, setting target=native  will cause importing Koma into Intellij to use  a jury rigged \nbuild file \nthats designed to trick Intellij into completion of some kotlin-native types.   Note : Setting the target property in gradle.properties will also affect  ./gradlew \n behavior. Be sure to unset them if you later want the target property unset when building\n from the command line.",
            "title": "Hacking on Koma with Intellij"
        },
        {
            "location": "/Reference_API_Docs/index.html",
            "text": "api\n\n\nPackages\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nkoma\n\n\nA set of toplevel functions which provide a scientific environment similar to NumPy or MATLAB.\n\n\n\n\n\n\nkoma.matrix\n\n\nInterfaces for the abstract Matrix and MatrixFactory types which are implemented by various computation backends.\n\n\n\n\n\n\nkoma.matrix.common\n\n\nBase classes for matrices.\n\n\n\n\n\n\nkoma.matrix.default\n\n\nA set of (unoptimized) implementations of Matrices that run on all platforms.\n\n\n\n\n\n\nkoma.ndarray\n\n\nA set of interfaces for N-dimensional containers\n\n\n\n\n\n\nkoma.ndarray.common\n\n\nBase classes for ndarrays\n\n\n\n\n\n\nkoma.ndarray.default\n\n\nA set of (unoptimized) implementations of NDArrays that run on all platforms\n\n\n\n\n\n\nkoma.util\n\n\nUtility functions.\n\n\n\n\n\n\nkoma.util.test\n\n\nUtility functions for writing tests with matrices.\n\n\n\n\n\n\n\n\nIndex\n\n\nAll Types",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/index.html#packages",
            "text": "Name  Summary      koma  A set of toplevel functions which provide a scientific environment similar to NumPy or MATLAB.    koma.matrix  Interfaces for the abstract Matrix and MatrixFactory types which are implemented by various computation backends.    koma.matrix.common  Base classes for matrices.    koma.matrix.default  A set of (unoptimized) implementations of Matrices that run on all platforms.    koma.ndarray  A set of interfaces for N-dimensional containers    koma.ndarray.common  Base classes for ndarrays    koma.ndarray.default  A set of (unoptimized) implementations of NDArrays that run on all platforms    koma.util  Utility functions.    koma.util.test  Utility functions for writing tests with matrices.",
            "title": "Packages"
        },
        {
            "location": "/Reference_API_Docs/index.html#index",
            "text": "All Types",
            "title": "Index"
        },
        {
            "location": "/Reference_API_Docs/alltypes/index.html",
            "text": "All Types\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nkoma.matrix.default.DefaultDoubleMatrix\n\n\n\n\n\n\n\n\nkoma.matrix.default.DefaultDoubleMatrixFactory\n\n\n\n\n\n\n\n\nkoma.ndarray.default.DefaultDoubleNDArray\n\n\n\n\n\n\n\n\nkoma.matrix.default.DefaultFloatMatrix\n\n\n\n\n\n\n\n\nkoma.matrix.default.DefaultFloatMatrixFactory\n\n\n\n\n\n\n\n\nkoma.ndarray.default.DefaultFloatNDArray\n\n\n\n\n\n\n\n\nkoma.matrix.default.DefaultIntMatrix\n\n\n\n\n\n\n\n\nkoma.matrix.default.DefaultIntMatrixFactory\n\n\n\n\n\n\n\n\nkoma.ndarray.default.DefaultIntNDArray\n\n\n\n\n\n\n\n\nkoma.matrix.default.DefaultLongMatrix\n\n\n\n\n\n\n\n\nkoma.matrix.default.DefaultLongMatrixFactory\n\n\n\n\n\n\n\n\nkoma.ndarray.default.DefaultLongNDArray\n\n\n\n\n\n\n\n\nkoma.ndarray.default.DefaultNDArray\n\n\nAn (unoptimized) implementation of \nNDArray\n in pure Kotlin, for portability between the different platforms koma supports.\n\n\n\n\n\n\nkotlin.Double\n (extensions in package koma)\n\n\n\n\n\n\n\n\nkoma.matrix.common.DoubleFactoryBase\n\n\nSome functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions.\n\n\n\n\n\n\nkoma.matrix.common.DoubleMatrixBase\n\n\nSome functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions.\n\n\n\n\n\n\nkotlin.Int\n (extensions in package koma)\n\n\n\n\n\n\n\n\nkotlin.collections.List\n (extensions in package koma.ndarray.default)\n\n\n\n\n\n\n\n\nkoma.MatFacProperty\n\n\nA property which queries the platform-specific discovery function \navailable\n for a backend, and if none are found there it selects \ndefault\n instead. If this property is ever set by the user then the user's choice overrides all others.\n\n\n\n\n\n\nkoma.matrix.Matrix\n\n\nA general facade for a Matrix type. Allows for various backend to be implemented to actually perform the computation. A koma backend must both implement this class and MatrixFactory. A matrix is guaranteed to be 2D and to have a numerical type. For storage of arbitrary types and dimensions, see \nkoma.ndarray.NDArray\n.\n\n\n\n\n\n\nkoma.matrix.common.MatrixBase\n\n\n\n\n\n\n\n\nkoma.matrix.MatrixFactory\n\n\nA set of constructors that must be implemented by a koma backend. Generates various types of matrices. Generic parameter is the type of element, i.e. T=Matrix or T=Matrix, etc.\n\n\n\n\n\n\nkoma.matrix.MatrixType\n\n\n\n\n\n\n\n\nkoma.matrix.MatrixTypes\n\n\nIntended to be used as a parameter to functions, when selection of matrix type is needed. (e.g. creators.kt which return Matrix for a requested T).\n\n\n\n\n\n\nkoma.ndarray.NDArray\n\n\nA general N-dimensional container for arbitrary types. If you are looking for a ND container restricted to numerical types, please look at \nNumericalNDArray\n. If you are looking for a 2D container supporting linear algebra, please look at \nMatrix\n.\n\n\n\n\n\n\nkoma.ndarray.NumericalNDArray\n\n\nAn \nNDArray\n that holds a numerical type, such that math operations are available.\n\n\n\n\n\n\nkoma.ndarray.common.NumericalNDArrayFacBase\n\n\n\n\n\n\n\n\nkoma.ndarray.NumericalNDArrayFactory\n\n\nA set of constructors that must be implemented by a koma NDArray backend. Generic parameter is the type of element, i.e. T=NDArray or T=NDArray, etc.\n\n\n\n\n\n\nkoma.UInt8\n\n\nAn implementation of an unsigned byte. Still a WIP.\n\n\n\n\n\n\nkoma.mat\n\n\nA helper object that allows for quick construction of matrix literals.",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/alltypes/index.html#all-types",
            "text": "Name  Summary      koma.matrix.default.DefaultDoubleMatrix     koma.matrix.default.DefaultDoubleMatrixFactory     koma.ndarray.default.DefaultDoubleNDArray     koma.matrix.default.DefaultFloatMatrix     koma.matrix.default.DefaultFloatMatrixFactory     koma.ndarray.default.DefaultFloatNDArray     koma.matrix.default.DefaultIntMatrix     koma.matrix.default.DefaultIntMatrixFactory     koma.ndarray.default.DefaultIntNDArray     koma.matrix.default.DefaultLongMatrix     koma.matrix.default.DefaultLongMatrixFactory     koma.ndarray.default.DefaultLongNDArray     koma.ndarray.default.DefaultNDArray  An (unoptimized) implementation of  NDArray  in pure Kotlin, for portability between the different platforms koma supports.    kotlin.Double  (extensions in package koma)     koma.matrix.common.DoubleFactoryBase  Some functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions.    koma.matrix.common.DoubleMatrixBase  Some functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions.    kotlin.Int  (extensions in package koma)     kotlin.collections.List  (extensions in package koma.ndarray.default)     koma.MatFacProperty  A property which queries the platform-specific discovery function  available  for a backend, and if none are found there it selects  default  instead. If this property is ever set by the user then the user's choice overrides all others.    koma.matrix.Matrix  A general facade for a Matrix type. Allows for various backend to be implemented to actually perform the computation. A koma backend must both implement this class and MatrixFactory. A matrix is guaranteed to be 2D and to have a numerical type. For storage of arbitrary types and dimensions, see  koma.ndarray.NDArray .    koma.matrix.common.MatrixBase     koma.matrix.MatrixFactory  A set of constructors that must be implemented by a koma backend. Generates various types of matrices. Generic parameter is the type of element, i.e. T=Matrix or T=Matrix, etc.    koma.matrix.MatrixType     koma.matrix.MatrixTypes  Intended to be used as a parameter to functions, when selection of matrix type is needed. (e.g. creators.kt which return Matrix for a requested T).    koma.ndarray.NDArray  A general N-dimensional container for arbitrary types. If you are looking for a ND container restricted to numerical types, please look at  NumericalNDArray . If you are looking for a 2D container supporting linear algebra, please look at  Matrix .    koma.ndarray.NumericalNDArray  An  NDArray  that holds a numerical type, such that math operations are available.    koma.ndarray.common.NumericalNDArrayFacBase     koma.ndarray.NumericalNDArrayFactory  A set of constructors that must be implemented by a koma NDArray backend. Generic parameter is the type of element, i.e. T=NDArray or T=NDArray, etc.    koma.UInt8  An implementation of an unsigned byte. Still a WIP.    koma.mat  A helper object that allows for quick construction of matrix literals.",
            "title": "All Types"
        },
        {
            "location": "/Reference_API_Docs/koma/-d-e-p-r-e-c-a-t-e_-i-m-p-l-i-c-i-t_2-d/index.html",
            "text": "api\n / \nkoma\n / \nDEPRECATE_IMPLICIT_2D\n\n\nDEPRECATE_IMPLICIT_2D\n\n\nconst val DEPRECATE_IMPLICIT_2D:\nString",
            "title": " d e p r e c a t e  i m p l i c i t 2 d"
        },
        {
            "location": "/Reference_API_Docs/koma/-d-e-p-r-e-c-a-t-e_-i-m-p-l-i-c-i-t_2-d/index.html#deprecate_implicit_2d",
            "text": "const val DEPRECATE_IMPLICIT_2D: String",
            "title": "DEPRECATE_IMPLICIT_2D"
        },
        {
            "location": "/Reference_API_Docs/koma/-e/index.html",
            "text": "api\n / \nkoma\n / \nE\n\n\nE\n\n\nval E:\nDouble\n\n\nThe value of e, such that e pow ln(x) = x",
            "title": " e"
        },
        {
            "location": "/Reference_API_Docs/koma/-e/index.html#e",
            "text": "val E: Double  The value of e, such that e pow ln(x) = x",
            "title": "E"
        },
        {
            "location": "/Reference_API_Docs/koma/-l-o-n-g_-n-u-m-b-e-r/index.html",
            "text": "api\n / \nkoma\n / \nLONG_NUMBER\n\n\nLONG_NUMBER\n\n\nval LONG_NUMBER:\nString",
            "title": " l o n g  n u m b e r"
        },
        {
            "location": "/Reference_API_Docs/koma/-l-o-n-g_-n-u-m-b-e-r/index.html#long_number",
            "text": "val LONG_NUMBER: String",
            "title": "LONG_NUMBER"
        },
        {
            "location": "/Reference_API_Docs/koma/-p-i/index.html",
            "text": "api\n / \nkoma\n / \nPI\n\n\nPI\n\n\nval PI:\nDouble\n\n\nThe value of Pi",
            "title": " p i"
        },
        {
            "location": "/Reference_API_Docs/koma/-p-i/index.html#pi",
            "text": "val PI: Double  The value of Pi",
            "title": "PI"
        },
        {
            "location": "/Reference_API_Docs/koma/-s-c-i-e-n-t-i-f-i-c_-l-o-n-g_-n-u-m-b-e-r/index.html",
            "text": "api\n / \nkoma\n / \nSCIENTIFIC_LONG_NUMBER\n\n\nSCIENTIFIC_LONG_NUMBER\n\n\nval SCIENTIFIC_LONG_NUMBER:\nString",
            "title": " s c i e n t i f i c  l o n g  n u m b e r"
        },
        {
            "location": "/Reference_API_Docs/koma/-s-c-i-e-n-t-i-f-i-c_-l-o-n-g_-n-u-m-b-e-r/index.html#scientific_long_number",
            "text": "val SCIENTIFIC_LONG_NUMBER: String",
            "title": "SCIENTIFIC_LONG_NUMBER"
        },
        {
            "location": "/Reference_API_Docs/koma/-s-c-i-e-n-t-i-f-i-c_-n-u-m-b-e-r/index.html",
            "text": "api\n / \nkoma\n / \nSCIENTIFIC_NUMBER\n\n\nSCIENTIFIC_NUMBER\n\n\nval SCIENTIFIC_NUMBER:\nString",
            "title": " s c i e n t i f i c  n u m b e r"
        },
        {
            "location": "/Reference_API_Docs/koma/-s-c-i-e-n-t-i-f-i-c_-n-u-m-b-e-r/index.html#scientific_number",
            "text": "val SCIENTIFIC_NUMBER: String",
            "title": "SCIENTIFIC_NUMBER"
        },
        {
            "location": "/Reference_API_Docs/koma/-s-c-i-e-n-t-i-f-i-c_-v-e-r-y_-l-o-n-g_-n-u-m-b-e-r/index.html",
            "text": "api\n / \nkoma\n / \nSCIENTIFIC_VERY_LONG_NUMBER\n\n\nSCIENTIFIC_VERY_LONG_NUMBER\n\n\nval SCIENTIFIC_VERY_LONG_NUMBER:\nString",
            "title": " s c i e n t i f i c  v e r y  l o n g  n u m b e r"
        },
        {
            "location": "/Reference_API_Docs/koma/-s-c-i-e-n-t-i-f-i-c_-v-e-r-y_-l-o-n-g_-n-u-m-b-e-r/index.html#scientific_very_long_number",
            "text": "val SCIENTIFIC_VERY_LONG_NUMBER: String",
            "title": "SCIENTIFIC_VERY_LONG_NUMBER"
        },
        {
            "location": "/Reference_API_Docs/koma/-s-h-o-r-t_-n-u-m-b-e-r/index.html",
            "text": "api\n / \nkoma\n / \nSHORT_NUMBER\n\n\nSHORT_NUMBER\n\n\nval SHORT_NUMBER:\nString",
            "title": " s h o r t  n u m b e r"
        },
        {
            "location": "/Reference_API_Docs/koma/-s-h-o-r-t_-n-u-m-b-e-r/index.html#short_number",
            "text": "val SHORT_NUMBER: String",
            "title": "SHORT_NUMBER"
        },
        {
            "location": "/Reference_API_Docs/koma/-v-e-r-y_-l-o-n-g_-n-u-m-b-e-r/index.html",
            "text": "api\n / \nkoma\n / \nVERY_LONG_NUMBER\n\n\nVERY_LONG_NUMBER\n\n\nval VERY_LONG_NUMBER:\nString",
            "title": " v e r y  l o n g  n u m b e r"
        },
        {
            "location": "/Reference_API_Docs/koma/-v-e-r-y_-l-o-n-g_-n-u-m-b-e-r/index.html#very_long_number",
            "text": "val VERY_LONG_NUMBER: String",
            "title": "VERY_LONG_NUMBER"
        },
        {
            "location": "/Reference_API_Docs/koma/abs/index.html",
            "text": "api\n / \nkoma\n / \nabs\n\n\nabs\n\n\nfun abs(arr:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\n\n\nReturns a matrix of the absolute value of each element in the input matrix.\n\n\nParameters\n\n\narr\n - An arbitrarily sized matrix\n\n\nReturn\n\nA matrix consisting of the operation performed element-wise.\n\n\nfun abs(arr:\nDouble\n):\nDouble\n\n\nA convenience function performing the abs operation via the \nMath\n equivalent call.\n\n\nfun abs(arr:\nInt\n):\nDouble\n\n\nA convenience function performing the abs via the \nMath\n equivalent call.",
            "title": "Abs"
        },
        {
            "location": "/Reference_API_Docs/koma/abs/index.html#abs",
            "text": "fun abs(arr: Matrix < Double >): Matrix < Double >  Returns a matrix of the absolute value of each element in the input matrix.",
            "title": "abs"
        },
        {
            "location": "/Reference_API_Docs/koma/abs/index.html#parameters",
            "text": "arr  - An arbitrarily sized matrix  Return \nA matrix consisting of the operation performed element-wise.  fun abs(arr: Double ): Double  A convenience function performing the abs operation via the  Math  equivalent call.  fun abs(arr: Int ): Double  A convenience function performing the abs via the  Math  equivalent call.",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma/acos/index.html",
            "text": "api\n / \nkoma\n / \nacos\n\n\nacos\n\n\nfun acos(arr:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\n\n\nReturns a matrix of the arccos of each element in the input matrix.\n\n\nParameters\n\n\narr\n - An arbitrarily sized matrix\n\n\nReturn\n\nA matrix consisting of the operation performed element-wise.\n\n\nfun acos(arr:\nDouble\n):\nDouble\n\n\nfun acos(arr:\nInt\n):\nDouble\n\n\nA convenience function performing the acos operation via the \nMath\n equivalent call.",
            "title": "Acos"
        },
        {
            "location": "/Reference_API_Docs/koma/acos/index.html#acos",
            "text": "fun acos(arr: Matrix < Double >): Matrix < Double >  Returns a matrix of the arccos of each element in the input matrix.",
            "title": "acos"
        },
        {
            "location": "/Reference_API_Docs/koma/acos/index.html#parameters",
            "text": "arr  - An arbitrarily sized matrix  Return \nA matrix consisting of the operation performed element-wise.  fun acos(arr: Double ): Double  fun acos(arr: Int ): Double  A convenience function performing the acos operation via the  Math  equivalent call.",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma/all/index.html",
            "text": "api\n / \nkoma\n / \nall\n\n\nall\n\n\nval all:\nIntRange",
            "title": "All"
        },
        {
            "location": "/Reference_API_Docs/koma/all/index.html#all",
            "text": "val all: IntRange",
            "title": "all"
        },
        {
            "location": "/Reference_API_Docs/koma/arange/index.html",
            "text": "api\n / \nkoma\n / \narange\n\n\narange\n\n\nfun arange(start:\nDouble\n, stop:\nDouble\n, step:\nDouble\n):\nMatrix\n<\nDouble\n>\n\n\nCreates an vector filled in by the given range information. The filled values will start at \nstart\n and\nend at \nstop\n, with the interval between each value \nstep\n.\n\n\nfun <T> arange(start:\nDouble\n, stop:\nDouble\n, step:\nDouble\n, dtype:\nMatrixType\n<T>):\nMatrix\n<T>",
            "title": "Arange"
        },
        {
            "location": "/Reference_API_Docs/koma/arange/index.html#arange",
            "text": "fun arange(start: Double , stop: Double , step: Double ): Matrix < Double >  Creates an vector filled in by the given range information. The filled values will start at  start  and\nend at  stop , with the interval between each value  step .  fun <T> arange(start: Double , stop: Double , step: Double , dtype: MatrixType <T>): Matrix <T>",
            "title": "arange"
        },
        {
            "location": "/Reference_API_Docs/koma/arg-max/index.html",
            "text": "api\n / \nkoma\n / \nargMax\n\n\nargMax\n\n\nfun argMax(arr:\nMatrix\n<\nDouble\n>):\nInt\n\n\nReturns the index of the max element in the input matrix\n\n\nParameters\n\n\narr\n - An arbitrarily sized matrix\n\n\nReturn\n\nThe maximum value",
            "title": "Arg max"
        },
        {
            "location": "/Reference_API_Docs/koma/arg-max/index.html#argmax",
            "text": "fun argMax(arr: Matrix < Double >): Int  Returns the index of the max element in the input matrix",
            "title": "argMax"
        },
        {
            "location": "/Reference_API_Docs/koma/arg-max/index.html#parameters",
            "text": "arr  - An arbitrarily sized matrix  Return \nThe maximum value",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma/arg-min/index.html",
            "text": "api\n / \nkoma\n / \nargMin\n\n\nargMin\n\n\nfun argMin(arr:\nMatrix\n<\nDouble\n>):\nInt\n\n\nReturns the index of the min element in the input matrix\n\n\nParameters\n\n\narr\n - An arbitrarily sized matrix\n\n\nReturn\n\nThe maximum value",
            "title": "Arg min"
        },
        {
            "location": "/Reference_API_Docs/koma/arg-min/index.html#argmin",
            "text": "fun argMin(arr: Matrix < Double >): Int  Returns the index of the min element in the input matrix",
            "title": "argMin"
        },
        {
            "location": "/Reference_API_Docs/koma/arg-min/index.html#parameters",
            "text": "arr  - An arbitrarily sized matrix  Return \nThe maximum value",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma/asin/index.html",
            "text": "api\n / \nkoma\n / \nasin\n\n\nasin\n\n\nfun asin(arr:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\n\n\nReturns a matrix of the arcsin of each element in the input matrix.\n\n\nParameters\n\n\narr\n - An arbitrarily sized matrix\n\n\nReturn\n\nA matrix consisting of the operation performed element-wise.\n\n\nfun asin(arr:\nDouble\n):\nDouble\n\n\nfun asin(arr:\nInt\n):\nDouble\n\n\nA convenience function performing the asin operation via the \nMath\n equivalent call.",
            "title": "Asin"
        },
        {
            "location": "/Reference_API_Docs/koma/asin/index.html#asin",
            "text": "fun asin(arr: Matrix < Double >): Matrix < Double >  Returns a matrix of the arcsin of each element in the input matrix.",
            "title": "asin"
        },
        {
            "location": "/Reference_API_Docs/koma/asin/index.html#parameters",
            "text": "arr  - An arbitrarily sized matrix  Return \nA matrix consisting of the operation performed element-wise.  fun asin(arr: Double ): Double  fun asin(arr: Int ): Double  A convenience function performing the asin operation via the  Math  equivalent call.",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma/atan/index.html",
            "text": "api\n / \nkoma\n / \natan\n\n\natan\n\n\nfun atan(arr:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\n\n\nReturns a matrix of the arctan of each element in the input matrix.\n\n\nParameters\n\n\narr\n - An arbitrarily sized matrix\n\n\nReturn\n\nA matrix consisting of the operation performed element-wise.\n\n\nfun atan(arr:\nDouble\n):\nDouble\n\n\nfun atan(arr:\nInt\n):\nDouble\n\n\nA convenience function performing the atan operation via the \nMath\n equivalent call.",
            "title": "Atan"
        },
        {
            "location": "/Reference_API_Docs/koma/atan/index.html#atan",
            "text": "fun atan(arr: Matrix < Double >): Matrix < Double >  Returns a matrix of the arctan of each element in the input matrix.",
            "title": "atan"
        },
        {
            "location": "/Reference_API_Docs/koma/atan/index.html#parameters",
            "text": "arr  - An arbitrarily sized matrix  Return \nA matrix consisting of the operation performed element-wise.  fun atan(arr: Double ): Double  fun atan(arr: Int ): Double  A convenience function performing the atan operation via the  Math  equivalent call.",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma/atan2/index.html",
            "text": "api\n / \nkoma\n / \natan2\n\n\natan2\n\n\nfun atan2(x:\nDouble\n, y:\nDouble\n):\nDouble\n\n\nfun atan2(x:\nInt\n, y:\nInt\n):\nDouble\n\n\nA convenience function performing the atan2 operation via the \nMath\n equivalent call.",
            "title": "Atan2"
        },
        {
            "location": "/Reference_API_Docs/koma/atan2/index.html#atan2",
            "text": "fun atan2(x: Double , y: Double ): Double  fun atan2(x: Int , y: Int ): Double  A convenience function performing the atan2 operation via the  Math  equivalent call.",
            "title": "atan2"
        },
        {
            "location": "/Reference_API_Docs/koma/ceil/index.html",
            "text": "api\n / \nkoma\n / \nceil\n\n\nceil\n\n\nfun ceil(arr:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\n\n\nRounds each element to the integer which is nearest to the element and still less than the\nelement (i.e. truncation).\n\n\nParameters\n\n\narr\n - An arbitrarily sized matrix\n\n\nReturn\n\nA matrix consisting of the operation performed element-wise.\n\n\nfun ceil(num:\nDouble\n):\nInt\n\n\nA convenience function performing the ceil via the \nMath\n equivalent call.\n\n\nfun ceil(num:\nInt\n):\nDouble\n\n\nA convenience function performing the ceil operation via the \nMath\n equivalent call.",
            "title": "Ceil"
        },
        {
            "location": "/Reference_API_Docs/koma/ceil/index.html#ceil",
            "text": "fun ceil(arr: Matrix < Double >): Matrix < Double >  Rounds each element to the integer which is nearest to the element and still less than the\nelement (i.e. truncation).",
            "title": "ceil"
        },
        {
            "location": "/Reference_API_Docs/koma/ceil/index.html#parameters",
            "text": "arr  - An arbitrarily sized matrix  Return \nA matrix consisting of the operation performed element-wise.  fun ceil(num: Double ): Int  A convenience function performing the ceil via the  Math  equivalent call.  fun ceil(num: Int ): Double  A convenience function performing the ceil operation via the  Math  equivalent call.",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma/cos/index.html",
            "text": "api\n / \nkoma\n / \ncos\n\n\ncos\n\n\nfun cos(arr:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\n\n\nReturns a matrix of the cos of each element in the input matrix.\n\n\nParameters\n\n\narr\n - An arbitrarily sized matrix\n\n\nReturn\n\nA matrix consisting of the operation performed element-wise.\n\n\nfun cos(arr:\nDouble\n):\nDouble\n\n\nfun cos(arr:\nInt\n):\nDouble\n\n\nA convenience function performing the cos operation via the \nMath\n equivalent call.",
            "title": "Cos"
        },
        {
            "location": "/Reference_API_Docs/koma/cos/index.html#cos",
            "text": "fun cos(arr: Matrix < Double >): Matrix < Double >  Returns a matrix of the cos of each element in the input matrix.",
            "title": "cos"
        },
        {
            "location": "/Reference_API_Docs/koma/cos/index.html#parameters",
            "text": "arr  - An arbitrarily sized matrix  Return \nA matrix consisting of the operation performed element-wise.  fun cos(arr: Double ): Double  fun cos(arr: Int ): Double  A convenience function performing the cos operation via the  Math  equivalent call.",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma/create/index.html",
            "text": "api\n / \nkoma\n / \ncreate\n\n\ncreate\n\n\nfun create(data:\nIntRange\n):\nMatrix\n<\nDouble\n>\n\n\nCreates a matrix filled with the given range of values.\n\n\nfun <T> create(data:\nIntRange\n, dtype:\nMatrixType\n<T>):\nMatrix\n<T>\n\n\nfun <T> create(data:\nDoubleArray\n, dtype:\nMatrixType\n<T>):\nMatrix\n<T>\n\n\nfun <T> create(data:\nDoubleArray\n, numRows:\nInt\n, numCols:\nInt\n, dtype:\nMatrixType\n<T>):\nMatrix\n<T>\n\n\nfun <T> create(data:\nArray\n<\nDoubleArray\n>, dtype:\nMatrixType\n<T>):\nMatrix\n<T>``fun create(data:\nDoubleArray\n):\nMatrix\n<\nDouble\n>\n\n\nCreates a matrix filled with the given set of values as a row-vector.\n\n\nfun create(data:\nDoubleArray\n, numRows:\nInt\n, numCols:\nInt\n):\nMatrix\n<\nDouble\n>\n\n\nCreates a matrix filled with the given set of values in row-major order.\n\n\nfun create(data:\nArray\n<\nDoubleArray\n>):\nMatrix\n<\nDouble\n>\n\n\nCreates a matrix filled with the given data, assuming input is row major.",
            "title": "Create"
        },
        {
            "location": "/Reference_API_Docs/koma/create/index.html#create",
            "text": "fun create(data: IntRange ): Matrix < Double >  Creates a matrix filled with the given range of values.  fun <T> create(data: IntRange , dtype: MatrixType <T>): Matrix <T>  fun <T> create(data: DoubleArray , dtype: MatrixType <T>): Matrix <T>  fun <T> create(data: DoubleArray , numRows: Int , numCols: Int , dtype: MatrixType <T>): Matrix <T>  fun <T> create(data: Array < DoubleArray >, dtype: MatrixType <T>): Matrix <T>``fun create(data: DoubleArray ): Matrix < Double >  Creates a matrix filled with the given set of values as a row-vector.  fun create(data: DoubleArray , numRows: Int , numCols: Int ): Matrix < Double >  Creates a matrix filled with the given set of values in row-major order.  fun create(data: Array < DoubleArray >): Matrix < Double >  Creates a matrix filled with the given data, assuming input is row major.",
            "title": "create"
        },
        {
            "location": "/Reference_API_Docs/koma/cross/index.html",
            "text": "api\n / \nkoma\n / \ncross\n\n\ncross\n\n\nfun cross(vec1:\nMatrix\n<\nDouble\n>, vec2:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\n\n\nCalculates the cross product of two vectors",
            "title": "Cross"
        },
        {
            "location": "/Reference_API_Docs/koma/cross/index.html#cross",
            "text": "fun cross(vec1: Matrix < Double >, vec2: Matrix < Double >): Matrix < Double >  Calculates the cross product of two vectors",
            "title": "cross"
        },
        {
            "location": "/Reference_API_Docs/koma/cumsum/index.html",
            "text": "api\n / \nkoma\n / \ncumsum\n\n\ncumsum\n\n\nfun cumsum(arr:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\n\n\nCalculates the cumulative (ongoing) sum of a matrix's elements. For example,\n\ncumsum(mat[1,2,3])\n would return \nmat[1,3,6]\n.\n\n\n@param arr The matrix to calculate the cumsum on. Sum will be computed in row-major order.\n\n\n@return A 1x(arr.numRows*arr.numCols) vector storing the ongoing cumsum.",
            "title": "Cumsum"
        },
        {
            "location": "/Reference_API_Docs/koma/cumsum/index.html#cumsum",
            "text": "fun cumsum(arr: Matrix < Double >): Matrix < Double >  Calculates the cumulative (ongoing) sum of a matrix's elements. For example, cumsum(mat[1,2,3])  would return  mat[1,3,6] .  @param arr The matrix to calculate the cumsum on. Sum will be computed in row-major order.  @return A 1x(arr.numRows*arr.numCols) vector storing the ongoing cumsum.",
            "title": "cumsum"
        },
        {
            "location": "/Reference_API_Docs/koma/diag/index.html",
            "text": "api\n / \nkoma\n / \ndiag\n\n\ndiag\n\n\nfun diag(arr:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\n\n\nExtracts the diagonal of the matrix.\n\n\nParameters\n\n\narr\n - An arbitrarily sized matrix\n\n\nReturn\n\na Nx1 column vector.",
            "title": "Diag"
        },
        {
            "location": "/Reference_API_Docs/koma/diag/index.html#diag",
            "text": "fun diag(arr: Matrix < Double >): Matrix < Double >  Extracts the diagonal of the matrix.",
            "title": "diag"
        },
        {
            "location": "/Reference_API_Docs/koma/diag/index.html#parameters",
            "text": "arr  - An arbitrarily sized matrix  Return \na Nx1 column vector.",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma/dot/index.html",
            "text": "api\n / \nkoma\n / \ndot\n\n\ndot\n\n\nfun dot(vec1:\nMatrix\n<\nDouble\n>, vec2:\nMatrix\n<\nDouble\n>):\nDouble\n\n\nCalculates the cross product of two vectors",
            "title": "Dot"
        },
        {
            "location": "/Reference_API_Docs/koma/dot/index.html#dot",
            "text": "fun dot(vec1: Matrix < Double >, vec2: Matrix < Double >): Double  Calculates the cross product of two vectors",
            "title": "dot"
        },
        {
            "location": "/Reference_API_Docs/koma/emul/index.html",
            "text": "api\n / \nkoma\n / \nemul\n\n\nemul\n\n\ninfix fun\nMatrix\n<\nDouble\n>.emul(other:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\n\n\nAllow infix operator \"a emul b\" to be element-wise multiplication of two matrices.",
            "title": "Emul"
        },
        {
            "location": "/Reference_API_Docs/koma/emul/index.html#emul",
            "text": "infix fun Matrix < Double >.emul(other: Matrix < Double >): Matrix < Double >  Allow infix operator \"a emul b\" to be element-wise multiplication of two matrices.",
            "title": "emul"
        },
        {
            "location": "/Reference_API_Docs/koma/end/index.html",
            "text": "api\n / \nkoma\n / \nend\n\n\nend\n\n\nval end:\nInt",
            "title": "End"
        },
        {
            "location": "/Reference_API_Docs/koma/end/index.html#end",
            "text": "val end: Int",
            "title": "end"
        },
        {
            "location": "/Reference_API_Docs/koma/epow/index.html",
            "text": "api\n / \nkoma\n / \nepow\n\n\nepow\n\n\nfun epow(arr:\nMatrix\n<\nDouble\n>, num:\nDouble\n):\nMatrix\n<\nDouble\n>\n\n\nReturns a matrix consisting of each element in the input matrix raised to the given power.\n\n\nParameters\n\n\narr\n - An arbitrarily sized matrix\n\n\nnum\n - the power to raise the matrix to.\n\n\nReturn\n\nA matrix consisting of the operation performed element-wise.",
            "title": "Epow"
        },
        {
            "location": "/Reference_API_Docs/koma/epow/index.html#epow",
            "text": "fun epow(arr: Matrix < Double >, num: Double ): Matrix < Double >  Returns a matrix consisting of each element in the input matrix raised to the given power.",
            "title": "epow"
        },
        {
            "location": "/Reference_API_Docs/koma/epow/index.html#parameters",
            "text": "arr  - An arbitrarily sized matrix  num  - the power to raise the matrix to.  Return \nA matrix consisting of the operation performed element-wise.",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma/exp/index.html",
            "text": "api\n / \nkoma\n / \nexp\n\n\nexp\n\n\nfun exp(arr:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\n\n\nReturns a matrix of E.pow(element) for each element in the input matrix.\n\n\nParameters\n\n\narr\n - An arbitrarily sized matrix\n\n\nReturn\n\nA matrix consisting of the operation performed element-wise.\n\n\nfun exp(arr:\nDouble\n):\nDouble\n\n\nfun exp(arr:\nInt\n):\nDouble\n\n\nA convenience function performing the exp operation via the \nMath\n equivalent call.",
            "title": "Exp"
        },
        {
            "location": "/Reference_API_Docs/koma/exp/index.html#exp",
            "text": "fun exp(arr: Matrix < Double >): Matrix < Double >  Returns a matrix of E.pow(element) for each element in the input matrix.",
            "title": "exp"
        },
        {
            "location": "/Reference_API_Docs/koma/exp/index.html#parameters",
            "text": "arr  - An arbitrarily sized matrix  Return \nA matrix consisting of the operation performed element-wise.  fun exp(arr: Double ): Double  fun exp(arr: Int ): Double  A convenience function performing the exp operation via the  Math  equivalent call.",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma/expm/index.html",
            "text": "api\n / \nkoma\n / \nexpm\n\n\nexpm\n\n\nfun expm(A:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\n\n\nCalculates the matrix exponential of the input matrix. Note that this is\nNOT the same thing as the elementwise exponential function.\n\n\nParameters\n\n\nA\n - The input matrix\n\n\nReturn\n\ne to the A",
            "title": "Expm"
        },
        {
            "location": "/Reference_API_Docs/koma/expm/index.html#expm",
            "text": "fun expm(A: Matrix < Double >): Matrix < Double >  Calculates the matrix exponential of the input matrix. Note that this is\nNOT the same thing as the elementwise exponential function.",
            "title": "expm"
        },
        {
            "location": "/Reference_API_Docs/koma/expm/index.html#parameters",
            "text": "A  - The input matrix  Return \ne to the A",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma/eye/index.html",
            "text": "api\n / \nkoma\n / \neye\n\n\neye\n\n\nfun eye(size:\nInt\n):\nMatrix\n<\nDouble\n>\n\n\nCreates a square identity matrix with the given size\n\n\nfun <T> eye(size:\nInt\n, dtype:\nMatrixType\n<T>):\nMatrix\n<T>\n\n\nfun <T> eye(rows:\nInt\n, cols:\nInt\n, dtype:\nMatrixType\n<T>):\nMatrix\n<T>``fun eye(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nDouble\n>\n\n\nCreates an identity matrix with the given size",
            "title": "Eye"
        },
        {
            "location": "/Reference_API_Docs/koma/eye/index.html#eye",
            "text": "fun eye(size: Int ): Matrix < Double >  Creates a square identity matrix with the given size  fun <T> eye(size: Int , dtype: MatrixType <T>): Matrix <T>  fun <T> eye(rows: Int , cols: Int , dtype: MatrixType <T>): Matrix <T>``fun eye(rows: Int , cols: Int ): Matrix < Double >  Creates an identity matrix with the given size",
            "title": "eye"
        },
        {
            "location": "/Reference_API_Docs/koma/factory/index.html",
            "text": "api\n / \nkoma\n / \nfactory\n\n\nfactory\n\n\nvar factory:\nMatrixFactory\n<\nMatrix\n<\nDouble\n>>\n\n\nDefault factory that all top-level functions use when building new matrices.\nDouble precision.\n\n\nReplace this factory at runtime with e.g. koma.matrix.ejml.EJMLMatrixFactory() to change what\nbackend the top-level functions use for computation.\n\n\nGetter\n\n\nDefault factory that all top-level functions use when building new matrices.\nDouble precision.\n\n\nReplace this factory at runtime with e.g. koma.matrix.ejml.EJMLMatrixFactory() to change what\nbackend the top-level functions use for computation.\n\n\nSetter\n\n\nDefault factory that all top-level functions use when building new matrices.\nDouble precision.\n\n\nReplace this factory at runtime with e.g. koma.matrix.ejml.EJMLMatrixFactory() to change what\nbackend the top-level functions use for computation.",
            "title": "Factory"
        },
        {
            "location": "/Reference_API_Docs/koma/factory/index.html#factory",
            "text": "var factory: MatrixFactory < Matrix < Double >>  Default factory that all top-level functions use when building new matrices.\nDouble precision.  Replace this factory at runtime with e.g. koma.matrix.ejml.EJMLMatrixFactory() to change what\nbackend the top-level functions use for computation.  Getter  Default factory that all top-level functions use when building new matrices.\nDouble precision.  Replace this factory at runtime with e.g. koma.matrix.ejml.EJMLMatrixFactory() to change what\nbackend the top-level functions use for computation.  Setter  Default factory that all top-level functions use when building new matrices.\nDouble precision.  Replace this factory at runtime with e.g. koma.matrix.ejml.EJMLMatrixFactory() to change what\nbackend the top-level functions use for computation.",
            "title": "factory"
        },
        {
            "location": "/Reference_API_Docs/koma/fill/index.html",
            "text": "api\n / \nkoma\n / \nfill\n\n\nfill\n\n\nfun fill(rows:\nInt\n, cols:\nInt\n, func: (\nInt\n,\nInt\n) ->\nDouble\n):\nMatrix\n<\nDouble\n>\n\n\nCreates a new matrix that fills all the values with the return values of func(row,val)\n\n\nfun <T> fill(rows:\nInt\n, cols:\nInt\n, dtype:\nMatrixType\n<T>, func: (\nInt\n,\nInt\n) -> T):\nMatrix\n<T>\n\n\nfun <T> fill(rows:\nInt\n, cols:\nInt\n, value: T, dtype:\nMatrixType\n<T>):\nMatrix\n<T>``fun fill(rows:\nInt\n, cols:\nInt\n, value:\nDouble\n):\nMatrix\n<\nDouble\n>\n\n\nCreates a new matrix that fills all the values with \nvalue",
            "title": "Fill"
        },
        {
            "location": "/Reference_API_Docs/koma/fill/index.html#fill",
            "text": "fun fill(rows: Int , cols: Int , func: ( Int , Int ) -> Double ): Matrix < Double >  Creates a new matrix that fills all the values with the return values of func(row,val)  fun <T> fill(rows: Int , cols: Int , dtype: MatrixType <T>, func: ( Int , Int ) -> T): Matrix <T>  fun <T> fill(rows: Int , cols: Int , value: T, dtype: MatrixType <T>): Matrix <T>``fun fill(rows: Int , cols: Int , value: Double ): Matrix < Double >  Creates a new matrix that fills all the values with  value",
            "title": "fill"
        },
        {
            "location": "/Reference_API_Docs/koma/float-factory/index.html",
            "text": "api\n / \nkoma\n / \nfloatFactory\n\n\nfloatFactory\n\n\nvar floatFactory:\nMatrixFactory\n<\nMatrix\n<\nFloat\n>>\n\n\nDefault factory that all top-level functions use when building new matrices.\nSingle precision.\n\n\nReplace this factory at runtime with another to change what\nbackend the top-level functions use for computation.\n\n\nGetter\n\n\nDefault factory that all top-level functions use when building new matrices.\nSingle precision.\n\n\nReplace this factory at runtime with another to change what\nbackend the top-level functions use for computation.\n\n\nSetter\n\n\nDefault factory that all top-level functions use when building new matrices.\nSingle precision.\n\n\nReplace this factory at runtime with another to change what\nbackend the top-level functions use for computation.",
            "title": "Float factory"
        },
        {
            "location": "/Reference_API_Docs/koma/float-factory/index.html#floatfactory",
            "text": "var floatFactory: MatrixFactory < Matrix < Float >>  Default factory that all top-level functions use when building new matrices.\nSingle precision.  Replace this factory at runtime with another to change what\nbackend the top-level functions use for computation.  Getter  Default factory that all top-level functions use when building new matrices.\nSingle precision.  Replace this factory at runtime with another to change what\nbackend the top-level functions use for computation.  Setter  Default factory that all top-level functions use when building new matrices.\nSingle precision.  Replace this factory at runtime with another to change what\nbackend the top-level functions use for computation.",
            "title": "floatFactory"
        },
        {
            "location": "/Reference_API_Docs/koma/floor/index.html",
            "text": "api\n / \nkoma\n / \nfloor\n\n\nfloor\n\n\nfun floor(arr:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\n\n\nRounds each element to the integer which is nearest to the element and still less than the\nelement (i.e. truncation).\n\n\nParameters\n\n\narr\n - An arbitrarily sized matrix\n\n\nReturn\n\nA matrix consisting of the operation performed element-wise.\n\n\nfun floor(arr:\nDouble\n):\nInt\n\n\nfun floor(arr:\nInt\n):\nDouble\n\n\nA convenience function performing the floor operation via the \nMath\n equivalent call.",
            "title": "Floor"
        },
        {
            "location": "/Reference_API_Docs/koma/floor/index.html#floor",
            "text": "fun floor(arr: Matrix < Double >): Matrix < Double >  Rounds each element to the integer which is nearest to the element and still less than the\nelement (i.e. truncation).",
            "title": "floor"
        },
        {
            "location": "/Reference_API_Docs/koma/floor/index.html#parameters",
            "text": "arr  - An arbitrarily sized matrix  Return \nA matrix consisting of the operation performed element-wise.  fun floor(arr: Double ): Int  fun floor(arr: Int ): Double  A convenience function performing the floor operation via the  Math  equivalent call.",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma/format/index.html",
            "text": "api\n / \nkoma\n / \nformat\n\n\nformat\n\n\nfun format(formatStr:\nString\n):\nUnit\n\n\nSets the format for Koma to display numbers in. For example, calling\n\n\nformat(\"long\")\nprintln(randn(3))\n\n\nwill cause println(someMatrix) to show more decimals (precision) than\n\n\nformat(\"short\")\nprintln(randn(3))\n\n\nformat() must be called before a .toString() request to a Koma matrix\nin order to have any effect, but setting it will persist for all printing\nof matrices until called again with a different format string. The default\nsetting is \"long\". Supported options are \"long\", \"short\", \"verylong\".",
            "title": "Format"
        },
        {
            "location": "/Reference_API_Docs/koma/format/index.html#format",
            "text": "fun format(formatStr: String ): Unit  Sets the format for Koma to display numbers in. For example, calling  format(\"long\")\nprintln(randn(3))  will cause println(someMatrix) to show more decimals (precision) than  format(\"short\")\nprintln(randn(3))  format() must be called before a .toString() request to a Koma matrix\nin order to have any effect, but setting it will persist for all printing\nof matrices until called again with a different format string. The default\nsetting is \"long\". Supported options are \"long\", \"short\", \"verylong\".",
            "title": "format"
        },
        {
            "location": "/Reference_API_Docs/koma/get-platform-double-factories/index.html",
            "text": "api\n / \nkoma\n / \ngetPlatformDoubleFactories\n\n\ngetPlatformDoubleFactories\n\n\nfun getPlatformDoubleFactories():\nList\n<\nMatrixFactory\n<\nMatrix\n<\nDouble\n>>>\n\n\nAt runtime, see which double backends are available on our classpath (if any).\n\n\nReturn\n\nA list of factory instances for backends that were found.",
            "title": "Get platform double factories"
        },
        {
            "location": "/Reference_API_Docs/koma/get-platform-double-factories/index.html#getplatformdoublefactories",
            "text": "fun getPlatformDoubleFactories(): List < MatrixFactory < Matrix < Double >>>  At runtime, see which double backends are available on our classpath (if any).  Return \nA list of factory instances for backends that were found.",
            "title": "getPlatformDoubleFactories"
        },
        {
            "location": "/Reference_API_Docs/koma/get-platform-float-factories/index.html",
            "text": "api\n / \nkoma\n / \ngetPlatformFloatFactories\n\n\ngetPlatformFloatFactories\n\n\nfun getPlatformFloatFactories():\nList\n<\nMatrixFactory\n<\nMatrix\n<\nFloat\n>>>\n\n\nAt runtime, see which float backends are available on our classpath (if any).\n\n\nReturn\n\nA list of factory instances for backends that were found.",
            "title": "Get platform float factories"
        },
        {
            "location": "/Reference_API_Docs/koma/get-platform-float-factories/index.html#getplatformfloatfactories",
            "text": "fun getPlatformFloatFactories(): List < MatrixFactory < Matrix < Float >>>  At runtime, see which float backends are available on our classpath (if any).  Return \nA list of factory instances for backends that were found.",
            "title": "getPlatformFloatFactories"
        },
        {
            "location": "/Reference_API_Docs/koma/get-platform-int-factories/index.html",
            "text": "api\n / \nkoma\n / \ngetPlatformIntFactories\n\n\ngetPlatformIntFactories\n\n\nfun getPlatformIntFactories():\nList\n<\nMatrixFactory\n<\nMatrix\n<\nInt\n>>>\n\n\nAt runtime, see which int backends are available on our classpath (if any).\n\n\nReturn\n\nA list of factory instances for backends that were found.",
            "title": "Get platform int factories"
        },
        {
            "location": "/Reference_API_Docs/koma/get-platform-int-factories/index.html#getplatformintfactories",
            "text": "fun getPlatformIntFactories(): List < MatrixFactory < Matrix < Int >>>  At runtime, see which int backends are available on our classpath (if any).  Return \nA list of factory instances for backends that were found.",
            "title": "getPlatformIntFactories"
        },
        {
            "location": "/Reference_API_Docs/koma/get/index.html",
            "text": "api\n / \nkoma\n / \nget\n\n\nget\n\n\noperator fun <T>\nMatrix\n<T>.get(i:\nInt\n, j:\nInt\n): T\n\n\noperator fun\nMatrix\n<\nDouble\n>.get(i:\nInt\n):\nDouble\n\n\noperator fun\nMatrix\n<\nDouble\n>.get(i:\nInt\n, j:\nInt\n):\nDouble\noperator fun <T>\nMatrix\n<T>.get(i:\nInt\n): T\n\n\nGets the ith element in the matrix. If 2D, selects elements in row-major order.\n\n\noperator fun <T>\nMatrix\n<T>.get(rows:\nIntRange\n, cols:\nIntRange\n):\nMatrix\n<T>\n\n\nAllow slicing, e.g. \nmatrix[1..2, 3..4]\n. Note that the range 1..2 is inclusive, so\nit will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.\n\n\n@param rows the set of rows to select\n@param cols the set of columns to select\n\n\n@return a new matrix containing the submatrix.\n\n\noperator fun <T>\nMatrix\n<T>.get(rows:\nIntRange\n, cols:\nInt\n):\nMatrix\n<T>\n\n\nAllows for slicing of the rows and selection of a single column\n\n\noperator fun <T>\nMatrix\n<T>.get(rows:\nInt\n, cols:\nIntRange\n):\nMatrix\n<T>\n\n\nAllows for slicing of the cols and selection of a single row",
            "title": "Get"
        },
        {
            "location": "/Reference_API_Docs/koma/get/index.html#get",
            "text": "operator fun <T> Matrix <T>.get(i: Int , j: Int ): T  operator fun Matrix < Double >.get(i: Int ): Double  operator fun Matrix < Double >.get(i: Int , j: Int ): Double operator fun <T> Matrix <T>.get(i: Int ): T  Gets the ith element in the matrix. If 2D, selects elements in row-major order.  operator fun <T> Matrix <T>.get(rows: IntRange , cols: IntRange ): Matrix <T>  Allow slicing, e.g.  matrix[1..2, 3..4] . Note that the range 1..2 is inclusive, so\nit will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.  @param rows the set of rows to select\n@param cols the set of columns to select  @return a new matrix containing the submatrix.  operator fun <T> Matrix <T>.get(rows: IntRange , cols: Int ): Matrix <T>  Allows for slicing of the rows and selection of a single column  operator fun <T> Matrix <T>.get(rows: Int , cols: IntRange ): Matrix <T>  Allows for slicing of the cols and selection of a single row",
            "title": "get"
        },
        {
            "location": "/Reference_API_Docs/koma/hstack/index.html",
            "text": "api\n / \nkoma\n / \nhstack\n\n\nhstack\n\n\nfun hstack(vararg arrs:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>",
            "title": "Hstack"
        },
        {
            "location": "/Reference_API_Docs/koma/hstack/index.html#hstack",
            "text": "fun hstack(vararg arrs: Matrix < Double >): Matrix < Double >",
            "title": "hstack"
        },
        {
            "location": "/Reference_API_Docs/koma/index.html",
            "text": "api\n / \nkoma\n\n\nPackage koma\n\n\nA set of toplevel functions which provide a scientific environment similar to NumPy or MATLAB.\n\n\nTypes\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nMatFacProperty\n\n\nclass MatFacProperty<T>\nA property which queries the platform-specific discovery function \navailable\n for a backend, and if none are found there it selects \ndefault\n instead. If this property is ever set by the user then the user's choice overrides all others.\n\n\n\n\n\n\nUInt8\n\n\nclass UInt8\nAn implementation of an unsigned byte. Still a WIP.\n\n\n\n\n\n\nmat\n\n\nobject mat\nA helper object that allows for quick construction of matrix literals.\n\n\n\n\n\n\n\n\nExtensions for External Classes\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nkotlin.Double\n\n\n\n\n\n\n\n\nkotlin.Int\n\n\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nDEPRECATE_IMPLICIT_2D\n\n\nconst val DEPRECATE_IMPLICIT_2D:\nString\n\n\n\n\n\n\nE\n\n\nval E:\nDouble\nThe value of e, such that e pow ln(x) = x\n\n\n\n\n\n\nLONG_NUMBER\n\n\nval LONG_NUMBER:\nString\n\n\n\n\n\n\nPI\n\n\nval PI:\nDouble\nThe value of Pi\n\n\n\n\n\n\nSCIENTIFIC_LONG_NUMBER\n\n\nval SCIENTIFIC_LONG_NUMBER:\nString\n\n\n\n\n\n\nSCIENTIFIC_NUMBER\n\n\nval SCIENTIFIC_NUMBER:\nString\n\n\n\n\n\n\nSCIENTIFIC_VERY_LONG_NUMBER\n\n\nval SCIENTIFIC_VERY_LONG_NUMBER:\nString\n\n\n\n\n\n\nSHORT_NUMBER\n\n\nval SHORT_NUMBER:\nString\n\n\n\n\n\n\nVERY_LONG_NUMBER\n\n\nval VERY_LONG_NUMBER:\nString\n\n\n\n\n\n\nall\n\n\nval all:\nIntRange\n\n\n\n\n\n\nend\n\n\nval end:\nInt\n\n\n\n\n\n\nfactory\n\n\nvar factory:\nMatrixFactory\n<\nMatrix\n<\nDouble\n>>\nDefault factory that all top-level functions use when building new matrices. Double precision.\n\n\n\n\n\n\nfloatFactory\n\n\nvar floatFactory:\nMatrixFactory\n<\nMatrix\n<\nFloat\n>>\nDefault factory that all top-level functions use when building new matrices. Single precision.\n\n\n\n\n\n\nintFactory\n\n\nvar intFactory:\nMatrixFactory\n<\nMatrix\n<\nInt\n>>\nDefault factory that all top-level functions use when building new matrices. Integer matrices.\n\n\n\n\n\n\nvalidateMatrices\n\n\nvar validateMatrices:\nBoolean\nWhether to validate the dimensions, symmetry, and values of input matrices. false is faster, and should be used for realtime applications. true gives you much more useful errors when your matrices are shaped differently than your code expects.\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nabs\n\n\nfun abs(arr:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\nReturns a matrix of the absolute value of each element in the input matrix.\nfun abs(arr:\nDouble\n):\nDouble\nA convenience function performing the abs operation via the \nMath\n equivalent call.\nfun abs(arr:\nInt\n):\nDouble\nA convenience function performing the abs via the \nMath\n equivalent call.\n\n\n\n\n\n\nacos\n\n\nfun acos(arr:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\nReturns a matrix of the arccos of each element in the input matrix.\nfun acos(arr:\nDouble\n):\nDouble\nfun acos(arr:\nInt\n):\nDouble\nA convenience function performing the acos operation via the \nMath\n equivalent call.\n\n\n\n\n\n\narange\n\n\nfun arange(start:\nDouble\n, stop:\nDouble\n, step:\nDouble\n):\nMatrix\n<\nDouble\n>\nCreates an vector filled in by the given range information. The filled values will start at \nstart\n and end at \nstop\n, with the interval between each value \nstep\n.\nfun <T> arange(start:\nDouble\n, stop:\nDouble\n, step:\nDouble\n, dtype:\nMatrixType\n<T>):\nMatrix\n<T>\n\n\n\n\n\n\nargMax\n\n\nfun argMax(arr:\nMatrix\n<\nDouble\n>):\nInt\nReturns the index of the max element in the input matrix\n\n\n\n\n\n\nargMin\n\n\nfun argMin(arr:\nMatrix\n<\nDouble\n>):\nInt\nReturns the index of the min element in the input matrix\n\n\n\n\n\n\nasin\n\n\nfun asin(arr:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\nReturns a matrix of the arcsin of each element in the input matrix.\nfun asin(arr:\nDouble\n):\nDouble\nfun asin(arr:\nInt\n):\nDouble\nA convenience function performing the asin operation via the \nMath\n equivalent call.\n\n\n\n\n\n\natan\n\n\nfun atan(arr:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\nReturns a matrix of the arctan of each element in the input matrix.\nfun atan(arr:\nDouble\n):\nDouble\nfun atan(arr:\nInt\n):\nDouble\nA convenience function performing the atan operation via the \nMath\n equivalent call.\n\n\n\n\n\n\natan2\n\n\nfun atan2(x:\nDouble\n, y:\nDouble\n):\nDouble\nfun atan2(x:\nInt\n, y:\nInt\n):\nDouble\nA convenience function performing the atan2 operation via the \nMath\n equivalent call.\n\n\n\n\n\n\nceil\n\n\nfun ceil(arr:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\nRounds each element to the integer which is nearest to the element and still less than the element (i.e. truncation).\nfun ceil(num:\nDouble\n):\nInt\nA convenience function performing the ceil via the \nMath\n equivalent call.\nfun ceil(num:\nInt\n):\nDouble\nA convenience function performing the ceil operation via the \nMath\n equivalent call.\n\n\n\n\n\n\ncos\n\n\nfun cos(arr:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\nReturns a matrix of the cos of each element in the input matrix.\nfun cos(arr:\nDouble\n):\nDouble\nfun cos(arr:\nInt\n):\nDouble\nA convenience function performing the cos operation via the \nMath\n equivalent call.\n\n\n\n\n\n\ncreate\n\n\nfun create(data:\nIntRange\n):\nMatrix\n<\nDouble\n>\nCreates a matrix filled with the given range of values.\nfun <T> create(data:\nIntRange\n, dtype:\nMatrixType\n<T>):\nMatrix\n<T>\nfun <T> create(data:\nDoubleArray\n, dtype:\nMatrixType\n<T>):\nMatrix\n<T>\nfun <T> create(data:\nDoubleArray\n, numRows:\nInt\n, numCols:\nInt\n, dtype:\nMatrixType\n<T>):\nMatrix\n<T>\nfun <T> create(data:\nArray\n<\nDoubleArray\n>, dtype:\nMatrixType\n<T>):\nMatrix\n<T>``fun create(data:\nDoubleArray\n):\nMatrix\n<\nDouble\n>\nCreates a matrix filled with the given set of values as a row-vector.\nfun create(data:\nDoubleArray\n, numRows:\nInt\n, numCols:\nInt\n):\nMatrix\n<\nDouble\n>\nCreates a matrix filled with the given set of values in row-major order.\nfun create(data:\nArray\n<\nDoubleArray\n>):\nMatrix\n<\nDouble\n>\nCreates a matrix filled with the given data, assuming input is row major.\n\n\n\n\n\n\ncross\n\n\nfun cross(vec1:\nMatrix\n<\nDouble\n>, vec2:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\nCalculates the cross product of two vectors\n\n\n\n\n\n\ncumsum\n\n\nfun cumsum(arr:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\nCalculates the cumulative (ongoing) sum of a matrix's elements. For example, \ncumsum(mat[1,2,3])\n would return \nmat[1,3,6]\n.\n\n\n\n\n\n\ndiag\n\n\nfun diag(arr:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\nExtracts the diagonal of the matrix.\n\n\n\n\n\n\ndot\n\n\nfun dot(vec1:\nMatrix\n<\nDouble\n>, vec2:\nMatrix\n<\nDouble\n>):\nDouble\nCalculates the cross product of two vectors\n\n\n\n\n\n\nemul\n\n\ninfix fun\nMatrix\n<\nDouble\n>.emul(other:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\nAllow infix operator \"a emul b\" to be element-wise multiplication of two matrices.\n\n\n\n\n\n\nepow\n\n\nfun epow(arr:\nMatrix\n<\nDouble\n>, num:\nDouble\n):\nMatrix\n<\nDouble\n>\nReturns a matrix consisting of each element in the input matrix raised to the given power.\n\n\n\n\n\n\nexp\n\n\nfun exp(arr:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\nReturns a matrix of E.pow(element) for each element in the input matrix.\nfun exp(arr:\nDouble\n):\nDouble\nfun exp(arr:\nInt\n):\nDouble\nA convenience function performing the exp operation via the \nMath\n equivalent call.\n\n\n\n\n\n\nexpm\n\n\nfun expm(A:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\nCalculates the matrix exponential of the input matrix. Note that this is NOT the same thing as the elementwise exponential function.\n\n\n\n\n\n\neye\n\n\nfun eye(size:\nInt\n):\nMatrix\n<\nDouble\n>\nCreates a square identity matrix with the given size\nfun <T> eye(size:\nInt\n, dtype:\nMatrixType\n<T>):\nMatrix\n<T>\nfun <T> eye(rows:\nInt\n, cols:\nInt\n, dtype:\nMatrixType\n<T>):\nMatrix\n<T>``fun eye(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nDouble\n>\nCreates an identity matrix with the given size\n\n\n\n\n\n\nfill\n\n\nfun fill(rows:\nInt\n, cols:\nInt\n, func: (\nInt\n,\nInt\n) ->\nDouble\n):\nMatrix\n<\nDouble\n>\nCreates a new matrix that fills all the values with the return values of func(row,val)\nfun <T> fill(rows:\nInt\n, cols:\nInt\n, dtype:\nMatrixType\n<T>, func: (\nInt\n,\nInt\n) -> T):\nMatrix\n<T>\nfun <T> fill(rows:\nInt\n, cols:\nInt\n, value: T, dtype:\nMatrixType\n<T>):\nMatrix\n<T>``fun fill(rows:\nInt\n, cols:\nInt\n, value:\nDouble\n):\nMatrix\n<\nDouble\n>\nCreates a new matrix that fills all the values with \nvalue\n\n\n\n\n\n\nfloor\n\n\nfun floor(arr:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\nRounds each element to the integer which is nearest to the element and still less than the element (i.e. truncation).\nfun floor(arr:\nDouble\n):\nInt\nfun floor(arr:\nInt\n):\nDouble\nA convenience function performing the floor operation via the \nMath\n equivalent call.\n\n\n\n\n\n\nformat\n\n\nfun format(formatStr:\nString\n):\nUnit\nSets the format for Koma to display numbers in. For example, calling\n\n\n\n\n\n\nget\n\n\noperator fun <T>\nMatrix\n<T>.get(i:\nInt\n, j:\nInt\n): T\noperator fun\nMatrix\n<\nDouble\n>.get(i:\nInt\n):\nDouble\noperator fun\nMatrix\n<\nDouble\n>.get(i:\nInt\n, j:\nInt\n):\nDouble\noperator fun <T>\nMatrix\n<T>.get(i:\nInt\n): T\nGets the ith element in the matrix. If 2D, selects elements in row-major order.\noperator fun <T>\nMatrix\n<T>.get(rows:\nIntRange\n, cols:\nIntRange\n):\nMatrix\n<T>\nAllow slicing, e.g. \nmatrix[1..2, 3..4]\n. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.\noperator fun <T>\nMatrix\n<T>.get(rows:\nIntRange\n, cols:\nInt\n):\nMatrix\n<T>\nAllows for slicing of the rows and selection of a single column\noperator fun <T>\nMatrix\n<T>.get(rows:\nInt\n, cols:\nIntRange\n):\nMatrix\n<T>\nAllows for slicing of the cols and selection of a single row\n\n\n\n\n\n\ngetPlatformDoubleFactories\n\n\nfun getPlatformDoubleFactories():\nList\n<\nMatrixFactory\n<\nMatrix\n<\nDouble\n>>>\nAt runtime, see which double backends are available on our classpath (if any).\n\n\n\n\n\n\ngetPlatformFloatFactories\n\n\nfun getPlatformFloatFactories():\nList\n<\nMatrixFactory\n<\nMatrix\n<\nFloat\n>>>\nAt runtime, see which float backends are available on our classpath (if any).\n\n\n\n\n\n\ngetPlatformIntFactories\n\n\nfun getPlatformIntFactories():\nList\n<\nMatrixFactory\n<\nMatrix\n<\nInt\n>>>\nAt runtime, see which int backends are available on our classpath (if any).\n\n\n\n\n\n\nhstack\n\n\nfun hstack(vararg arrs:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\n\n\n\n\n\n\nlog\n\n\nfun log(arr:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\nReturns a matrix of the natural logarithm of each element in the input matrix.\nfun log(arr:\nDouble\n):\nDouble\nfun log(arr:\nInt\n):\nDouble\nA convenience function performing the log operation via the \nMath\n equivalent call.\n\n\n\n\n\n\nlogb\n\n\nfun logb(base:\nInt\n, arr:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\nReturns a matrix of the log-base-b of each element in the input matrix\nfun logb(base:\nDouble\n, num:\nDouble\n):\nDouble\nfun logb(base:\nInt\n, num:\nInt\n):\nDouble\nfun logb(base:\nInt\n, num:\nDouble\n):\nDouble\nfun logb(base:\nDouble\n, num:\nInt\n):\nDouble\nA convenience function performing the logb operation via the \nMath\n equivalent call.\n\n\n\n\n\n\nmax\n\n\nfun max(arr:\nMatrix\n<\nDouble\n>):\nDouble\nReturns the max element in the input matrix\nfun max(num1:\nDouble\n, num2:\nDouble\n):\nDouble\nfun max(num1:\nInt\n, num2:\nInt\n):\nInt\nfun max(num1:\nDouble\n, num2:\nInt\n):\nDouble\nfun max(num1:\nInt\n, num2:\nDouble\n):\nDouble\nA convenience function performing the max operation via the \nMath\n equivalent call.\n\n\n\n\n\n\nmean\n\n\nfun mean(arr:\nMatrix\n<\nDouble\n>):\nDouble\nReturns the mean element in the input matrix\n\n\n\n\n\n\nmin\n\n\nfun min(arr:\nMatrix\n<\nDouble\n>):\nDouble\nReturns the min element in the input matrix\nfun min(num1:\nDouble\n, num2:\nDouble\n):\nDouble\nfun min(num1:\nInt\n, num2:\nInt\n):\nInt\nfun min(num1:\nInt\n, num2:\nDouble\n):\nDouble\nfun min(num1:\nDouble\n, num2:\nInt\n):\nDouble\nA convenience function performing the min operation via the \nMath\n equivalent call.\n\n\n\n\n\n\nminus\n\n\noperator fun\nMatrix\n<\nDouble\n>.minus(value:\nInt\n):\nMatrix\n<\nDouble\n>\nAllow operator overloading with non-Double scalars\n\n\n\n\n\n\nnorm\n\n\nfun norm(arr:\nMatrix\n<\nDouble\n>):\nDouble\nReturns the L2 norm of the input vector for vectors.\n\n\n\n\n\n\nones\n\n\nfun ~~ones~~(size:\nInt\n):\nMatrix\n<\nDouble\n>\nCreates a one-filled square matrix with the given size\nfun <T> ones(size:\nInt\n, dtype:\nMatrixType\n<T>):\nMatrix\n<T>\nfun <T> ones(rows:\nInt\n, columns:\nInt\n, dtype:\nMatrixType\n<T>):\nMatrix\n<T>``fun ones(rows:\nInt\n, columns:\nInt\n):\nMatrix\n<\nDouble\n>\nCreates a one-filled matrix with the given size\n\n\n\n\n\n\nplus\n\n\noperator fun\nMatrix\n<\nDouble\n>.plus(value:\nInt\n):\nMatrix\n<\nDouble\n>\nAllow operator overloading with non-Double scalars\n\n\n\n\n\n\npow\n\n\nfun pow(arr:\nMatrix\n<\nDouble\n>, num:\nInt\n):\nMatrix\n<\nDouble\n>\nReturns a matrix which is the input matrix multiplied by itself num times (NOT elementwise multiplication!!). For elementwise see \nepow\n.\nfun pow(num:\nDouble\n, exp:\nDouble\n):\nDouble\nfun pow(num:\nDouble\n, exp:\nInt\n):\nDouble\nfun pow(num:\nInt\n, exp:\nInt\n):\nDouble\nfun pow(num:\nInt\n, exp:\nDouble\n):\nDouble\nA convenience function performing the pow operation via the \nMath\n equivalent call.\n\n\n\n\n\n\nrand\n\n\nfun ~~rand~~(cols:\nInt\n):\nMatrix\n<\nDouble\n>\nCreates an 1x\ncols\n matrix filled with unit uniform random numbers\nfun <T> rand(cols:\nInt\n, dtype:\nMatrixType\n<T>):\nMatrix\n<T>\nfun <T> rand(rows:\nInt\n, cols:\nInt\n, dtype:\nMatrixType\n<T>):\nMatrix\n<T>\nfun <T> rand(rows:\nInt\n, cols:\nInt\n, seed:\nLong\n, dtype:\nMatrixType\n<T>):\nMatrix\n<T>``fun rand(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nDouble\n>\nCreates an matrix filled with unit uniform random numbers\nfun rand(rows:\nInt\n, cols:\nInt\n, seed:\nLong\n):\nMatrix\n<\nDouble\n>\nCreates an matrix filled with unit normal random numbers, using the given seed for the RNG. Subsequent calls with the same seed will produce identical numbers.\n\n\n\n\n\n\nrandn\n\n\nfun ~~randn~~(cols:\nInt\n):\nMatrix\n<\nDouble\n>\nCreates an 1x\ncols\n matrix filled with unit normal random numbers\nfun <T> randn(cols:\nInt\n, dtype:\nMatrixType\n<T>):\nMatrix\n<T>\nfun <T> randn(rows:\nInt\n, cols:\nInt\n, dtype:\nMatrixType\n<T>):\nMatrix\n<T>\nfun <T> randn(rows:\nInt\n, cols:\nInt\n, seed:\nLong\n, dtype:\nMatrixType\n<T>):\nMatrix\n<T>``fun randn(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nDouble\n>\nCreates an matrix filled with unit normal random numbers\nfun randn(rows:\nInt\n, cols:\nInt\n, seed:\nLong\n):\nMatrix\n<\nDouble\n>\nCreates an matrix filled with unit normal random numbers, using the given seed for the RNG. Subsequent calls with the same seed will produce identical numbers.\n\n\n\n\n\n\nround\n\n\nfun round(arr:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\nRounds each element to the nearest integer value. For elements exactly between integers, choose the highest value.\nfun round(arr:\nDouble\n):\nLong\nfun round(arr:\nInt\n):\nLong\nA convenience function performing the round operation via the \nMath\n equivalent call.\n\n\n\n\n\n\nset\n\n\noperator fun <T>\nMatrix\n<T>.set(i:\nInt\n, v: T):\nUnit\nSet the ith element in the matrix. If 2D, selects elements in row-major order.\noperator fun <T>\nMatrix\n<T>.set(i:\nInt\n, j:\nInt\n, v: T):\nUnit\noperator fun <T>\nMatrix\n<T>.set(rows:\nIntRange\n, cols:\nIntRange\n, value: T):\nUnit\noperator fun <T>\nMatrix\n<T>.set(rows:\nInt\n, cols:\nIntRange\n, value: T):\nUnit\noperator fun <T>\nMatrix\n<T>.set(rows:\nIntRange\n, cols:\nInt\n, value: T):\nUnit\noperator fun\nMatrix\n<\nDouble\n>.set(i:\nInt\n, v:\nDouble\n):\nUnit\noperator fun\nMatrix\n<\nDouble\n>.set(i:\nInt\n, j:\nInt\n, v:\nDouble\n):\nUnit\noperator fun\nMatrix\n<\nDouble\n>.set(i:\nInt\n, v:\nInt\n):\nUnit\noperator fun\nMatrix\n<\nDouble\n>.set(i:\nInt\n, j:\nInt\n, v:\nInt\n):\nUnit\noperator fun <T>\nMatrix\n<T>.set(rows:\nIntRange\n, cols:\nIntRange\n, value:\nMatrix\n<T>):\nUnit\nAllow assignment to a slice, e.g. \nmatrix[1..2, 3..4]\n=something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.\noperator fun <T>\nMatrix\n<T>.set(rows:\nInt\n, cols:\nIntRange\n, value:\nMatrix\n<T>):\nUnit\nAllow assignment to a slice, e.g. \nmatrix[2, 3..4]\n=something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range.\noperator fun <T>\nMatrix\n<T>.set(rows:\nIntRange\n, cols:\nInt\n, value:\nMatrix\n<T>):\nUnit\nAllow assignment to a slice, e.g. \nmatrix[1..2, 3]\n=something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.\n\n\n\n\n\n\nsign\n\n\nfun sign(arr:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\nCalculates a matrix consisting of the sign of each element in the input matrix. Returns -1 for positive values, -1 for negative values, 0 for 0.\nfun sign(arr:\nDouble\n): <ERROR CLASS>\nfun sign(arr:\nInt\n): <ERROR CLASS>\nA convenience function performing the sign operation via the \nMath\n equivalent call.\n\n\n\n\n\n\nsin\n\n\nfun sin(arr:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\nReturns a matrix of the sin of each element in the input matrix\nfun sin(arr:\nDouble\n):\nDouble\nfun sin(arr:\nInt\n):\nDouble\nA convenience function performing the sin operation via the \nMath\n equivalent call.\n\n\n\n\n\n\nskew\n\n\nfun skew(angles:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\nConverts a 3x1 or 1x3 vector of angles into the skew symmetric matrix equivalent.\n\n\n\n\n\n\nsqrt\n\n\nfun sqrt(arr:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\nReturns a matrix of the sqrt of each element in the input matrix. Does not yet support complex numbers.\nfun sqrt(arr:\nDouble\n):\nDouble\nfun sqrt(arr:\nInt\n):\nDouble\nA convenience function performing the sqrt operation via the \nMath\n equivalent call.\n\n\n\n\n\n\ntan\n\n\nfun tan(arr:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\nReturns a matrix of the tan of each element in the input matrix\nfun tan(arr:\nDouble\n):\nDouble\nfun tan(arr:\nInt\n):\nDouble\nA convenience function performing the tan operation via the \nMath\n equivalent call.\n\n\n\n\n\n\ntimes\n\n\noperator fun\nMatrix\n<\nDouble\n>.times(other:\nInt\n):\nMatrix\n<\nDouble\n>\nMultiply a scalar by a matrix\n\n\n\n\n\n\nvstack\n\n\nfun vstack(vararg arrs:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\n\n\n\n\n\n\nzeros\n\n\nfun zeros(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nDouble\n>\nCreates a zero-filled matrix with the given size\nfun <T> zeros(rows:\nInt\n, cols:\nInt\n, dtype:\nMatrixType\n<T>):\nMatrix\n<T>\nfun <T> zeros(size:\nInt\n, dtype:\nMatrixType\n<T>):\nMatrix\n<T>``fun ~~zeros~~(size:\nInt\n):\nMatrix\n<\nDouble\n>\nCreates a square zero-filled matrix with the given size",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma/index.html#package-koma",
            "text": "A set of toplevel functions which provide a scientific environment similar to NumPy or MATLAB.",
            "title": "Package koma"
        },
        {
            "location": "/Reference_API_Docs/koma/index.html#types",
            "text": "Name  Summary      MatFacProperty  class MatFacProperty<T> A property which queries the platform-specific discovery function  available  for a backend, and if none are found there it selects  default  instead. If this property is ever set by the user then the user's choice overrides all others.    UInt8  class UInt8 An implementation of an unsigned byte. Still a WIP.    mat  object mat A helper object that allows for quick construction of matrix literals.",
            "title": "Types"
        },
        {
            "location": "/Reference_API_Docs/koma/index.html#extensions-for-external-classes",
            "text": "Name  Summary      kotlin.Double     kotlin.Int",
            "title": "Extensions for External Classes"
        },
        {
            "location": "/Reference_API_Docs/koma/index.html#properties",
            "text": "Name  Summary      DEPRECATE_IMPLICIT_2D  const val DEPRECATE_IMPLICIT_2D: String    E  val E: Double The value of e, such that e pow ln(x) = x    LONG_NUMBER  val LONG_NUMBER: String    PI  val PI: Double The value of Pi    SCIENTIFIC_LONG_NUMBER  val SCIENTIFIC_LONG_NUMBER: String    SCIENTIFIC_NUMBER  val SCIENTIFIC_NUMBER: String    SCIENTIFIC_VERY_LONG_NUMBER  val SCIENTIFIC_VERY_LONG_NUMBER: String    SHORT_NUMBER  val SHORT_NUMBER: String    VERY_LONG_NUMBER  val VERY_LONG_NUMBER: String    all  val all: IntRange    end  val end: Int    factory  var factory: MatrixFactory < Matrix < Double >> Default factory that all top-level functions use when building new matrices. Double precision.    floatFactory  var floatFactory: MatrixFactory < Matrix < Float >> Default factory that all top-level functions use when building new matrices. Single precision.    intFactory  var intFactory: MatrixFactory < Matrix < Int >> Default factory that all top-level functions use when building new matrices. Integer matrices.    validateMatrices  var validateMatrices: Boolean Whether to validate the dimensions, symmetry, and values of input matrices. false is faster, and should be used for realtime applications. true gives you much more useful errors when your matrices are shaped differently than your code expects.",
            "title": "Properties"
        },
        {
            "location": "/Reference_API_Docs/koma/index.html#functions",
            "text": "Name  Summary      abs  fun abs(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the absolute value of each element in the input matrix. fun abs(arr: Double ): Double A convenience function performing the abs operation via the  Math  equivalent call. fun abs(arr: Int ): Double A convenience function performing the abs via the  Math  equivalent call.    acos  fun acos(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the arccos of each element in the input matrix. fun acos(arr: Double ): Double fun acos(arr: Int ): Double A convenience function performing the acos operation via the  Math  equivalent call.    arange  fun arange(start: Double , stop: Double , step: Double ): Matrix < Double > Creates an vector filled in by the given range information. The filled values will start at  start  and end at  stop , with the interval between each value  step . fun <T> arange(start: Double , stop: Double , step: Double , dtype: MatrixType <T>): Matrix <T>    argMax  fun argMax(arr: Matrix < Double >): Int Returns the index of the max element in the input matrix    argMin  fun argMin(arr: Matrix < Double >): Int Returns the index of the min element in the input matrix    asin  fun asin(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the arcsin of each element in the input matrix. fun asin(arr: Double ): Double fun asin(arr: Int ): Double A convenience function performing the asin operation via the  Math  equivalent call.    atan  fun atan(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the arctan of each element in the input matrix. fun atan(arr: Double ): Double fun atan(arr: Int ): Double A convenience function performing the atan operation via the  Math  equivalent call.    atan2  fun atan2(x: Double , y: Double ): Double fun atan2(x: Int , y: Int ): Double A convenience function performing the atan2 operation via the  Math  equivalent call.    ceil  fun ceil(arr: Matrix < Double >): Matrix < Double > Rounds each element to the integer which is nearest to the element and still less than the element (i.e. truncation). fun ceil(num: Double ): Int A convenience function performing the ceil via the  Math  equivalent call. fun ceil(num: Int ): Double A convenience function performing the ceil operation via the  Math  equivalent call.    cos  fun cos(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the cos of each element in the input matrix. fun cos(arr: Double ): Double fun cos(arr: Int ): Double A convenience function performing the cos operation via the  Math  equivalent call.    create  fun create(data: IntRange ): Matrix < Double > Creates a matrix filled with the given range of values. fun <T> create(data: IntRange , dtype: MatrixType <T>): Matrix <T> fun <T> create(data: DoubleArray , dtype: MatrixType <T>): Matrix <T> fun <T> create(data: DoubleArray , numRows: Int , numCols: Int , dtype: MatrixType <T>): Matrix <T> fun <T> create(data: Array < DoubleArray >, dtype: MatrixType <T>): Matrix <T>``fun create(data: DoubleArray ): Matrix < Double > Creates a matrix filled with the given set of values as a row-vector. fun create(data: DoubleArray , numRows: Int , numCols: Int ): Matrix < Double > Creates a matrix filled with the given set of values in row-major order. fun create(data: Array < DoubleArray >): Matrix < Double > Creates a matrix filled with the given data, assuming input is row major.    cross  fun cross(vec1: Matrix < Double >, vec2: Matrix < Double >): Matrix < Double > Calculates the cross product of two vectors    cumsum  fun cumsum(arr: Matrix < Double >): Matrix < Double > Calculates the cumulative (ongoing) sum of a matrix's elements. For example,  cumsum(mat[1,2,3])  would return  mat[1,3,6] .    diag  fun diag(arr: Matrix < Double >): Matrix < Double > Extracts the diagonal of the matrix.    dot  fun dot(vec1: Matrix < Double >, vec2: Matrix < Double >): Double Calculates the cross product of two vectors    emul  infix fun Matrix < Double >.emul(other: Matrix < Double >): Matrix < Double > Allow infix operator \"a emul b\" to be element-wise multiplication of two matrices.    epow  fun epow(arr: Matrix < Double >, num: Double ): Matrix < Double > Returns a matrix consisting of each element in the input matrix raised to the given power.    exp  fun exp(arr: Matrix < Double >): Matrix < Double > Returns a matrix of E.pow(element) for each element in the input matrix. fun exp(arr: Double ): Double fun exp(arr: Int ): Double A convenience function performing the exp operation via the  Math  equivalent call.    expm  fun expm(A: Matrix < Double >): Matrix < Double > Calculates the matrix exponential of the input matrix. Note that this is NOT the same thing as the elementwise exponential function.    eye  fun eye(size: Int ): Matrix < Double > Creates a square identity matrix with the given size fun <T> eye(size: Int , dtype: MatrixType <T>): Matrix <T> fun <T> eye(rows: Int , cols: Int , dtype: MatrixType <T>): Matrix <T>``fun eye(rows: Int , cols: Int ): Matrix < Double > Creates an identity matrix with the given size    fill  fun fill(rows: Int , cols: Int , func: ( Int , Int ) -> Double ): Matrix < Double > Creates a new matrix that fills all the values with the return values of func(row,val) fun <T> fill(rows: Int , cols: Int , dtype: MatrixType <T>, func: ( Int , Int ) -> T): Matrix <T> fun <T> fill(rows: Int , cols: Int , value: T, dtype: MatrixType <T>): Matrix <T>``fun fill(rows: Int , cols: Int , value: Double ): Matrix < Double > Creates a new matrix that fills all the values with  value    floor  fun floor(arr: Matrix < Double >): Matrix < Double > Rounds each element to the integer which is nearest to the element and still less than the element (i.e. truncation). fun floor(arr: Double ): Int fun floor(arr: Int ): Double A convenience function performing the floor operation via the  Math  equivalent call.    format  fun format(formatStr: String ): Unit Sets the format for Koma to display numbers in. For example, calling    get  operator fun <T> Matrix <T>.get(i: Int , j: Int ): T operator fun Matrix < Double >.get(i: Int ): Double operator fun Matrix < Double >.get(i: Int , j: Int ): Double operator fun <T> Matrix <T>.get(i: Int ): T Gets the ith element in the matrix. If 2D, selects elements in row-major order. operator fun <T> Matrix <T>.get(rows: IntRange , cols: IntRange ): Matrix <T> Allow slicing, e.g.  matrix[1..2, 3..4] . Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun <T> Matrix <T>.get(rows: IntRange , cols: Int ): Matrix <T> Allows for slicing of the rows and selection of a single column operator fun <T> Matrix <T>.get(rows: Int , cols: IntRange ): Matrix <T> Allows for slicing of the cols and selection of a single row    getPlatformDoubleFactories  fun getPlatformDoubleFactories(): List < MatrixFactory < Matrix < Double >>> At runtime, see which double backends are available on our classpath (if any).    getPlatformFloatFactories  fun getPlatformFloatFactories(): List < MatrixFactory < Matrix < Float >>> At runtime, see which float backends are available on our classpath (if any).    getPlatformIntFactories  fun getPlatformIntFactories(): List < MatrixFactory < Matrix < Int >>> At runtime, see which int backends are available on our classpath (if any).    hstack  fun hstack(vararg arrs: Matrix < Double >): Matrix < Double >    log  fun log(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the natural logarithm of each element in the input matrix. fun log(arr: Double ): Double fun log(arr: Int ): Double A convenience function performing the log operation via the  Math  equivalent call.    logb  fun logb(base: Int , arr: Matrix < Double >): Matrix < Double > Returns a matrix of the log-base-b of each element in the input matrix fun logb(base: Double , num: Double ): Double fun logb(base: Int , num: Int ): Double fun logb(base: Int , num: Double ): Double fun logb(base: Double , num: Int ): Double A convenience function performing the logb operation via the  Math  equivalent call.    max  fun max(arr: Matrix < Double >): Double Returns the max element in the input matrix fun max(num1: Double , num2: Double ): Double fun max(num1: Int , num2: Int ): Int fun max(num1: Double , num2: Int ): Double fun max(num1: Int , num2: Double ): Double A convenience function performing the max operation via the  Math  equivalent call.    mean  fun mean(arr: Matrix < Double >): Double Returns the mean element in the input matrix    min  fun min(arr: Matrix < Double >): Double Returns the min element in the input matrix fun min(num1: Double , num2: Double ): Double fun min(num1: Int , num2: Int ): Int fun min(num1: Int , num2: Double ): Double fun min(num1: Double , num2: Int ): Double A convenience function performing the min operation via the  Math  equivalent call.    minus  operator fun Matrix < Double >.minus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars    norm  fun norm(arr: Matrix < Double >): Double Returns the L2 norm of the input vector for vectors.    ones  fun ~~ones~~(size: Int ): Matrix < Double > Creates a one-filled square matrix with the given size fun <T> ones(size: Int , dtype: MatrixType <T>): Matrix <T> fun <T> ones(rows: Int , columns: Int , dtype: MatrixType <T>): Matrix <T>``fun ones(rows: Int , columns: Int ): Matrix < Double > Creates a one-filled matrix with the given size    plus  operator fun Matrix < Double >.plus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars    pow  fun pow(arr: Matrix < Double >, num: Int ): Matrix < Double > Returns a matrix which is the input matrix multiplied by itself num times (NOT elementwise multiplication!!). For elementwise see  epow . fun pow(num: Double , exp: Double ): Double fun pow(num: Double , exp: Int ): Double fun pow(num: Int , exp: Int ): Double fun pow(num: Int , exp: Double ): Double A convenience function performing the pow operation via the  Math  equivalent call.    rand  fun ~~rand~~(cols: Int ): Matrix < Double > Creates an 1x cols  matrix filled with unit uniform random numbers fun <T> rand(cols: Int , dtype: MatrixType <T>): Matrix <T> fun <T> rand(rows: Int , cols: Int , dtype: MatrixType <T>): Matrix <T> fun <T> rand(rows: Int , cols: Int , seed: Long , dtype: MatrixType <T>): Matrix <T>``fun rand(rows: Int , cols: Int ): Matrix < Double > Creates an matrix filled with unit uniform random numbers fun rand(rows: Int , cols: Int , seed: Long ): Matrix < Double > Creates an matrix filled with unit normal random numbers, using the given seed for the RNG. Subsequent calls with the same seed will produce identical numbers.    randn  fun ~~randn~~(cols: Int ): Matrix < Double > Creates an 1x cols  matrix filled with unit normal random numbers fun <T> randn(cols: Int , dtype: MatrixType <T>): Matrix <T> fun <T> randn(rows: Int , cols: Int , dtype: MatrixType <T>): Matrix <T> fun <T> randn(rows: Int , cols: Int , seed: Long , dtype: MatrixType <T>): Matrix <T>``fun randn(rows: Int , cols: Int ): Matrix < Double > Creates an matrix filled with unit normal random numbers fun randn(rows: Int , cols: Int , seed: Long ): Matrix < Double > Creates an matrix filled with unit normal random numbers, using the given seed for the RNG. Subsequent calls with the same seed will produce identical numbers.    round  fun round(arr: Matrix < Double >): Matrix < Double > Rounds each element to the nearest integer value. For elements exactly between integers, choose the highest value. fun round(arr: Double ): Long fun round(arr: Int ): Long A convenience function performing the round operation via the  Math  equivalent call.    set  operator fun <T> Matrix <T>.set(i: Int , v: T): Unit Set the ith element in the matrix. If 2D, selects elements in row-major order. operator fun <T> Matrix <T>.set(i: Int , j: Int , v: T): Unit operator fun <T> Matrix <T>.set(rows: IntRange , cols: IntRange , value: T): Unit operator fun <T> Matrix <T>.set(rows: Int , cols: IntRange , value: T): Unit operator fun <T> Matrix <T>.set(rows: IntRange , cols: Int , value: T): Unit operator fun Matrix < Double >.set(i: Int , v: Double ): Unit operator fun Matrix < Double >.set(i: Int , j: Int , v: Double ): Unit operator fun Matrix < Double >.set(i: Int , v: Int ): Unit operator fun Matrix < Double >.set(i: Int , j: Int , v: Int ): Unit operator fun <T> Matrix <T>.set(rows: IntRange , cols: IntRange , value: Matrix <T>): Unit Allow assignment to a slice, e.g.  matrix[1..2, 3..4] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun <T> Matrix <T>.set(rows: Int , cols: IntRange , value: Matrix <T>): Unit Allow assignment to a slice, e.g.  matrix[2, 3..4] =something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range. operator fun <T> Matrix <T>.set(rows: IntRange , cols: Int , value: Matrix <T>): Unit Allow assignment to a slice, e.g.  matrix[1..2, 3] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.    sign  fun sign(arr: Matrix < Double >): Matrix < Double > Calculates a matrix consisting of the sign of each element in the input matrix. Returns -1 for positive values, -1 for negative values, 0 for 0. fun sign(arr: Double ): <ERROR CLASS> fun sign(arr: Int ): <ERROR CLASS> A convenience function performing the sign operation via the  Math  equivalent call.    sin  fun sin(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the sin of each element in the input matrix fun sin(arr: Double ): Double fun sin(arr: Int ): Double A convenience function performing the sin operation via the  Math  equivalent call.    skew  fun skew(angles: Matrix < Double >): Matrix < Double > Converts a 3x1 or 1x3 vector of angles into the skew symmetric matrix equivalent.    sqrt  fun sqrt(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the sqrt of each element in the input matrix. Does not yet support complex numbers. fun sqrt(arr: Double ): Double fun sqrt(arr: Int ): Double A convenience function performing the sqrt operation via the  Math  equivalent call.    tan  fun tan(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the tan of each element in the input matrix fun tan(arr: Double ): Double fun tan(arr: Int ): Double A convenience function performing the tan operation via the  Math  equivalent call.    times  operator fun Matrix < Double >.times(other: Int ): Matrix < Double > Multiply a scalar by a matrix    vstack  fun vstack(vararg arrs: Matrix < Double >): Matrix < Double >    zeros  fun zeros(rows: Int , cols: Int ): Matrix < Double > Creates a zero-filled matrix with the given size fun <T> zeros(rows: Int , cols: Int , dtype: MatrixType <T>): Matrix <T> fun <T> zeros(size: Int , dtype: MatrixType <T>): Matrix <T>``fun ~~zeros~~(size: Int ): Matrix < Double > Creates a square zero-filled matrix with the given size",
            "title": "Functions"
        },
        {
            "location": "/Reference_API_Docs/koma/int-factory/index.html",
            "text": "api\n / \nkoma\n / \nintFactory\n\n\nintFactory\n\n\nvar intFactory:\nMatrixFactory\n<\nMatrix\n<\nInt\n>>\n\n\nDefault factory that all top-level functions use when building new matrices.\nInteger matrices.\n\n\nReplace this factory at runtime with another to change what\nbackend the top-level functions use for computation.\n\n\nGetter\n\n\nDefault factory that all top-level functions use when building new matrices.\nInteger matrices.\n\n\nReplace this factory at runtime with another to change what\nbackend the top-level functions use for computation.\n\n\nSetter\n\n\nDefault factory that all top-level functions use when building new matrices.\nInteger matrices.\n\n\nReplace this factory at runtime with another to change what\nbackend the top-level functions use for computation.",
            "title": "Int factory"
        },
        {
            "location": "/Reference_API_Docs/koma/int-factory/index.html#intfactory",
            "text": "var intFactory: MatrixFactory < Matrix < Int >>  Default factory that all top-level functions use when building new matrices.\nInteger matrices.  Replace this factory at runtime with another to change what\nbackend the top-level functions use for computation.  Getter  Default factory that all top-level functions use when building new matrices.\nInteger matrices.  Replace this factory at runtime with another to change what\nbackend the top-level functions use for computation.  Setter  Default factory that all top-level functions use when building new matrices.\nInteger matrices.  Replace this factory at runtime with another to change what\nbackend the top-level functions use for computation.",
            "title": "intFactory"
        },
        {
            "location": "/Reference_API_Docs/koma/log/index.html",
            "text": "api\n / \nkoma\n / \nlog\n\n\nlog\n\n\nfun log(arr:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\n\n\nReturns a matrix of the natural logarithm of each element in the input matrix.\n\n\nParameters\n\n\narr\n - An arbitrarily sized matrix\n\n\nReturn\n\nA matrix consisting of the operation performed element-wise.\n\n\nfun log(arr:\nDouble\n):\nDouble\n\n\nfun log(arr:\nInt\n):\nDouble\n\n\nA convenience function performing the log operation via the \nMath\n equivalent call.",
            "title": "Log"
        },
        {
            "location": "/Reference_API_Docs/koma/log/index.html#log",
            "text": "fun log(arr: Matrix < Double >): Matrix < Double >  Returns a matrix of the natural logarithm of each element in the input matrix.",
            "title": "log"
        },
        {
            "location": "/Reference_API_Docs/koma/log/index.html#parameters",
            "text": "arr  - An arbitrarily sized matrix  Return \nA matrix consisting of the operation performed element-wise.  fun log(arr: Double ): Double  fun log(arr: Int ): Double  A convenience function performing the log operation via the  Math  equivalent call.",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma/logb/index.html",
            "text": "api\n / \nkoma\n / \nlogb\n\n\nlogb\n\n\nfun logb(base:\nInt\n, arr:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\n\n\nReturns a matrix of the log-base-b of each element in the input matrix\n\n\nParameters\n\n\narr\n - An arbitrarily sized matrix\n\n\nbase\n - the base of the log (i.e. performs log-base-\nbase\n)/base) of \narr\n)/arr)\n\n\nReturn\n\nA matrix consisting of the operation performed element-wise.\n\n\nfun logb(base:\nDouble\n, num:\nDouble\n):\nDouble\n\n\nfun logb(base:\nInt\n, num:\nInt\n):\nDouble\n\n\nfun logb(base:\nInt\n, num:\nDouble\n):\nDouble\n\n\nfun logb(base:\nDouble\n, num:\nInt\n):\nDouble\n\n\nA convenience function performing the logb operation via the \nMath\n equivalent call.",
            "title": "Logb"
        },
        {
            "location": "/Reference_API_Docs/koma/logb/index.html#logb",
            "text": "fun logb(base: Int , arr: Matrix < Double >): Matrix < Double >  Returns a matrix of the log-base-b of each element in the input matrix",
            "title": "logb"
        },
        {
            "location": "/Reference_API_Docs/koma/logb/index.html#parameters",
            "text": "arr  - An arbitrarily sized matrix  base  - the base of the log (i.e. performs log-base- base )/base) of  arr )/arr)  Return \nA matrix consisting of the operation performed element-wise.  fun logb(base: Double , num: Double ): Double  fun logb(base: Int , num: Int ): Double  fun logb(base: Int , num: Double ): Double  fun logb(base: Double , num: Int ): Double  A convenience function performing the logb operation via the  Math  equivalent call.",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma/max/index.html",
            "text": "api\n / \nkoma\n / \nmax\n\n\nmax\n\n\nfun max(arr:\nMatrix\n<\nDouble\n>):\nDouble\n\n\nReturns the max element in the input matrix\n\n\nParameters\n\n\narr\n - An arbitrarily sized matrix\n\n\nReturn\n\nThe maximum value\n\n\nfun max(num1:\nDouble\n, num2:\nDouble\n):\nDouble\n\n\nfun max(num1:\nInt\n, num2:\nInt\n):\nInt\n\n\nfun max(num1:\nDouble\n, num2:\nInt\n):\nDouble\n\n\nfun max(num1:\nInt\n, num2:\nDouble\n):\nDouble\n\n\nA convenience function performing the max operation via the \nMath\n equivalent call.",
            "title": "Max"
        },
        {
            "location": "/Reference_API_Docs/koma/max/index.html#max",
            "text": "fun max(arr: Matrix < Double >): Double  Returns the max element in the input matrix",
            "title": "max"
        },
        {
            "location": "/Reference_API_Docs/koma/max/index.html#parameters",
            "text": "arr  - An arbitrarily sized matrix  Return \nThe maximum value  fun max(num1: Double , num2: Double ): Double  fun max(num1: Int , num2: Int ): Int  fun max(num1: Double , num2: Int ): Double  fun max(num1: Int , num2: Double ): Double  A convenience function performing the max operation via the  Math  equivalent call.",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma/mean/index.html",
            "text": "api\n / \nkoma\n / \nmean\n\n\nmean\n\n\nfun mean(arr:\nMatrix\n<\nDouble\n>):\nDouble\n\n\nReturns the mean element in the input matrix\n\n\nParameters\n\n\narr\n - An arbitrarily sized matrix\n\n\nReturn\n\nThe maximum value",
            "title": "Mean"
        },
        {
            "location": "/Reference_API_Docs/koma/mean/index.html#mean",
            "text": "fun mean(arr: Matrix < Double >): Double  Returns the mean element in the input matrix",
            "title": "mean"
        },
        {
            "location": "/Reference_API_Docs/koma/mean/index.html#parameters",
            "text": "arr  - An arbitrarily sized matrix  Return \nThe maximum value",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma/min/index.html",
            "text": "api\n / \nkoma\n / \nmin\n\n\nmin\n\n\nfun min(arr:\nMatrix\n<\nDouble\n>):\nDouble\n\n\nReturns the min element in the input matrix\n\n\nParameters\n\n\narr\n - An arbitrarily sized matrix\n\n\nReturn\n\nThe maximum value\n\n\nfun min(num1:\nDouble\n, num2:\nDouble\n):\nDouble\n\n\nfun min(num1:\nInt\n, num2:\nInt\n):\nInt\n\n\nfun min(num1:\nInt\n, num2:\nDouble\n):\nDouble\n\n\nfun min(num1:\nDouble\n, num2:\nInt\n):\nDouble\n\n\nA convenience function performing the min operation via the \nMath\n equivalent call.",
            "title": "Min"
        },
        {
            "location": "/Reference_API_Docs/koma/min/index.html#min",
            "text": "fun min(arr: Matrix < Double >): Double  Returns the min element in the input matrix",
            "title": "min"
        },
        {
            "location": "/Reference_API_Docs/koma/min/index.html#parameters",
            "text": "arr  - An arbitrarily sized matrix  Return \nThe maximum value  fun min(num1: Double , num2: Double ): Double  fun min(num1: Int , num2: Int ): Int  fun min(num1: Int , num2: Double ): Double  fun min(num1: Double , num2: Int ): Double  A convenience function performing the min operation via the  Math  equivalent call.",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma/minus/index.html",
            "text": "api\n / \nkoma\n / \nminus\n\n\nminus\n\n\noperator fun\nMatrix\n<\nDouble\n>.minus(value:\nInt\n):\nMatrix\n<\nDouble\n>\n\n\nAllow operator overloading with non-Double scalars",
            "title": "Minus"
        },
        {
            "location": "/Reference_API_Docs/koma/minus/index.html#minus",
            "text": "operator fun Matrix < Double >.minus(value: Int ): Matrix < Double >  Allow operator overloading with non-Double scalars",
            "title": "minus"
        },
        {
            "location": "/Reference_API_Docs/koma/norm/index.html",
            "text": "api\n / \nkoma\n / \nnorm\n\n\nnorm\n\n\nfun norm(arr:\nMatrix\n<\nDouble\n>):\nDouble\n\n\nReturns the L2 norm of the input vector for vectors.\n\n\nTODO: Generalize this to matrices\n\n\nParameters\n\n\narr\n - A Nx1 or 1xN vector\n\n\nReturn\n\nThe maximum value",
            "title": "Norm"
        },
        {
            "location": "/Reference_API_Docs/koma/norm/index.html#norm",
            "text": "fun norm(arr: Matrix < Double >): Double  Returns the L2 norm of the input vector for vectors.  TODO: Generalize this to matrices",
            "title": "norm"
        },
        {
            "location": "/Reference_API_Docs/koma/norm/index.html#parameters",
            "text": "arr  - A Nx1 or 1xN vector  Return \nThe maximum value",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma/ones/index.html",
            "text": "api\n / \nkoma\n / \nones\n\n\nones\n\n\nfun ~~ones~~(size:\nInt\n):\nMatrix\n<\nDouble\n>\n\n\nDeprecated:\n Use rows,col overload instead. This method will be removed in a future update.\n\n\nCreates a one-filled square matrix with the given size\n\n\ninline fun <reified T> ones(size:\nInt\n, dtype:\nMatrixType\n<T>):\nMatrix\n<T>\n\n\nfun <T> ones(rows:\nInt\n, columns:\nInt\n, dtype:\nMatrixType\n<T>):\nMatrix\n<T>``fun ones(rows:\nInt\n, columns:\nInt\n):\nMatrix\n<\nDouble\n>\n\n\nCreates a one-filled matrix with the given size",
            "title": "Ones"
        },
        {
            "location": "/Reference_API_Docs/koma/ones/index.html#ones",
            "text": "fun ~~ones~~(size: Int ): Matrix < Double >  Deprecated:  Use rows,col overload instead. This method will be removed in a future update.  Creates a one-filled square matrix with the given size  inline fun <reified T> ones(size: Int , dtype: MatrixType <T>): Matrix <T>  fun <T> ones(rows: Int , columns: Int , dtype: MatrixType <T>): Matrix <T>``fun ones(rows: Int , columns: Int ): Matrix < Double >  Creates a one-filled matrix with the given size",
            "title": "ones"
        },
        {
            "location": "/Reference_API_Docs/koma/plus/index.html",
            "text": "api\n / \nkoma\n / \nplus\n\n\nplus\n\n\noperator fun\nMatrix\n<\nDouble\n>.plus(value:\nInt\n):\nMatrix\n<\nDouble\n>\n\n\nAllow operator overloading with non-Double scalars",
            "title": "Plus"
        },
        {
            "location": "/Reference_API_Docs/koma/plus/index.html#plus",
            "text": "operator fun Matrix < Double >.plus(value: Int ): Matrix < Double >  Allow operator overloading with non-Double scalars",
            "title": "plus"
        },
        {
            "location": "/Reference_API_Docs/koma/pow/index.html",
            "text": "api\n / \nkoma\n / \npow\n\n\npow\n\n\nfun pow(arr:\nMatrix\n<\nDouble\n>, num:\nInt\n):\nMatrix\n<\nDouble\n>\n\n\nReturns a matrix which is the input matrix multiplied by itself num times (NOT elementwise multiplication!!).\nFor elementwise see \nepow\n.\n\n\nParameters\n\n\narr\n - An arbitrarily sized matrix\n\n\nnum\n - The integer power\n\n\nReturn\n\nA matrix consisting of num matrix multiplies of the input.\n\n\nfun pow(num:\nDouble\n, exp:\nDouble\n):\nDouble\n\n\nfun pow(num:\nDouble\n, exp:\nInt\n):\nDouble\n\n\nfun pow(num:\nInt\n, exp:\nInt\n):\nDouble\n\n\nfun pow(num:\nInt\n, exp:\nDouble\n):\nDouble\n\n\nA convenience function performing the pow operation via the \nMath\n equivalent call.",
            "title": "Pow"
        },
        {
            "location": "/Reference_API_Docs/koma/pow/index.html#pow",
            "text": "fun pow(arr: Matrix < Double >, num: Int ): Matrix < Double >  Returns a matrix which is the input matrix multiplied by itself num times (NOT elementwise multiplication!!).\nFor elementwise see  epow .",
            "title": "pow"
        },
        {
            "location": "/Reference_API_Docs/koma/pow/index.html#parameters",
            "text": "arr  - An arbitrarily sized matrix  num  - The integer power  Return \nA matrix consisting of num matrix multiplies of the input.  fun pow(num: Double , exp: Double ): Double  fun pow(num: Double , exp: Int ): Double  fun pow(num: Int , exp: Int ): Double  fun pow(num: Int , exp: Double ): Double  A convenience function performing the pow operation via the  Math  equivalent call.",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma/rand/index.html",
            "text": "api\n / \nkoma\n / \nrand\n\n\nrand\n\n\nfun ~~rand~~(cols:\nInt\n):\nMatrix\n<\nDouble\n>\n\n\nDeprecated:\n Use rows,col overload instead. This method will be removed in a future update.\n\n\nCreates an 1x\ncols\n matrix filled with unit uniform random numbers\n\n\nfun <T> rand(cols:\nInt\n, dtype:\nMatrixType\n<T>):\nMatrix\n<T>\n\n\nfun <T> rand(rows:\nInt\n, cols:\nInt\n, dtype:\nMatrixType\n<T>):\nMatrix\n<T>\n\n\nfun <T> rand(rows:\nInt\n, cols:\nInt\n, seed:\nLong\n, dtype:\nMatrixType\n<T>):\nMatrix\n<T>``fun rand(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nDouble\n>\n\n\nCreates an matrix filled with unit uniform random numbers\n\n\nfun rand(rows:\nInt\n, cols:\nInt\n, seed:\nLong\n):\nMatrix\n<\nDouble\n>\n\n\nCreates an matrix filled with unit normal random numbers, using the given seed for the RNG.\nSubsequent calls with the same seed will produce identical numbers.",
            "title": "Rand"
        },
        {
            "location": "/Reference_API_Docs/koma/rand/index.html#rand",
            "text": "fun ~~rand~~(cols: Int ): Matrix < Double >  Deprecated:  Use rows,col overload instead. This method will be removed in a future update.  Creates an 1x cols  matrix filled with unit uniform random numbers  fun <T> rand(cols: Int , dtype: MatrixType <T>): Matrix <T>  fun <T> rand(rows: Int , cols: Int , dtype: MatrixType <T>): Matrix <T>  fun <T> rand(rows: Int , cols: Int , seed: Long , dtype: MatrixType <T>): Matrix <T>``fun rand(rows: Int , cols: Int ): Matrix < Double >  Creates an matrix filled with unit uniform random numbers  fun rand(rows: Int , cols: Int , seed: Long ): Matrix < Double >  Creates an matrix filled with unit normal random numbers, using the given seed for the RNG.\nSubsequent calls with the same seed will produce identical numbers.",
            "title": "rand"
        },
        {
            "location": "/Reference_API_Docs/koma/randn/index.html",
            "text": "api\n / \nkoma\n / \nrandn\n\n\nrandn\n\n\nfun ~~randn~~(cols:\nInt\n):\nMatrix\n<\nDouble\n>\n\n\nDeprecated:\n Use rows,col overload instead. This method will be removed in a future update.\n\n\nCreates an 1x\ncols\n matrix filled with unit normal random numbers\n\n\nfun <T> randn(cols:\nInt\n, dtype:\nMatrixType\n<T>):\nMatrix\n<T>\n\n\nfun <T> randn(rows:\nInt\n, cols:\nInt\n, dtype:\nMatrixType\n<T>):\nMatrix\n<T>\n\n\nfun <T> randn(rows:\nInt\n, cols:\nInt\n, seed:\nLong\n, dtype:\nMatrixType\n<T>):\nMatrix\n<T>``fun randn(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nDouble\n>\n\n\nCreates an matrix filled with unit normal random numbers\n\n\nfun randn(rows:\nInt\n, cols:\nInt\n, seed:\nLong\n):\nMatrix\n<\nDouble\n>\n\n\nCreates an matrix filled with unit normal random numbers, using the given seed for the RNG.\nSubsequent calls with the same seed will produce identical numbers.",
            "title": "Randn"
        },
        {
            "location": "/Reference_API_Docs/koma/randn/index.html#randn",
            "text": "fun ~~randn~~(cols: Int ): Matrix < Double >  Deprecated:  Use rows,col overload instead. This method will be removed in a future update.  Creates an 1x cols  matrix filled with unit normal random numbers  fun <T> randn(cols: Int , dtype: MatrixType <T>): Matrix <T>  fun <T> randn(rows: Int , cols: Int , dtype: MatrixType <T>): Matrix <T>  fun <T> randn(rows: Int , cols: Int , seed: Long , dtype: MatrixType <T>): Matrix <T>``fun randn(rows: Int , cols: Int ): Matrix < Double >  Creates an matrix filled with unit normal random numbers  fun randn(rows: Int , cols: Int , seed: Long ): Matrix < Double >  Creates an matrix filled with unit normal random numbers, using the given seed for the RNG.\nSubsequent calls with the same seed will produce identical numbers.",
            "title": "randn"
        },
        {
            "location": "/Reference_API_Docs/koma/round/index.html",
            "text": "api\n / \nkoma\n / \nround\n\n\nround\n\n\nfun round(arr:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\n\n\nRounds each element to the nearest integer value. For elements exactly between integers,\nchoose the highest value.\n\n\nParameters\n\n\narr\n - An arbitrarily sized matrix\n\n\nReturn\n\nA matrix consisting of the operation performed element-wise.\n\n\nfun round(arr:\nDouble\n):\nLong\n\n\nfun round(arr:\nInt\n):\nLong\n\n\nA convenience function performing the round operation via the \nMath\n equivalent call.",
            "title": "Round"
        },
        {
            "location": "/Reference_API_Docs/koma/round/index.html#round",
            "text": "fun round(arr: Matrix < Double >): Matrix < Double >  Rounds each element to the nearest integer value. For elements exactly between integers,\nchoose the highest value.",
            "title": "round"
        },
        {
            "location": "/Reference_API_Docs/koma/round/index.html#parameters",
            "text": "arr  - An arbitrarily sized matrix  Return \nA matrix consisting of the operation performed element-wise.  fun round(arr: Double ): Long  fun round(arr: Int ): Long  A convenience function performing the round operation via the  Math  equivalent call.",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma/set/index.html",
            "text": "api\n / \nkoma\n / \nset\n\n\nset\n\n\noperator fun <T>\nMatrix\n<T>.set(i:\nInt\n, v: T):\nUnit\n\n\nSet the ith element in the matrix. If 2D, selects elements in row-major order.\n\n\noperator fun <T>\nMatrix\n<T>.set(i:\nInt\n, j:\nInt\n, v: T):\nUnit\n\n\noperator fun <T>\nMatrix\n<T>.set(rows:\nIntRange\n, cols:\nIntRange\n, value: T):\nUnit\n\n\noperator fun <T>\nMatrix\n<T>.set(rows:\nInt\n, cols:\nIntRange\n, value: T):\nUnit\n\n\noperator fun <T>\nMatrix\n<T>.set(rows:\nIntRange\n, cols:\nInt\n, value: T):\nUnit\n\n\noperator fun\nMatrix\n<\nDouble\n>.set(i:\nInt\n, v:\nDouble\n):\nUnit\n\n\noperator fun\nMatrix\n<\nDouble\n>.set(i:\nInt\n, j:\nInt\n, v:\nDouble\n):\nUnit\n\n\noperator fun\nMatrix\n<\nDouble\n>.set(i:\nInt\n, v:\nInt\n):\nUnit\n\n\noperator fun\nMatrix\n<\nDouble\n>.set(i:\nInt\n, j:\nInt\n, v:\nInt\n):\nUnit\noperator fun <T>\nMatrix\n<T>.set(rows:\nIntRange\n, cols:\nIntRange\n, value:\nMatrix\n<T>):\nUnit\n\n\nAllow assignment to a slice, e.g. \nmatrix[1..2, 3..4]\n=something. Note that the range 1..2 is inclusive, so\nit will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.\n\n\n@param rows the set of rows to select\n@param cols the set of columns to select\n@param value the matrix to set the subslice to\n\n\noperator fun <T>\nMatrix\n<T>.set(rows:\nInt\n, cols:\nIntRange\n, value:\nMatrix\n<T>):\nUnit\n\n\nAllow assignment to a slice, e.g. \nmatrix[2, 3..4]\n=something. Note that the range 3..4 is inclusive, so\nit will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range.\n\n\n@param rows the row to select\n@param cols the set of columns to select\n@param value the matrix to set the subslice to\n\n\noperator fun <T>\nMatrix\n<T>.set(rows:\nIntRange\n, cols:\nInt\n, value:\nMatrix\n<T>):\nUnit\n\n\nAllow assignment to a slice, e.g. \nmatrix[1..2, 3]\n=something. Note that the range 1..2 is inclusive, so\nit will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.\n\n\n@param rows the set of rows to select\n@param cols the column to select\n@param value the matrix to set the subslice to",
            "title": "Set"
        },
        {
            "location": "/Reference_API_Docs/koma/set/index.html#set",
            "text": "operator fun <T> Matrix <T>.set(i: Int , v: T): Unit  Set the ith element in the matrix. If 2D, selects elements in row-major order.  operator fun <T> Matrix <T>.set(i: Int , j: Int , v: T): Unit  operator fun <T> Matrix <T>.set(rows: IntRange , cols: IntRange , value: T): Unit  operator fun <T> Matrix <T>.set(rows: Int , cols: IntRange , value: T): Unit  operator fun <T> Matrix <T>.set(rows: IntRange , cols: Int , value: T): Unit  operator fun Matrix < Double >.set(i: Int , v: Double ): Unit  operator fun Matrix < Double >.set(i: Int , j: Int , v: Double ): Unit  operator fun Matrix < Double >.set(i: Int , v: Int ): Unit  operator fun Matrix < Double >.set(i: Int , j: Int , v: Int ): Unit operator fun <T> Matrix <T>.set(rows: IntRange , cols: IntRange , value: Matrix <T>): Unit  Allow assignment to a slice, e.g.  matrix[1..2, 3..4] =something. Note that the range 1..2 is inclusive, so\nit will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.  @param rows the set of rows to select\n@param cols the set of columns to select\n@param value the matrix to set the subslice to  operator fun <T> Matrix <T>.set(rows: Int , cols: IntRange , value: Matrix <T>): Unit  Allow assignment to a slice, e.g.  matrix[2, 3..4] =something. Note that the range 3..4 is inclusive, so\nit will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range.  @param rows the row to select\n@param cols the set of columns to select\n@param value the matrix to set the subslice to  operator fun <T> Matrix <T>.set(rows: IntRange , cols: Int , value: Matrix <T>): Unit  Allow assignment to a slice, e.g.  matrix[1..2, 3] =something. Note that the range 1..2 is inclusive, so\nit will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.  @param rows the set of rows to select\n@param cols the column to select\n@param value the matrix to set the subslice to",
            "title": "set"
        },
        {
            "location": "/Reference_API_Docs/koma/sign/index.html",
            "text": "api\n / \nkoma\n / \nsign\n\n\nsign\n\n\nfun sign(arr:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\n\n\nCalculates a matrix consisting of the sign of each element in the input matrix.\nReturns -1 for positive values, -1 for negative values, 0 for 0.\n\n\nParameters\n\n\narr\n - An arbitrarily sized matrix\n\n\nReturn\n\nA matrix consisting of the operation performed element-wise.\n\n\nfun sign(arr:\nDouble\n): <ERROR CLASS>\n\n\nfun sign(arr:\nInt\n): <ERROR CLASS>\n\n\nA convenience function performing the sign operation via the \nMath\n equivalent call.",
            "title": "Sign"
        },
        {
            "location": "/Reference_API_Docs/koma/sign/index.html#sign",
            "text": "fun sign(arr: Matrix < Double >): Matrix < Double >  Calculates a matrix consisting of the sign of each element in the input matrix.\nReturns -1 for positive values, -1 for negative values, 0 for 0.",
            "title": "sign"
        },
        {
            "location": "/Reference_API_Docs/koma/sign/index.html#parameters",
            "text": "arr  - An arbitrarily sized matrix  Return \nA matrix consisting of the operation performed element-wise.  fun sign(arr: Double ): <ERROR CLASS>  fun sign(arr: Int ): <ERROR CLASS>  A convenience function performing the sign operation via the  Math  equivalent call.",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma/sin/index.html",
            "text": "api\n / \nkoma\n / \nsin\n\n\nsin\n\n\nfun sin(arr:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\n\n\nReturns a matrix of the sin of each element in the input matrix\n\n\nParameters\n\n\narr\n - An arbitrarily sized matrix\n\n\nReturn\n\nA matrix consisting of the operation performed element-wise.\n\n\nfun sin(arr:\nDouble\n):\nDouble\n\n\nfun sin(arr:\nInt\n):\nDouble\n\n\nA convenience function performing the sin operation via the \nMath\n equivalent call.",
            "title": "Sin"
        },
        {
            "location": "/Reference_API_Docs/koma/sin/index.html#sin",
            "text": "fun sin(arr: Matrix < Double >): Matrix < Double >  Returns a matrix of the sin of each element in the input matrix",
            "title": "sin"
        },
        {
            "location": "/Reference_API_Docs/koma/sin/index.html#parameters",
            "text": "arr  - An arbitrarily sized matrix  Return \nA matrix consisting of the operation performed element-wise.  fun sin(arr: Double ): Double  fun sin(arr: Int ): Double  A convenience function performing the sin operation via the  Math  equivalent call.",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma/skew/index.html",
            "text": "api\n / \nkoma\n / \nskew\n\n\nskew\n\n\nfun skew(angles:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\n\n\nConverts a 3x1 or 1x3 vector of angles into the skew symmetric matrix\nequivalent.\n\n\nParameters\n\n\nangles\n - The input matrix\n\n\nReturn\n\n3x3 skew symmetric matrix",
            "title": "Skew"
        },
        {
            "location": "/Reference_API_Docs/koma/skew/index.html#skew",
            "text": "fun skew(angles: Matrix < Double >): Matrix < Double >  Converts a 3x1 or 1x3 vector of angles into the skew symmetric matrix\nequivalent.",
            "title": "skew"
        },
        {
            "location": "/Reference_API_Docs/koma/skew/index.html#parameters",
            "text": "angles  - The input matrix  Return \n3x3 skew symmetric matrix",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma/sqrt/index.html",
            "text": "api\n / \nkoma\n / \nsqrt\n\n\nsqrt\n\n\nfun sqrt(arr:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\n\n\nReturns a matrix of the sqrt of each element in the input matrix. Does\nnot yet support complex numbers.\n\n\nParameters\n\n\narr\n - An arbitrarily sized matrix\n\n\nReturn\n\nA matrix consisting of the operation performed element-wise.\n\n\nfun sqrt(arr:\nDouble\n):\nDouble\n\n\nfun sqrt(arr:\nInt\n):\nDouble\n\n\nA convenience function performing the sqrt operation via the \nMath\n equivalent call.",
            "title": "Sqrt"
        },
        {
            "location": "/Reference_API_Docs/koma/sqrt/index.html#sqrt",
            "text": "fun sqrt(arr: Matrix < Double >): Matrix < Double >  Returns a matrix of the sqrt of each element in the input matrix. Does\nnot yet support complex numbers.",
            "title": "sqrt"
        },
        {
            "location": "/Reference_API_Docs/koma/sqrt/index.html#parameters",
            "text": "arr  - An arbitrarily sized matrix  Return \nA matrix consisting of the operation performed element-wise.  fun sqrt(arr: Double ): Double  fun sqrt(arr: Int ): Double  A convenience function performing the sqrt operation via the  Math  equivalent call.",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma/tan/index.html",
            "text": "api\n / \nkoma\n / \ntan\n\n\ntan\n\n\nfun tan(arr:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\n\n\nReturns a matrix of the tan of each element in the input matrix\n\n\nParameters\n\n\narr\n - An arbitrarily sized matrix\n\n\nReturn\n\nA matrix consisting of the operation performed element-wise.\n\n\nfun tan(arr:\nDouble\n):\nDouble\n\n\nfun tan(arr:\nInt\n):\nDouble\n\n\nA convenience function performing the tan operation via the \nMath\n equivalent call.",
            "title": "Tan"
        },
        {
            "location": "/Reference_API_Docs/koma/tan/index.html#tan",
            "text": "fun tan(arr: Matrix < Double >): Matrix < Double >  Returns a matrix of the tan of each element in the input matrix",
            "title": "tan"
        },
        {
            "location": "/Reference_API_Docs/koma/tan/index.html#parameters",
            "text": "arr  - An arbitrarily sized matrix  Return \nA matrix consisting of the operation performed element-wise.  fun tan(arr: Double ): Double  fun tan(arr: Int ): Double  A convenience function performing the tan operation via the  Math  equivalent call.",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma/times/index.html",
            "text": "api\n / \nkoma\n / \ntimes\n\n\ntimes\n\n\noperator fun\nMatrix\n<\nDouble\n>.times(other:\nInt\n):\nMatrix\n<\nDouble\n>\n\n\nMultiply a scalar by a matrix",
            "title": "Times"
        },
        {
            "location": "/Reference_API_Docs/koma/times/index.html#times",
            "text": "operator fun Matrix < Double >.times(other: Int ): Matrix < Double >  Multiply a scalar by a matrix",
            "title": "times"
        },
        {
            "location": "/Reference_API_Docs/koma/validate-matrices/index.html",
            "text": "api\n / \nkoma\n / \nvalidateMatrices\n\n\nvalidateMatrices\n\n\nvar validateMatrices:\nBoolean\n\n\nWhether to validate the dimensions, symmetry, and values of input matrices. false is faster, and should be\nused for realtime applications. true gives you much more useful errors when your matrices are shaped\ndifferently than your code expects.",
            "title": "Validate matrices"
        },
        {
            "location": "/Reference_API_Docs/koma/validate-matrices/index.html#validatematrices",
            "text": "var validateMatrices: Boolean  Whether to validate the dimensions, symmetry, and values of input matrices. false is faster, and should be\nused for realtime applications. true gives you much more useful errors when your matrices are shaped\ndifferently than your code expects.",
            "title": "validateMatrices"
        },
        {
            "location": "/Reference_API_Docs/koma/vstack/index.html",
            "text": "api\n / \nkoma\n / \nvstack\n\n\nvstack\n\n\nfun vstack(vararg arrs:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>",
            "title": "Vstack"
        },
        {
            "location": "/Reference_API_Docs/koma/vstack/index.html#vstack",
            "text": "fun vstack(vararg arrs: Matrix < Double >): Matrix < Double >",
            "title": "vstack"
        },
        {
            "location": "/Reference_API_Docs/koma/zeros/index.html",
            "text": "api\n / \nkoma\n / \nzeros\n\n\nzeros\n\n\nfun zeros(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nDouble\n>\n\n\nCreates a zero-filled matrix with the given size\n\n\nfun <T> zeros(rows:\nInt\n, cols:\nInt\n, dtype:\nMatrixType\n<T>):\nMatrix\n<T>\n\n\nfun <T> zeros(size:\nInt\n, dtype:\nMatrixType\n<T>):\nMatrix\n<T>``fun ~~zeros~~(size:\nInt\n):\nMatrix\n<\nDouble\n>\n\n\nDeprecated:\n Use rows,col overload instead. This method will be removed in a future update.\n\n\nCreates a square zero-filled matrix with the given size",
            "title": "Zeros"
        },
        {
            "location": "/Reference_API_Docs/koma/zeros/index.html#zeros",
            "text": "fun zeros(rows: Int , cols: Int ): Matrix < Double >  Creates a zero-filled matrix with the given size  fun <T> zeros(rows: Int , cols: Int , dtype: MatrixType <T>): Matrix <T>  fun <T> zeros(size: Int , dtype: MatrixType <T>): Matrix <T>``fun ~~zeros~~(size: Int ): Matrix < Double >  Deprecated:  Use rows,col overload instead. This method will be removed in a future update.  Creates a square zero-filled matrix with the given size",
            "title": "zeros"
        },
        {
            "location": "/Reference_API_Docs/koma/-mat-fac-property/-init-/index.html",
            "text": "api\n / \nkoma\n / \nMatFacProperty\n / \n<init>\n\n\n<init>\n\n\nMatFacProperty(available: () ->\nList\n<\nMatrixFactory\n<\nMatrix\n<T>>>, default:\nMatrixFactory\n<\nMatrix\n<T>>)\n\n\nA property which queries the platform-specific discovery function \navailable\n)))))), koma.matrix.MatrixFactory((koma.matrix.Matrix((koma.MatFacProperty.T)))))/available)\nfor a backend, and if none are found there it selects \ndefault\n)))))), koma.matrix.MatrixFactory((koma.matrix.Matrix((koma.MatFacProperty.T)))))/default) instead. If this\nproperty is ever set by the user then the user's choice overrides all others.",
            "title": " init "
        },
        {
            "location": "/Reference_API_Docs/koma/-mat-fac-property/-init-/index.html#init",
            "text": "MatFacProperty(available: () -> List < MatrixFactory < Matrix <T>>>, default: MatrixFactory < Matrix <T>>)  A property which queries the platform-specific discovery function  available )))))), koma.matrix.MatrixFactory((koma.matrix.Matrix((koma.MatFacProperty.T)))))/available)\nfor a backend, and if none are found there it selects  default )))))), koma.matrix.MatrixFactory((koma.matrix.Matrix((koma.MatFacProperty.T)))))/default) instead. If this\nproperty is ever set by the user then the user's choice overrides all others.",
            "title": "&lt;init&gt;"
        },
        {
            "location": "/Reference_API_Docs/koma/-mat-fac-property/available/index.html",
            "text": "api\n / \nkoma\n / \nMatFacProperty\n / \navailable\n\n\navailable\n\n\nval available: () ->\nList\n<\nMatrixFactory\n<\nMatrix\n<T>>>",
            "title": "Available"
        },
        {
            "location": "/Reference_API_Docs/koma/-mat-fac-property/available/index.html#available",
            "text": "val available: () -> List < MatrixFactory < Matrix <T>>>",
            "title": "available"
        },
        {
            "location": "/Reference_API_Docs/koma/-mat-fac-property/default/index.html",
            "text": "api\n / \nkoma\n / \nMatFacProperty\n / \ndefault\n\n\ndefault\n\n\nval default:\nMatrixFactory\n<\nMatrix\n<T>>",
            "title": "Default"
        },
        {
            "location": "/Reference_API_Docs/koma/-mat-fac-property/default/index.html#default",
            "text": "val default: MatrixFactory < Matrix <T>>",
            "title": "default"
        },
        {
            "location": "/Reference_API_Docs/koma/-mat-fac-property/get-value/index.html",
            "text": "api\n / \nkoma\n / \nMatFacProperty\n / \ngetValue\n\n\ngetValue\n\n\noperator fun getValue(thisRef:\nAny\n?, property:\nKProperty\n<*>):\nMatrixFactory\n<\nMatrix\n<T>>",
            "title": "Get value"
        },
        {
            "location": "/Reference_API_Docs/koma/-mat-fac-property/get-value/index.html#getvalue",
            "text": "operator fun getValue(thisRef: Any ?, property: KProperty <*>): MatrixFactory < Matrix <T>>",
            "title": "getValue"
        },
        {
            "location": "/Reference_API_Docs/koma/-mat-fac-property/index.html",
            "text": "api\n / \nkoma\n / \nMatFacProperty\n\n\nMatFacProperty\n\n\nclass MatFacProperty<T>\n\n\nA property which queries the platform-specific discovery function \navailable\n\nfor a backend, and if none are found there it selects \ndefault\n instead. If this\nproperty is ever set by the user then the user's choice overrides all others.\n\n\nConstructors\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\n<init>\n\n\nMatFacProperty(available: () ->\nList\n<\nMatrixFactory\n<\nMatrix\n<T>>>, default:\nMatrixFactory\n<\nMatrix\n<T>>)\nA property which queries the platform-specific discovery function \navailable\n)))))), koma.matrix.MatrixFactory((koma.matrix.Matrix((koma.MatFacProperty.T)))))/available) for a backend, and if none are found there it selects \ndefault\n)))))), koma.matrix.MatrixFactory((koma.matrix.Matrix((koma.MatFacProperty.T)))))/default) instead. If this property is ever set by the user then the user's choice overrides all others.\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\navailable\n\n\nval available: () ->\nList\n<\nMatrixFactory\n<\nMatrix\n<T>>>\n\n\n\n\n\n\ndefault\n\n\nval default:\nMatrixFactory\n<\nMatrix\n<T>>\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\ngetValue\n\n\noperator fun getValue(thisRef:\nAny\n?, property:\nKProperty\n<*>):\nMatrixFactory\n<\nMatrix\n<T>>\n\n\n\n\n\n\nsetValue\n\n\noperator fun setValue(thisRef:\nAny\n?, property:\nKProperty\n<*>, value:\nMatrixFactory\n<\nMatrix\n<T>>?):\nUnit",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma/-mat-fac-property/index.html#matfacproperty",
            "text": "class MatFacProperty<T>  A property which queries the platform-specific discovery function  available \nfor a backend, and if none are found there it selects  default  instead. If this\nproperty is ever set by the user then the user's choice overrides all others.",
            "title": "MatFacProperty"
        },
        {
            "location": "/Reference_API_Docs/koma/-mat-fac-property/index.html#constructors",
            "text": "Name  Summary      <init>  MatFacProperty(available: () -> List < MatrixFactory < Matrix <T>>>, default: MatrixFactory < Matrix <T>>) A property which queries the platform-specific discovery function  available )))))), koma.matrix.MatrixFactory((koma.matrix.Matrix((koma.MatFacProperty.T)))))/available) for a backend, and if none are found there it selects  default )))))), koma.matrix.MatrixFactory((koma.matrix.Matrix((koma.MatFacProperty.T)))))/default) instead. If this property is ever set by the user then the user's choice overrides all others.",
            "title": "Constructors"
        },
        {
            "location": "/Reference_API_Docs/koma/-mat-fac-property/index.html#properties",
            "text": "Name  Summary      available  val available: () -> List < MatrixFactory < Matrix <T>>>    default  val default: MatrixFactory < Matrix <T>>",
            "title": "Properties"
        },
        {
            "location": "/Reference_API_Docs/koma/-mat-fac-property/index.html#functions",
            "text": "Name  Summary      getValue  operator fun getValue(thisRef: Any ?, property: KProperty <*>): MatrixFactory < Matrix <T>>    setValue  operator fun setValue(thisRef: Any ?, property: KProperty <*>, value: MatrixFactory < Matrix <T>>?): Unit",
            "title": "Functions"
        },
        {
            "location": "/Reference_API_Docs/koma/-mat-fac-property/set-value/index.html",
            "text": "api\n / \nkoma\n / \nMatFacProperty\n / \nsetValue\n\n\nsetValue\n\n\noperator fun setValue(thisRef:\nAny\n?, property:\nKProperty\n<*>, value:\nMatrixFactory\n<\nMatrix\n<T>>?):\nUnit",
            "title": "Set value"
        },
        {
            "location": "/Reference_API_Docs/koma/-mat-fac-property/set-value/index.html#setvalue",
            "text": "operator fun setValue(thisRef: Any ?, property: KProperty <*>, value: MatrixFactory < Matrix <T>>?): Unit",
            "title": "setValue"
        },
        {
            "location": "/Reference_API_Docs/koma/-u-int8/-init-/index.html",
            "text": "api\n / \nkoma\n / \nUInt8\n / \n<init>\n\n\n<init>\n\n\nUInt8(init:\nShort\n)\n\n\nUInt8(init:\nByte\n)",
            "title": " init "
        },
        {
            "location": "/Reference_API_Docs/koma/-u-int8/-init-/index.html#init",
            "text": "UInt8(init: Short )  UInt8(init: Byte )",
            "title": "&lt;init&gt;"
        },
        {
            "location": "/Reference_API_Docs/koma/-u-int8/divide/index.html",
            "text": "api\n / \nkoma\n / \nUInt8\n / \ndivide\n\n\ndivide\n\n\nfun divide(other:\nUInt8\n):\nUInt8",
            "title": "Divide"
        },
        {
            "location": "/Reference_API_Docs/koma/-u-int8/divide/index.html#divide",
            "text": "fun divide(other: UInt8 ): UInt8",
            "title": "divide"
        },
        {
            "location": "/Reference_API_Docs/koma/-u-int8/index.html",
            "text": "api\n / \nkoma\n / \nUInt8\n\n\nUInt8\n\n\nclass UInt8\n\n\nAn implementation of an unsigned byte. Still a WIP.\n\n\nConstructors\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\n<init>\n\n\nUInt8(init:\nShort\n)\nUInt8(init:\nByte\n)\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nvar value:\nByte\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\ndivide\n\n\nfun divide(other: UInt8): UInt8\n\n\n\n\n\n\nminus\n\n\noperator fun minus(other: UInt8): UInt8\n\n\n\n\n\n\nplus\n\n\noperator fun plus(other: UInt8): UInt8\n\n\n\n\n\n\nread\n\n\nfun read():\nInt\n\n\n\n\n\n\ntimes\n\n\noperator fun times(other: UInt8): UInt8",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma/-u-int8/index.html#uint8",
            "text": "class UInt8  An implementation of an unsigned byte. Still a WIP.",
            "title": "UInt8"
        },
        {
            "location": "/Reference_API_Docs/koma/-u-int8/index.html#constructors",
            "text": "Name  Summary      <init>  UInt8(init: Short ) UInt8(init: Byte )",
            "title": "Constructors"
        },
        {
            "location": "/Reference_API_Docs/koma/-u-int8/index.html#properties",
            "text": "Name  Summary      value  var value: Byte",
            "title": "Properties"
        },
        {
            "location": "/Reference_API_Docs/koma/-u-int8/index.html#functions",
            "text": "Name  Summary      divide  fun divide(other: UInt8): UInt8    minus  operator fun minus(other: UInt8): UInt8    plus  operator fun plus(other: UInt8): UInt8    read  fun read(): Int    times  operator fun times(other: UInt8): UInt8",
            "title": "Functions"
        },
        {
            "location": "/Reference_API_Docs/koma/-u-int8/minus/index.html",
            "text": "api\n / \nkoma\n / \nUInt8\n / \nminus\n\n\nminus\n\n\noperator fun minus(other:\nUInt8\n):\nUInt8",
            "title": "Minus"
        },
        {
            "location": "/Reference_API_Docs/koma/-u-int8/minus/index.html#minus",
            "text": "operator fun minus(other: UInt8 ): UInt8",
            "title": "minus"
        },
        {
            "location": "/Reference_API_Docs/koma/-u-int8/plus/index.html",
            "text": "api\n / \nkoma\n / \nUInt8\n / \nplus\n\n\nplus\n\n\noperator fun plus(other:\nUInt8\n):\nUInt8",
            "title": "Plus"
        },
        {
            "location": "/Reference_API_Docs/koma/-u-int8/plus/index.html#plus",
            "text": "operator fun plus(other: UInt8 ): UInt8",
            "title": "plus"
        },
        {
            "location": "/Reference_API_Docs/koma/-u-int8/read/index.html",
            "text": "api\n / \nkoma\n / \nUInt8\n / \nread\n\n\nread\n\n\nfun read():\nInt",
            "title": "Read"
        },
        {
            "location": "/Reference_API_Docs/koma/-u-int8/read/index.html#read",
            "text": "fun read(): Int",
            "title": "read"
        },
        {
            "location": "/Reference_API_Docs/koma/-u-int8/times/index.html",
            "text": "api\n / \nkoma\n / \nUInt8\n / \ntimes\n\n\ntimes\n\n\noperator fun times(other:\nUInt8\n):\nUInt8",
            "title": "Times"
        },
        {
            "location": "/Reference_API_Docs/koma/-u-int8/times/index.html#times",
            "text": "operator fun times(other: UInt8 ): UInt8",
            "title": "times"
        },
        {
            "location": "/Reference_API_Docs/koma/-u-int8/value/index.html",
            "text": "api\n / \nkoma\n / \nUInt8\n / \nvalue\n\n\nvalue\n\n\nvar value:\nByte",
            "title": "Value"
        },
        {
            "location": "/Reference_API_Docs/koma/-u-int8/value/index.html#value",
            "text": "var value: Byte",
            "title": "value"
        },
        {
            "location": "/Reference_API_Docs/koma/kotlin.-double/end/index.html",
            "text": "api\n / \nkoma\n / \nkotlin.Double\n / \nend\n\n\nend\n\n\ninfix fun\nDouble\n.end(other:\nDouble\n): <ERROR CLASS>\n\n\ninfix fun\nDouble\n.end(other:\nInt\n): <ERROR CLASS>\n\n\nA helper object for the builder DSL. See \nmat\n.",
            "title": "End"
        },
        {
            "location": "/Reference_API_Docs/koma/kotlin.-double/end/index.html#end",
            "text": "infix fun Double .end(other: Double ): <ERROR CLASS>  infix fun Double .end(other: Int ): <ERROR CLASS>  A helper object for the builder DSL. See  mat .",
            "title": "end"
        },
        {
            "location": "/Reference_API_Docs/koma/kotlin.-double/index.html",
            "text": "api\n / \nkoma\n / \nkotlin.Double\n\n\nExtensions for kotlin.Double\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nend\n\n\ninfix fun\nDouble\n.end(other:\nDouble\n): <ERROR CLASS>\ninfix fun\nDouble\n.end(other:\nInt\n): <ERROR CLASS>\nA helper object for the builder DSL. See \nmat\n.\n\n\n\n\n\n\nminus\n\n\noperator fun\nDouble\n.minus(other:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\nSubtract a matrix from a scala\n\n\n\n\n\n\nplus\n\n\noperator fun\nDouble\n.plus(other:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\nAdd a scalar to a matrix\n\n\n\n\n\n\ntimes\n\n\noperator fun\nDouble\n.times(other:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\nMultiply a scalar by a matrix",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma/kotlin.-double/index.html#extensions-for-kotlindouble",
            "text": "Name  Summary      end  infix fun Double .end(other: Double ): <ERROR CLASS> infix fun Double .end(other: Int ): <ERROR CLASS> A helper object for the builder DSL. See  mat .    minus  operator fun Double .minus(other: Matrix < Double >): Matrix < Double > Subtract a matrix from a scala    plus  operator fun Double .plus(other: Matrix < Double >): Matrix < Double > Add a scalar to a matrix    times  operator fun Double .times(other: Matrix < Double >): Matrix < Double > Multiply a scalar by a matrix",
            "title": "Extensions for kotlin.Double"
        },
        {
            "location": "/Reference_API_Docs/koma/kotlin.-double/minus/index.html",
            "text": "api\n / \nkoma\n / \nkotlin.Double\n / \nminus\n\n\nminus\n\n\noperator fun\nDouble\n.minus(other:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\n\n\nSubtract a matrix from a scala",
            "title": "Minus"
        },
        {
            "location": "/Reference_API_Docs/koma/kotlin.-double/minus/index.html#minus",
            "text": "operator fun Double .minus(other: Matrix < Double >): Matrix < Double >  Subtract a matrix from a scala",
            "title": "minus"
        },
        {
            "location": "/Reference_API_Docs/koma/kotlin.-double/plus/index.html",
            "text": "api\n / \nkoma\n / \nkotlin.Double\n / \nplus\n\n\nplus\n\n\noperator fun\nDouble\n.plus(other:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\n\n\nAdd a scalar to a matrix",
            "title": "Plus"
        },
        {
            "location": "/Reference_API_Docs/koma/kotlin.-double/plus/index.html#plus",
            "text": "operator fun Double .plus(other: Matrix < Double >): Matrix < Double >  Add a scalar to a matrix",
            "title": "plus"
        },
        {
            "location": "/Reference_API_Docs/koma/kotlin.-double/times/index.html",
            "text": "api\n / \nkoma\n / \nkotlin.Double\n / \ntimes\n\n\ntimes\n\n\noperator fun\nDouble\n.times(other:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\n\n\nMultiply a scalar by a matrix",
            "title": "Times"
        },
        {
            "location": "/Reference_API_Docs/koma/kotlin.-double/times/index.html#times",
            "text": "operator fun Double .times(other: Matrix < Double >): Matrix < Double >  Multiply a scalar by a matrix",
            "title": "times"
        },
        {
            "location": "/Reference_API_Docs/koma/kotlin.-int/end/index.html",
            "text": "api\n / \nkoma\n / \nkotlin.Int\n / \nend\n\n\nend\n\n\ninfix fun\nInt\n.end(other:\nDouble\n): <ERROR CLASS>\n\n\ninfix fun\nInt\n.end(other:\nInt\n): <ERROR CLASS>\n\n\nA helper object for the builder DSL. See \nmat\n.",
            "title": "End"
        },
        {
            "location": "/Reference_API_Docs/koma/kotlin.-int/end/index.html#end",
            "text": "infix fun Int .end(other: Double ): <ERROR CLASS>  infix fun Int .end(other: Int ): <ERROR CLASS>  A helper object for the builder DSL. See  mat .",
            "title": "end"
        },
        {
            "location": "/Reference_API_Docs/koma/kotlin.-int/index.html",
            "text": "api\n / \nkoma\n / \nkotlin.Int\n\n\nExtensions for kotlin.Int\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nend\n\n\ninfix fun\nInt\n.end(other:\nDouble\n): <ERROR CLASS>\ninfix fun\nInt\n.end(other:\nInt\n): <ERROR CLASS>\nA helper object for the builder DSL. See \nmat\n.\n\n\n\n\n\n\nminus\n\n\noperator fun\nInt\n.minus(other:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\nSubtract a matrix from a scala\n\n\n\n\n\n\nplus\n\n\noperator fun\nInt\n.plus(other:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\nAdd a scalar to a matrix\n\n\n\n\n\n\ntimes\n\n\noperator fun\nInt\n.times(other:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\nMultiply a scalar by a matrix",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma/kotlin.-int/index.html#extensions-for-kotlinint",
            "text": "Name  Summary      end  infix fun Int .end(other: Double ): <ERROR CLASS> infix fun Int .end(other: Int ): <ERROR CLASS> A helper object for the builder DSL. See  mat .    minus  operator fun Int .minus(other: Matrix < Double >): Matrix < Double > Subtract a matrix from a scala    plus  operator fun Int .plus(other: Matrix < Double >): Matrix < Double > Add a scalar to a matrix    times  operator fun Int .times(other: Matrix < Double >): Matrix < Double > Multiply a scalar by a matrix",
            "title": "Extensions for kotlin.Int"
        },
        {
            "location": "/Reference_API_Docs/koma/kotlin.-int/minus/index.html",
            "text": "api\n / \nkoma\n / \nkotlin.Int\n / \nminus\n\n\nminus\n\n\noperator fun\nInt\n.minus(other:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\n\n\nSubtract a matrix from a scala",
            "title": "Minus"
        },
        {
            "location": "/Reference_API_Docs/koma/kotlin.-int/minus/index.html#minus",
            "text": "operator fun Int .minus(other: Matrix < Double >): Matrix < Double >  Subtract a matrix from a scala",
            "title": "minus"
        },
        {
            "location": "/Reference_API_Docs/koma/kotlin.-int/plus/index.html",
            "text": "api\n / \nkoma\n / \nkotlin.Int\n / \nplus\n\n\nplus\n\n\noperator fun\nInt\n.plus(other:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\n\n\nAdd a scalar to a matrix",
            "title": "Plus"
        },
        {
            "location": "/Reference_API_Docs/koma/kotlin.-int/plus/index.html#plus",
            "text": "operator fun Int .plus(other: Matrix < Double >): Matrix < Double >  Add a scalar to a matrix",
            "title": "plus"
        },
        {
            "location": "/Reference_API_Docs/koma/kotlin.-int/times/index.html",
            "text": "api\n / \nkoma\n / \nkotlin.Int\n / \ntimes\n\n\ntimes\n\n\noperator fun\nInt\n.times(other:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\n\n\nMultiply a scalar by a matrix",
            "title": "Times"
        },
        {
            "location": "/Reference_API_Docs/koma/kotlin.-int/times/index.html#times",
            "text": "operator fun Int .times(other: Matrix < Double >): Matrix < Double >  Multiply a scalar by a matrix",
            "title": "times"
        },
        {
            "location": "/Reference_API_Docs/koma/mat/get/index.html",
            "text": "api\n / \nkoma\n / \nmat\n / \nget\n\n\nget\n\n\noperator fun get(vararg ts:\nAny\n):\nMatrix\n<\nDouble\n>\n\n\nSee \nmat\n description.",
            "title": "Get"
        },
        {
            "location": "/Reference_API_Docs/koma/mat/get/index.html#get",
            "text": "operator fun get(vararg ts: Any ): Matrix < Double >  See  mat  description.",
            "title": "get"
        },
        {
            "location": "/Reference_API_Docs/koma/mat/index.html",
            "text": "api\n / \nkoma\n / \nmat\n\n\nmat\n\n\nobject mat\n\n\nA helper object that allows for quick construction of matrix literals.\n\n\nFor example, one can write\n\n\nvar a = mat[1,2,3 end\n            4,5,6]\n\n\n\n\nto get a 2x3 \nMatrix\n with the given values. end is a helper object that indicates the end of a row\nto this object. Note that one currently cannot use this function to generate a column vector:\n\n\n// ERROR:\n\n\nmat[1 end 2 end 3]\n\n\nInstead do this:\n\n\n// Define a column vector by transposing a row-vector\n\n\nmat[1 2 3].T\n\n\nFunctions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nget\n\n\noperator fun get(vararg ts:\nAny\n):\nMatrix\n<\nDouble\n>\nSee mat description.",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma/mat/index.html#mat",
            "text": "object mat  A helper object that allows for quick construction of matrix literals.  For example, one can write  var a = mat[1,2,3 end\n            4,5,6]  to get a 2x3  Matrix  with the given values. end is a helper object that indicates the end of a row\nto this object. Note that one currently cannot use this function to generate a column vector:  // ERROR:  mat[1 end 2 end 3]  Instead do this:  // Define a column vector by transposing a row-vector  mat[1 2 3].T",
            "title": "mat"
        },
        {
            "location": "/Reference_API_Docs/koma/mat/index.html#functions",
            "text": "Name  Summary      get  operator fun get(vararg ts: Any ): Matrix < Double > See mat description.",
            "title": "Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix-type/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrixType\n\n\nMatrixType\n\n\ntypealias MatrixType<T> = () ->\nMatrixFactory\n<\nMatrix\n<T>>",
            "title": " matrix type"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix-type/index.html#matrixtype",
            "text": "typealias MatrixType<T> = () -> MatrixFactory < Matrix <T>>",
            "title": "MatrixType"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/index.html",
            "text": "api\n / \nkoma.matrix\n\n\nPackage koma.matrix\n\n\nInterfaces for the abstract Matrix and MatrixFactory types which are implemented by various computation backends.\n\n\nTypes\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nMatrix\n\n\ninterface Matrix<T>\nA general facade for a Matrix type. Allows for various backend to be implemented to actually perform the computation. A koma backend must both implement this class and MatrixFactory. A matrix is guaranteed to be 2D and to have a numerical type. For storage of arbitrary types and dimensions, see \nkoma.ndarray.NDArray\n.\n\n\n\n\n\n\nMatrixFactory\n\n\ninterface MatrixFactory<out T>\nA set of constructors that must be implemented by a koma backend. Generates various types of matrices. Generic parameter is the type of element, i.e. T=Matrix or T=Matrix, etc.\n\n\n\n\n\n\nMatrixTypes\n\n\nobject MatrixTypes\nIntended to be used as a parameter to functions, when selection of matrix type is needed. (e.g. creators.kt which return Matrix for a requested T).\n\n\n\n\n\n\n\n\nType Aliases\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nMatrixType\n\n\ntypealias MatrixType<T> = () ->\nMatrixFactory\n<\nMatrix\n<T>>",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/index.html#package-komamatrix",
            "text": "Interfaces for the abstract Matrix and MatrixFactory types which are implemented by various computation backends.",
            "title": "Package koma.matrix"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/index.html#types",
            "text": "Name  Summary      Matrix  interface Matrix<T> A general facade for a Matrix type. Allows for various backend to be implemented to actually perform the computation. A koma backend must both implement this class and MatrixFactory. A matrix is guaranteed to be 2D and to have a numerical type. For storage of arbitrary types and dimensions, see  koma.ndarray.NDArray .    MatrixFactory  interface MatrixFactory<out T> A set of constructors that must be implemented by a koma backend. Generates various types of matrices. Generic parameter is the type of element, i.e. T=Matrix or T=Matrix, etc.    MatrixTypes  object MatrixTypes Intended to be used as a parameter to functions, when selection of matrix type is needed. (e.g. creators.kt which return Matrix for a requested T).",
            "title": "Types"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/index.html#type-aliases",
            "text": "Name  Summary      MatrixType  typealias MatrixType<T> = () -> MatrixFactory < Matrix <T>>",
            "title": "Type Aliases"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/-l-u/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nLU\n\n\nLU\n\n\nabstract fun LU(): <ERROR CLASS><\nMatrix\n<T>,\nMatrix\n<T>,\nMatrix\n<T>>",
            "title": " l u"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/-l-u/index.html#lu",
            "text": "abstract fun LU(): <ERROR CLASS>< Matrix <T>, Matrix <T>, Matrix <T>>",
            "title": "LU"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/-q-r/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nQR\n\n\nQR\n\n\nabstract fun QR(): <ERROR CLASS><\nMatrix\n<T>,\nMatrix\n<T>>",
            "title": " q r"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/-q-r/index.html#qr",
            "text": "abstract fun QR(): <ERROR CLASS>< Matrix <T>, Matrix <T>>",
            "title": "QR"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/-t/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nT\n\n\nT\n\n\nabstract fun T():\nMatrix\n<T>\n\n\nopen val T:\nMatrix\n<T>\n\n\nTranspose operator.",
            "title": " t"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/-t/index.html#t",
            "text": "abstract fun T(): Matrix <T>  open val T: Matrix <T>  Transpose operator.",
            "title": "T"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/all/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nall\n\n\nall\n\n\nopen fun all(f: (T) ->\nBoolean\n):\nBoolean\n\n\nChecks to see if all elements cause f to return true.\n\n\nParameters\n\n\nf\n - A function which takes in an element from the matrix and returns a Boolean.\n\n\nReturn\n\nReturns true only if f is true for all elements of the input matrix",
            "title": "All"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/all/index.html#all",
            "text": "open fun all(f: (T) -> Boolean ): Boolean  Checks to see if all elements cause f to return true.",
            "title": "all"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/all/index.html#parameters",
            "text": "f  - A function which takes in an element from the matrix and returns a Boolean.  Return \nReturns true only if f is true for all elements of the input matrix",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/any/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nany\n\n\nany\n\n\nopen fun any(f: (T) ->\nBoolean\n):\nBoolean\n\n\nChecks to see if any element in the matrix causes f to return true.\n\n\nParameters\n\n\nf\n - A function which takes in an element from the matrix and returns a Boolean.\n\n\nReturn\n\nWhether or not any element, when passed into f, causes f to return true.",
            "title": "Any"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/any/index.html#any",
            "text": "open fun any(f: (T) -> Boolean ): Boolean  Checks to see if any element in the matrix causes f to return true.",
            "title": "any"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/any/index.html#parameters",
            "text": "f  - A function which takes in an element from the matrix and returns a Boolean.  Return \nWhether or not any element, when passed into f, causes f to return true.",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/arg-max/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nargMax\n\n\nargMax\n\n\nabstract fun argMax():\nInt\n\n\nRow major 1D index.",
            "title": "Arg max"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/arg-max/index.html#argmax",
            "text": "abstract fun argMax(): Int  Row major 1D index.",
            "title": "argMax"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/arg-min/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nargMin\n\n\nargMin\n\n\nabstract fun argMin():\nInt\n\n\nRow major 1D index.",
            "title": "Arg min"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/arg-min/index.html#argmin",
            "text": "abstract fun argMin(): Int  Row major 1D index.",
            "title": "argMin"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/as-col-vector/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nasColVector\n\n\nasColVector\n\n\nopen fun asColVector():\nMatrix\n<T>\n\n\nReturns the given vector as a row vector. Will call transpose() on row vectors",
            "title": "As col vector"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/as-col-vector/index.html#ascolvector",
            "text": "open fun asColVector(): Matrix <T>  Returns the given vector as a row vector. Will call transpose() on row vectors",
            "title": "asColVector"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/as-row-vector/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nasRowVector\n\n\nasRowVector\n\n\nopen fun asRowVector():\nMatrix\n<T>\n\n\nReturns the given vector as a row vector. Will call transpose() on column vectors",
            "title": "As row vector"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/as-row-vector/index.html#asrowvector",
            "text": "open fun asRowVector(): Matrix <T>  Returns the given vector as a row vector. Will call transpose() on column vectors",
            "title": "asRowVector"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/chol/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nchol\n\n\nchol\n\n\nabstract fun chol():\nMatrix\n<T>",
            "title": "Chol"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/chol/index.html#chol",
            "text": "abstract fun chol(): Matrix <T>",
            "title": "chol"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/copy/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \ncopy\n\n\ncopy\n\n\nabstract fun copy():\nMatrix\n<T>",
            "title": "Copy"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/copy/index.html#copy",
            "text": "abstract fun copy(): Matrix <T>",
            "title": "copy"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/cum-sum/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \ncumSum\n\n\ncumSum\n\n\nopen fun cumSum():\nMatrix\n<T>\n\n\nCalculates the cumulative (ongoing) sum of a matrix's elements. For example,\n\ncumsum(mat[1,2,3])\n would return \nmat[1,3,6]\n. Assumes matrix type is convertible to\ndouble.\n\n\n@return A 1xarr.numRows*arr.numCols vector storing the ongoing cumsum.",
            "title": "Cum sum"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/cum-sum/index.html#cumsum",
            "text": "open fun cumSum(): Matrix <T>  Calculates the cumulative (ongoing) sum of a matrix's elements. For example, cumsum(mat[1,2,3])  would return  mat[1,3,6] . Assumes matrix type is convertible to\ndouble.  @return A 1xarr.numRows*arr.numCols vector storing the ongoing cumsum.",
            "title": "cumSum"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/det/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \ndet\n\n\ndet\n\n\nabstract fun det(): T",
            "title": "Det"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/det/index.html#det",
            "text": "abstract fun det(): T",
            "title": "det"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/diag/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \ndiag\n\n\ndiag\n\n\nabstract fun diag():\nMatrix\n<T>",
            "title": "Diag"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/diag/index.html#diag",
            "text": "abstract fun diag(): Matrix <T>",
            "title": "diag"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/div/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \ndiv\n\n\ndiv\n\n\nabstract operator fun div(other:\nInt\n):\nMatrix\n<T>\n\n\nabstract operator fun div(other: T):\nMatrix\n<T>",
            "title": "Div"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/div/index.html#div",
            "text": "abstract operator fun div(other: Int ): Matrix <T>  abstract operator fun div(other: T): Matrix <T>",
            "title": "div"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/each-col/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \neachCol\n\n\neachCol\n\n\nopen fun ~~eachCol~~(f: (\nMatrix\n<T>) ->\nUnit\n):\nUnit\n\n\nDeprecated:\n Use forEachCol",
            "title": "Each col"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/each-col/index.html#eachcol",
            "text": "open fun ~~eachCol~~(f: ( Matrix <T>) -> Unit ): Unit  Deprecated:  Use forEachCol",
            "title": "eachCol"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/each-indexed/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \neachIndexed\n\n\neachIndexed\n\n\nopen fun ~~eachIndexed~~(f: (row:\nInt\n, col:\nInt\n, ele: T) ->\nUnit\n):\nUnit\n\n\nDeprecated:\n Use forEachIndexed",
            "title": "Each indexed"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/each-indexed/index.html#eachindexed",
            "text": "open fun ~~eachIndexed~~(f: (row: Int , col: Int , ele: T) -> Unit ): Unit  Deprecated:  Use forEachIndexed",
            "title": "eachIndexed"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/each-row/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \neachRow\n\n\neachRow\n\n\nopen fun ~~eachRow~~(f: (\nMatrix\n<T>) ->\nUnit\n):\nUnit\n\n\nDeprecated:\n Use forEachRow",
            "title": "Each row"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/each-row/index.html#eachrow",
            "text": "open fun ~~eachRow~~(f: ( Matrix <T>) -> Unit ): Unit  Deprecated:  Use forEachRow",
            "title": "eachRow"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/each/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \neach\n\n\neach\n\n\nopen fun ~~each~~(f: (T) ->\nUnit\n):\nUnit\n\n\nDeprecated:\n Use forEach",
            "title": "Each"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/each/index.html#each",
            "text": "open fun ~~each~~(f: (T) -> Unit ): Unit  Deprecated:  Use forEach",
            "title": "each"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/element-sum/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nelementSum\n\n\nelementSum\n\n\nabstract fun elementSum(): T",
            "title": "Element sum"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/element-sum/index.html#elementsum",
            "text": "abstract fun elementSum(): T",
            "title": "elementSum"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/element-times/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nelementTimes\n\n\nelementTimes\n\n\nabstract fun elementTimes(other:\nMatrix\n<T>):\nMatrix\n<T>",
            "title": "Element times"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/element-times/index.html#elementtimes",
            "text": "abstract fun elementTimes(other: Matrix <T>): Matrix <T>",
            "title": "elementTimes"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/epow/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nepow\n\n\nepow\n\n\nabstract fun epow(other: T):\nMatrix\n<T>\n\n\nabstract infix fun epow(other:\nInt\n):\nMatrix\n<T>",
            "title": "Epow"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/epow/index.html#epow",
            "text": "abstract fun epow(other: T): Matrix <T>  abstract infix fun epow(other: Int ): Matrix <T>",
            "title": "epow"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/expm/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nexpm\n\n\nexpm\n\n\nabstract fun expm():\nMatrix\n<T>",
            "title": "Expm"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/expm/index.html#expm",
            "text": "abstract fun expm(): Matrix <T>",
            "title": "expm"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/fill/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nfill\n\n\nfill\n\n\nopen fun fill(f: (row:\nInt\n, col:\nInt\n) -> T):\nMatrix\n<T>\n\n\nFills the matrix with the values returned by the input function.\n\n\nParameters\n\n\nf\n - A function which takes row,col and returns the value to fill. Note that\nthe return type must be the matrix primitive type (e.g. Double).",
            "title": "Fill"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/fill/index.html#fill",
            "text": "open fun fill(f: (row: Int , col: Int ) -> T): Matrix <T>  Fills the matrix with the values returned by the input function.",
            "title": "fill"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/fill/index.html#parameters",
            "text": "f  - A function which takes row,col and returns the value to fill. Note that\nthe return type must be the matrix primitive type (e.g. Double).",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/for-each-col/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nforEachCol\n\n\nforEachCol\n\n\nopen fun forEachCol(f: (\nMatrix\n<T>) ->\nUnit\n):\nUnit\n\n\nPasses each col from left to right into a function.\n\n\nParameters\n\n\nf\n - A function that takes in a row (i.e. 1xN matrix)",
            "title": "For each col"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/for-each-col/index.html#foreachcol",
            "text": "open fun forEachCol(f: ( Matrix <T>) -> Unit ): Unit  Passes each col from left to right into a function.",
            "title": "forEachCol"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/for-each-col/index.html#parameters",
            "text": "f  - A function that takes in a row (i.e. 1xN matrix)",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/for-each-indexed/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nforEachIndexed\n\n\nforEachIndexed\n\n\nopen fun forEachIndexed(f: (row:\nInt\n, col:\nInt\n, ele: T) ->\nUnit\n):\nUnit\n\n\nPasses each element in row major order into a function along with its index location.\n\n\nParameters\n\n\nf\n - A function that takes in a row,col position and an element value",
            "title": "For each indexed"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/for-each-indexed/index.html#foreachindexed",
            "text": "open fun forEachIndexed(f: (row: Int , col: Int , ele: T) -> Unit ): Unit  Passes each element in row major order into a function along with its index location.",
            "title": "forEachIndexed"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/for-each-indexed/index.html#parameters",
            "text": "f  - A function that takes in a row,col position and an element value",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/for-each-row/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nforEachRow\n\n\nforEachRow\n\n\nopen fun forEachRow(f: (\nMatrix\n<T>) ->\nUnit\n):\nUnit\n\n\nPasses each row from top to bottom into a function.\n\n\nParameters\n\n\nf\n - A function that takes in a row (i.e. 1xN matrix)",
            "title": "For each row"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/for-each-row/index.html#foreachrow",
            "text": "open fun forEachRow(f: ( Matrix <T>) -> Unit ): Unit  Passes each row from top to bottom into a function.",
            "title": "forEachRow"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/for-each-row/index.html#parameters",
            "text": "f  - A function that takes in a row (i.e. 1xN matrix)",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/for-each/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nforEach\n\n\nforEach\n\n\nopen fun forEach(f: (T) ->\nUnit\n):\nUnit\n\n\nPasses each element in row major order into a function.\n\n\nParameters\n\n\nf\n - A function that takes in an element",
            "title": "For each"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/for-each/index.html#foreach",
            "text": "open fun forEach(f: (T) -> Unit ): Unit  Passes each element in row major order into a function.",
            "title": "forEach"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/for-each/index.html#parameters",
            "text": "f  - A function that takes in an element",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/get-base-matrix/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \ngetBaseMatrix\n\n\ngetBaseMatrix\n\n\nabstract fun getBaseMatrix():\nAny\n\n\nReturns the underlying matrix object from the back-end this Matrix is wrapping. This should be used\nsparingly (as it breaks encapsulation), but it can increase performance by using computation specifically\ndesigned for a particular back-end. Code using this method should not rely on a particular back-end, and\nshould always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use \nget\n and \nset\n)\nto access the elements generically).",
            "title": "Get base matrix"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/get-base-matrix/index.html#getbasematrix",
            "text": "abstract fun getBaseMatrix(): Any  Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used\nsparingly (as it breaks encapsulation), but it can increase performance by using computation specifically\ndesigned for a particular back-end. Code using this method should not rely on a particular back-end, and\nshould always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use  get  and  set )\nto access the elements generically).",
            "title": "getBaseMatrix"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/get-col/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \ngetCol\n\n\ngetCol\n\n\nabstract fun getCol(col:\nInt\n):\nMatrix\n<T>",
            "title": "Get col"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/get-col/index.html#getcol",
            "text": "abstract fun getCol(col: Int ): Matrix <T>",
            "title": "getCol"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/get-double-data/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \ngetDoubleData\n\n\ngetDoubleData\n\n\nabstract fun getDoubleData():\nDoubleArray\n\n\nRetrieves the data formatted as doubles in row-major order\nThis method is only for performance over potentially boxing get(Double)\nmethods. This method may or may not return a copy, and thus should be\ntreated as read-only unless backend behavior is known.",
            "title": "Get double data"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/get-double-data/index.html#getdoubledata",
            "text": "abstract fun getDoubleData(): DoubleArray  Retrieves the data formatted as doubles in row-major order\nThis method is only for performance over potentially boxing get(Double)\nmethods. This method may or may not return a copy, and thus should be\ntreated as read-only unless backend behavior is known.",
            "title": "getDoubleData"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/get-double/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \ngetDouble\n\n\ngetDouble\n\n\nabstract fun getDouble(i:\nInt\n, j:\nInt\n):\nDouble\n\n\nabstract fun getDouble(i:\nInt\n):\nDouble",
            "title": "Get double"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/get-double/index.html#getdouble",
            "text": "abstract fun getDouble(i: Int , j: Int ): Double  abstract fun getDouble(i: Int ): Double",
            "title": "getDouble"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/get-factory/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \ngetFactory\n\n\ngetFactory\n\n\nabstract fun getFactory():\nMatrixFactory\n<\nMatrix\n<T>>\n\n\nBecause sometimes all you have is a Matrix, but you really want a MatrixFactory.",
            "title": "Get factory"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/get-factory/index.html#getfactory",
            "text": "abstract fun getFactory(): MatrixFactory < Matrix <T>>  Because sometimes all you have is a Matrix, but you really want a MatrixFactory.",
            "title": "getFactory"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/get-float/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \ngetFloat\n\n\ngetFloat\n\n\nabstract fun getFloat(i:\nInt\n, j:\nInt\n):\nFloat\n\n\nabstract fun getFloat(i:\nInt\n):\nFloat",
            "title": "Get float"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/get-float/index.html#getfloat",
            "text": "abstract fun getFloat(i: Int , j: Int ): Float  abstract fun getFloat(i: Int ): Float",
            "title": "getFloat"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/get-generic/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \ngetGeneric\n\n\ngetGeneric\n\n\nabstract fun getGeneric(i:\nInt\n, j:\nInt\n): T\n\n\nabstract fun getGeneric(i:\nInt\n): T",
            "title": "Get generic"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/get-generic/index.html#getgeneric",
            "text": "abstract fun getGeneric(i: Int , j: Int ): T  abstract fun getGeneric(i: Int ): T",
            "title": "getGeneric"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/get-int/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \ngetInt\n\n\ngetInt\n\n\nabstract fun getInt(i:\nInt\n, j:\nInt\n):\nInt\n\n\nabstract fun getInt(i:\nInt\n):\nInt",
            "title": "Get int"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/get-int/index.html#getint",
            "text": "abstract fun getInt(i: Int , j: Int ): Int  abstract fun getInt(i: Int ): Int",
            "title": "getInt"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/get-row/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \ngetRow\n\n\ngetRow\n\n\nabstract fun getRow(row:\nInt\n):\nMatrix\n<T>",
            "title": "Get row"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/get-row/index.html#getrow",
            "text": "abstract fun getRow(row: Int ): Matrix <T>",
            "title": "getRow"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n\n\nMatrix\n\n\ninterface Matrix<T>\n\n\nA general facade for a Matrix type. Allows for various backend to be\nimplemented to actually perform the computation. A koma backend must both\nimplement this class and MatrixFactory. A matrix is guaranteed to be 2D and\nto have a numerical type. For storage of arbitrary types and dimensions, see\n\nkoma.ndarray.NDArray\n.\n\n\nProperties\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nT\n\n\nopen val T: Matrix<T>\nTranspose operator.\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nLU\n\n\nabstract fun LU(): <ERROR CLASS><Matrix<T>, Matrix<T>, Matrix<T>>\n\n\n\n\n\n\nQR\n\n\nabstract fun QR(): <ERROR CLASS><Matrix<T>, Matrix<T>>\n\n\n\n\n\n\nT\n\n\nabstract fun T(): Matrix<T>\nTranspose operator.\n\n\n\n\n\n\nall\n\n\nopen fun all(f: (T) ->\nBoolean\n):\nBoolean\nChecks to see if all elements cause f to return true.\n\n\n\n\n\n\nany\n\n\nopen fun any(f: (T) ->\nBoolean\n):\nBoolean\nChecks to see if any element in the matrix causes f to return true.\n\n\n\n\n\n\nargMax\n\n\nabstract fun argMax():\nInt\nRow major 1D index.\n\n\n\n\n\n\nargMin\n\n\nabstract fun argMin():\nInt\nRow major 1D index.\n\n\n\n\n\n\nasColVector\n\n\nopen fun asColVector(): Matrix<T>\nReturns the given vector as a row vector. Will call transpose() on row vectors\n\n\n\n\n\n\nasRowVector\n\n\nopen fun asRowVector(): Matrix<T>\nReturns the given vector as a row vector. Will call transpose() on column vectors\n\n\n\n\n\n\nchol\n\n\nabstract fun chol(): Matrix<T>\n\n\n\n\n\n\ncopy\n\n\nabstract fun copy(): Matrix<T>\n\n\n\n\n\n\ncumSum\n\n\nopen fun cumSum(): Matrix<T>\nCalculates the cumulative (ongoing) sum of a matrix's elements. For example, \ncumsum(mat[1,2,3])\n would return \nmat[1,3,6]\n. Assumes matrix type is convertible to double.\n\n\n\n\n\n\ndet\n\n\nabstract fun det(): T\n\n\n\n\n\n\ndiag\n\n\nabstract fun diag(): Matrix<T>\n\n\n\n\n\n\ndiv\n\n\nabstract operator fun div(other:\nInt\n): Matrix<T>\nabstract operator fun div(other: T): Matrix<T>\n\n\n\n\n\n\neach\n\n\nopen fun ~~each~~(f: (T) ->\nUnit\n):\nUnit\n\n\n\n\n\n\neachCol\n\n\nopen fun ~~eachCol~~(f: (Matrix<T>) ->\nUnit\n):\nUnit\n\n\n\n\n\n\neachIndexed\n\n\nopen fun ~~eachIndexed~~(f: (row:\nInt\n, col:\nInt\n, ele: T) ->\nUnit\n):\nUnit\n\n\n\n\n\n\neachRow\n\n\nopen fun ~~eachRow~~(f: (Matrix<T>) ->\nUnit\n):\nUnit\n\n\n\n\n\n\nelementSum\n\n\nabstract fun elementSum(): T\n\n\n\n\n\n\nelementTimes\n\n\nabstract fun elementTimes(other: Matrix<T>): Matrix<T>\n\n\n\n\n\n\nepow\n\n\nabstract fun epow(other: T): Matrix<T>\nabstract infix fun epow(other:\nInt\n): Matrix<T>\n\n\n\n\n\n\nexpm\n\n\nabstract fun expm(): Matrix<T>\n\n\n\n\n\n\nfill\n\n\nopen fun fill(f: (row:\nInt\n, col:\nInt\n) -> T): Matrix<T>\nFills the matrix with the values returned by the input function.\n\n\n\n\n\n\nforEach\n\n\nopen fun forEach(f: (T) ->\nUnit\n):\nUnit\nPasses each element in row major order into a function.\n\n\n\n\n\n\nforEachCol\n\n\nopen fun forEachCol(f: (Matrix<T>) ->\nUnit\n):\nUnit\nPasses each col from left to right into a function.\n\n\n\n\n\n\nforEachIndexed\n\n\nopen fun forEachIndexed(f: (row:\nInt\n, col:\nInt\n, ele: T) ->\nUnit\n):\nUnit\nPasses each element in row major order into a function along with its index location.\n\n\n\n\n\n\nforEachRow\n\n\nopen fun forEachRow(f: (Matrix<T>) ->\nUnit\n):\nUnit\nPasses each row from top to bottom into a function.\n\n\n\n\n\n\ngetBaseMatrix\n\n\nabstract fun getBaseMatrix():\nAny\nReturns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use \nget\n and \nset\n) to access the elements generically).\n\n\n\n\n\n\ngetCol\n\n\nabstract fun getCol(col:\nInt\n): Matrix<T>\n\n\n\n\n\n\ngetDouble\n\n\nabstract fun getDouble(i:\nInt\n, j:\nInt\n):\nDouble\nabstract fun getDouble(i:\nInt\n):\nDouble\n\n\n\n\n\n\ngetDoubleData\n\n\nabstract fun getDoubleData():\nDoubleArray\nRetrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known.\n\n\n\n\n\n\ngetFactory\n\n\nabstract fun getFactory():\nMatrixFactory\n<Matrix<T>>\nBecause sometimes all you have is a Matrix, but you really want a MatrixFactory.\n\n\n\n\n\n\ngetFloat\n\n\nabstract fun getFloat(i:\nInt\n, j:\nInt\n):\nFloat\nabstract fun getFloat(i:\nInt\n):\nFloat\n\n\n\n\n\n\ngetGeneric\n\n\nabstract fun getGeneric(i:\nInt\n, j:\nInt\n): T\nabstract fun getGeneric(i:\nInt\n): T\n\n\n\n\n\n\ngetInt\n\n\nabstract fun getInt(i:\nInt\n, j:\nInt\n):\nInt\nabstract fun getInt(i:\nInt\n):\nInt\n\n\n\n\n\n\ngetRow\n\n\nabstract fun getRow(row:\nInt\n): Matrix<T>\n\n\n\n\n\n\ninv\n\n\nabstract fun inv(): Matrix<T>\n\n\n\n\n\n\nmap\n\n\nopen fun map(f: (T) -> T): Matrix<T>\nTakes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order.\n\n\n\n\n\n\nmapCols\n\n\nopen fun mapCols(f: (Matrix<T>) -> Matrix<T>): Matrix<T>\nTakes each col in a matrix, passes them through f, and puts the output of f into a col of an output matrix.\n\n\n\n\n\n\nmapColsToList\n\n\nopen fun <U> mapColsToList(f: (Matrix<T>) -> U):\nList\n<U>\nTakes each col in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapCols, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings.\n\n\n\n\n\n\nmapIndexed\n\n\nopen fun mapIndexed(f: (row:\nInt\n, col:\nInt\n, ele: T) -> T): Matrix<T>\nTakes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order.\n\n\n\n\n\n\nmapMat\n\n\nopen fun ~~mapMat~~(f: (T) -> T): Matrix<T>\n\n\n\n\n\n\nmapMatIndexed\n\n\nopen fun ~~mapMatIndexed~~(f: (row:\nInt\n, col:\nInt\n, ele: T) -> T): Matrix<T>\n\n\n\n\n\n\nmapRows\n\n\nopen fun mapRows(f: (Matrix<T>) -> Matrix<T>): Matrix<T>\nTakes each row in a matrix, passes them through f, and puts the output of f into a row of an output matrix.\n\n\n\n\n\n\nmapRowsToList\n\n\nopen fun <U> mapRowsToList(f: (Matrix<T>) -> U):\nList\n<U>\nTakes each row in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapRows, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings.\n\n\n\n\n\n\nmax\n\n\nabstract fun max(): T\n\n\n\n\n\n\nmean\n\n\nabstract fun mean(): T\n\n\n\n\n\n\nmin\n\n\nabstract fun min(): T\n\n\n\n\n\n\nminus\n\n\nabstract operator fun minus(other: T): Matrix<T>\nabstract operator fun minus(other: Matrix<T>): Matrix<T>\n\n\n\n\n\n\nnorm\n\n\nabstract fun norm(): T\n\n\n\n\n\n\nnormF\n\n\nabstract fun normF(): T\n\n\n\n\n\n\nnormIndP1\n\n\nabstract fun normIndP1(): T\n\n\n\n\n\n\nnumCols\n\n\nabstract fun numCols():\nInt\n\n\n\n\n\n\nnumRows\n\n\nabstract fun numRows():\nInt\n\n\n\n\n\n\npinv\n\n\nabstract fun pinv(): Matrix<T>\n\n\n\n\n\n\nplus\n\n\nabstract operator fun plus(other: T): Matrix<T>\nabstract operator fun plus(other: Matrix<T>): Matrix<T>\n\n\n\n\n\n\npow\n\n\nopen infix fun pow(exponent:\nInt\n): Matrix<T>\n\n\n\n\n\n\nrem\n\n\nabstract operator fun rem(other: Matrix<T>): Matrix<T>\n\n\n\n\n\n\nrepr\n\n\nopen fun repr():\nString\n\n\n\n\n\n\nselectCols\n\n\nopen fun selectCols(vararg idxs:\nInt\n): Matrix<T>\nSelect a set of cols from a matrix to form the cols of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth cols of an input matrix, you would write \ninput.selectCols(0,1,4)\n.\nopen fun <U :\nNumber\n> selectCols(idxs: Matrix<U>): Matrix<T>\n\n\n\n\n\n\nselectRows\n\n\nopen fun selectRows(vararg idxs:\nInt\n): Matrix<T>\nSelect a set of rows from a matrix to form the rows of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth rows of an input matrix, you would write \ninput.selectRows(0,1,4)\n.\nopen fun <U :\nNumber\n> selectRows(idxs: Matrix<U>): Matrix<T>\n\n\n\n\n\n\nsetCol\n\n\nabstract fun setCol(index:\nInt\n, col: Matrix<T>):\nUnit\n\n\n\n\n\n\nsetDouble\n\n\nabstract fun setDouble(i:\nInt\n, v:\nDouble\n):\nUnit\nabstract fun setDouble(i:\nInt\n, j:\nInt\n, v:\nDouble\n):\nUnit\n\n\n\n\n\n\nsetFloat\n\n\nabstract fun setFloat(i:\nInt\n, v:\nFloat\n):\nUnit\nabstract fun setFloat(i:\nInt\n, j:\nInt\n, v:\nFloat\n):\nUnit\n\n\n\n\n\n\nsetGeneric\n\n\nabstract fun setGeneric(i:\nInt\n, j:\nInt\n, v: T):\nUnit\nabstract fun setGeneric(i:\nInt\n, v: T):\nUnit\n\n\n\n\n\n\nsetInt\n\n\nabstract fun setInt(i:\nInt\n, v:\nInt\n):\nUnit\nabstract fun setInt(i:\nInt\n, j:\nInt\n, v:\nInt\n):\nUnit\n\n\n\n\n\n\nsetRow\n\n\nabstract fun setRow(index:\nInt\n, row: Matrix<T>):\nUnit\n\n\n\n\n\n\nsolve\n\n\nabstract fun solve(A: Matrix<T>, B: Matrix<T>): Matrix<T>\n\n\n\n\n\n\ntimes\n\n\nabstract operator fun times(other: Matrix<T>): Matrix<T>\nabstract operator fun times(other: T): Matrix<T>\n\n\n\n\n\n\nto2DArray\n\n\nopen fun to2DArray():\nArray\n<\nDoubleArray\n>\nReturns a Matrix as a double 2D array. Intended for MATLAB interop.\n\n\n\n\n\n\ntoIterable\n\n\nopen fun toIterable():\nIterable\n<T>\n\n\n\n\n\n\ntrace\n\n\nabstract fun trace(): T\n\n\n\n\n\n\ntranspose\n\n\nabstract fun transpose(): Matrix<T>\n\n\n\n\n\n\nunaryMinus\n\n\nabstract operator fun unaryMinus(): Matrix<T>\n\n\n\n\n\n\nwrapRange\n\n\nopen fun wrapRange(range:\nIntRange\n, max:\nInt\n):\nIntRange\n\n\n\n\n\n\n\n\nExtension Functions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nemul\n\n\ninfix fun Matrix<\nDouble\n>.emul(other: Matrix<\nDouble\n>): Matrix<\nDouble\n>\nAllow infix operator \"a emul b\" to be element-wise multiplication of two matrices.\n\n\n\n\n\n\nget\n\n\noperator fun <T> Matrix<T>.get(i:\nInt\n, j:\nInt\n): T\noperator fun Matrix<\nDouble\n>.get(i:\nInt\n):\nDouble\noperator fun Matrix<\nDouble\n>.get(i:\nInt\n, j:\nInt\n):\nDouble\noperator fun <T> Matrix<T>.get(i:\nInt\n): T\nGets the ith element in the matrix. If 2D, selects elements in row-major order.\noperator fun <T> Matrix<T>.get(rows:\nIntRange\n, cols:\nIntRange\n): Matrix<T>\nAllow slicing, e.g. \nmatrix[1..2, 3..4]\n. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.\noperator fun <T> Matrix<T>.get(rows:\nIntRange\n, cols:\nInt\n): Matrix<T>\nAllows for slicing of the rows and selection of a single column\noperator fun <T> Matrix<T>.get(rows:\nInt\n, cols:\nIntRange\n): Matrix<T>\nAllows for slicing of the cols and selection of a single row\n\n\n\n\n\n\nminus\n\n\noperator fun Matrix<\nDouble\n>.minus(value:\nInt\n): Matrix<\nDouble\n>\nAllow operator overloading with non-Double scalars\n\n\n\n\n\n\nplus\n\n\noperator fun Matrix<\nDouble\n>.plus(value:\nInt\n): Matrix<\nDouble\n>\nAllow operator overloading with non-Double scalars\n\n\n\n\n\n\nset\n\n\noperator fun <T> Matrix<T>.set(i:\nInt\n, v: T):\nUnit\nSet the ith element in the matrix. If 2D, selects elements in row-major order.\noperator fun <T> Matrix<T>.set(i:\nInt\n, j:\nInt\n, v: T):\nUnit\noperator fun <T> Matrix<T>.set(rows:\nIntRange\n, cols:\nIntRange\n, value: T):\nUnit\noperator fun <T> Matrix<T>.set(rows:\nInt\n, cols:\nIntRange\n, value: T):\nUnit\noperator fun <T> Matrix<T>.set(rows:\nIntRange\n, cols:\nInt\n, value: T):\nUnit\noperator fun Matrix<\nDouble\n>.set(i:\nInt\n, v:\nDouble\n):\nUnit\noperator fun Matrix<\nDouble\n>.set(i:\nInt\n, j:\nInt\n, v:\nDouble\n):\nUnit\noperator fun Matrix<\nDouble\n>.set(i:\nInt\n, v:\nInt\n):\nUnit\noperator fun Matrix<\nDouble\n>.set(i:\nInt\n, j:\nInt\n, v:\nInt\n):\nUnit\noperator fun <T> Matrix<T>.set(rows:\nIntRange\n, cols:\nIntRange\n, value: Matrix<T>):\nUnit\nAllow assignment to a slice, e.g. \nmatrix[1..2, 3..4]\n=something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.\noperator fun <T> Matrix<T>.set(rows:\nInt\n, cols:\nIntRange\n, value: Matrix<T>):\nUnit\nAllow assignment to a slice, e.g. \nmatrix[2, 3..4]\n=something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range.\noperator fun <T> Matrix<T>.set(rows:\nIntRange\n, cols:\nInt\n, value: Matrix<T>):\nUnit\nAllow assignment to a slice, e.g. \nmatrix[1..2, 3]\n=something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.\n\n\n\n\n\n\ntimes\n\n\noperator fun Matrix<\nDouble\n>.times(other:\nInt\n): Matrix<\nDouble\n>\nMultiply a scalar by a matrix\n\n\n\n\n\n\n\n\nInheritors\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nDefaultDoubleMatrix\n\n\nclass DefaultDoubleMatrix : Matrix<\nDouble\n>\n\n\n\n\n\n\nDefaultFloatMatrix\n\n\nclass DefaultFloatMatrix : Matrix<\nFloat\n>\n\n\n\n\n\n\nDefaultIntMatrix\n\n\nclass DefaultIntMatrix : Matrix<\nInt\n>\n\n\n\n\n\n\nDefaultLongMatrix\n\n\nclass DefaultLongMatrix : Matrix<\nLong\n>\n\n\n\n\n\n\nMatrixBase\n\n\nabstract class MatrixBase<T> : Matrix<T>",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/index.html#matrix",
            "text": "interface Matrix<T>  A general facade for a Matrix type. Allows for various backend to be\nimplemented to actually perform the computation. A koma backend must both\nimplement this class and MatrixFactory. A matrix is guaranteed to be 2D and\nto have a numerical type. For storage of arbitrary types and dimensions, see koma.ndarray.NDArray .",
            "title": "Matrix"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/index.html#properties",
            "text": "Name  Summary      T  open val T: Matrix<T> Transpose operator.",
            "title": "Properties"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/index.html#functions",
            "text": "Name  Summary      LU  abstract fun LU(): <ERROR CLASS><Matrix<T>, Matrix<T>, Matrix<T>>    QR  abstract fun QR(): <ERROR CLASS><Matrix<T>, Matrix<T>>    T  abstract fun T(): Matrix<T> Transpose operator.    all  open fun all(f: (T) -> Boolean ): Boolean Checks to see if all elements cause f to return true.    any  open fun any(f: (T) -> Boolean ): Boolean Checks to see if any element in the matrix causes f to return true.    argMax  abstract fun argMax(): Int Row major 1D index.    argMin  abstract fun argMin(): Int Row major 1D index.    asColVector  open fun asColVector(): Matrix<T> Returns the given vector as a row vector. Will call transpose() on row vectors    asRowVector  open fun asRowVector(): Matrix<T> Returns the given vector as a row vector. Will call transpose() on column vectors    chol  abstract fun chol(): Matrix<T>    copy  abstract fun copy(): Matrix<T>    cumSum  open fun cumSum(): Matrix<T> Calculates the cumulative (ongoing) sum of a matrix's elements. For example,  cumsum(mat[1,2,3])  would return  mat[1,3,6] . Assumes matrix type is convertible to double.    det  abstract fun det(): T    diag  abstract fun diag(): Matrix<T>    div  abstract operator fun div(other: Int ): Matrix<T> abstract operator fun div(other: T): Matrix<T>    each  open fun ~~each~~(f: (T) -> Unit ): Unit    eachCol  open fun ~~eachCol~~(f: (Matrix<T>) -> Unit ): Unit    eachIndexed  open fun ~~eachIndexed~~(f: (row: Int , col: Int , ele: T) -> Unit ): Unit    eachRow  open fun ~~eachRow~~(f: (Matrix<T>) -> Unit ): Unit    elementSum  abstract fun elementSum(): T    elementTimes  abstract fun elementTimes(other: Matrix<T>): Matrix<T>    epow  abstract fun epow(other: T): Matrix<T> abstract infix fun epow(other: Int ): Matrix<T>    expm  abstract fun expm(): Matrix<T>    fill  open fun fill(f: (row: Int , col: Int ) -> T): Matrix<T> Fills the matrix with the values returned by the input function.    forEach  open fun forEach(f: (T) -> Unit ): Unit Passes each element in row major order into a function.    forEachCol  open fun forEachCol(f: (Matrix<T>) -> Unit ): Unit Passes each col from left to right into a function.    forEachIndexed  open fun forEachIndexed(f: (row: Int , col: Int , ele: T) -> Unit ): Unit Passes each element in row major order into a function along with its index location.    forEachRow  open fun forEachRow(f: (Matrix<T>) -> Unit ): Unit Passes each row from top to bottom into a function.    getBaseMatrix  abstract fun getBaseMatrix(): Any Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use  get  and  set ) to access the elements generically).    getCol  abstract fun getCol(col: Int ): Matrix<T>    getDouble  abstract fun getDouble(i: Int , j: Int ): Double abstract fun getDouble(i: Int ): Double    getDoubleData  abstract fun getDoubleData(): DoubleArray Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known.    getFactory  abstract fun getFactory(): MatrixFactory <Matrix<T>> Because sometimes all you have is a Matrix, but you really want a MatrixFactory.    getFloat  abstract fun getFloat(i: Int , j: Int ): Float abstract fun getFloat(i: Int ): Float    getGeneric  abstract fun getGeneric(i: Int , j: Int ): T abstract fun getGeneric(i: Int ): T    getInt  abstract fun getInt(i: Int , j: Int ): Int abstract fun getInt(i: Int ): Int    getRow  abstract fun getRow(row: Int ): Matrix<T>    inv  abstract fun inv(): Matrix<T>    map  open fun map(f: (T) -> T): Matrix<T> Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order.    mapCols  open fun mapCols(f: (Matrix<T>) -> Matrix<T>): Matrix<T> Takes each col in a matrix, passes them through f, and puts the output of f into a col of an output matrix.    mapColsToList  open fun <U> mapColsToList(f: (Matrix<T>) -> U): List <U> Takes each col in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapCols, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings.    mapIndexed  open fun mapIndexed(f: (row: Int , col: Int , ele: T) -> T): Matrix<T> Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order.    mapMat  open fun ~~mapMat~~(f: (T) -> T): Matrix<T>    mapMatIndexed  open fun ~~mapMatIndexed~~(f: (row: Int , col: Int , ele: T) -> T): Matrix<T>    mapRows  open fun mapRows(f: (Matrix<T>) -> Matrix<T>): Matrix<T> Takes each row in a matrix, passes them through f, and puts the output of f into a row of an output matrix.    mapRowsToList  open fun <U> mapRowsToList(f: (Matrix<T>) -> U): List <U> Takes each row in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapRows, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings.    max  abstract fun max(): T    mean  abstract fun mean(): T    min  abstract fun min(): T    minus  abstract operator fun minus(other: T): Matrix<T> abstract operator fun minus(other: Matrix<T>): Matrix<T>    norm  abstract fun norm(): T    normF  abstract fun normF(): T    normIndP1  abstract fun normIndP1(): T    numCols  abstract fun numCols(): Int    numRows  abstract fun numRows(): Int    pinv  abstract fun pinv(): Matrix<T>    plus  abstract operator fun plus(other: T): Matrix<T> abstract operator fun plus(other: Matrix<T>): Matrix<T>    pow  open infix fun pow(exponent: Int ): Matrix<T>    rem  abstract operator fun rem(other: Matrix<T>): Matrix<T>    repr  open fun repr(): String    selectCols  open fun selectCols(vararg idxs: Int ): Matrix<T> Select a set of cols from a matrix to form the cols of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth cols of an input matrix, you would write  input.selectCols(0,1,4) . open fun <U : Number > selectCols(idxs: Matrix<U>): Matrix<T>    selectRows  open fun selectRows(vararg idxs: Int ): Matrix<T> Select a set of rows from a matrix to form the rows of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth rows of an input matrix, you would write  input.selectRows(0,1,4) . open fun <U : Number > selectRows(idxs: Matrix<U>): Matrix<T>    setCol  abstract fun setCol(index: Int , col: Matrix<T>): Unit    setDouble  abstract fun setDouble(i: Int , v: Double ): Unit abstract fun setDouble(i: Int , j: Int , v: Double ): Unit    setFloat  abstract fun setFloat(i: Int , v: Float ): Unit abstract fun setFloat(i: Int , j: Int , v: Float ): Unit    setGeneric  abstract fun setGeneric(i: Int , j: Int , v: T): Unit abstract fun setGeneric(i: Int , v: T): Unit    setInt  abstract fun setInt(i: Int , v: Int ): Unit abstract fun setInt(i: Int , j: Int , v: Int ): Unit    setRow  abstract fun setRow(index: Int , row: Matrix<T>): Unit    solve  abstract fun solve(A: Matrix<T>, B: Matrix<T>): Matrix<T>    times  abstract operator fun times(other: Matrix<T>): Matrix<T> abstract operator fun times(other: T): Matrix<T>    to2DArray  open fun to2DArray(): Array < DoubleArray > Returns a Matrix as a double 2D array. Intended for MATLAB interop.    toIterable  open fun toIterable(): Iterable <T>    trace  abstract fun trace(): T    transpose  abstract fun transpose(): Matrix<T>    unaryMinus  abstract operator fun unaryMinus(): Matrix<T>    wrapRange  open fun wrapRange(range: IntRange , max: Int ): IntRange",
            "title": "Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/index.html#extension-functions",
            "text": "Name  Summary      emul  infix fun Matrix< Double >.emul(other: Matrix< Double >): Matrix< Double > Allow infix operator \"a emul b\" to be element-wise multiplication of two matrices.    get  operator fun <T> Matrix<T>.get(i: Int , j: Int ): T operator fun Matrix< Double >.get(i: Int ): Double operator fun Matrix< Double >.get(i: Int , j: Int ): Double operator fun <T> Matrix<T>.get(i: Int ): T Gets the ith element in the matrix. If 2D, selects elements in row-major order. operator fun <T> Matrix<T>.get(rows: IntRange , cols: IntRange ): Matrix<T> Allow slicing, e.g.  matrix[1..2, 3..4] . Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun <T> Matrix<T>.get(rows: IntRange , cols: Int ): Matrix<T> Allows for slicing of the rows and selection of a single column operator fun <T> Matrix<T>.get(rows: Int , cols: IntRange ): Matrix<T> Allows for slicing of the cols and selection of a single row    minus  operator fun Matrix< Double >.minus(value: Int ): Matrix< Double > Allow operator overloading with non-Double scalars    plus  operator fun Matrix< Double >.plus(value: Int ): Matrix< Double > Allow operator overloading with non-Double scalars    set  operator fun <T> Matrix<T>.set(i: Int , v: T): Unit Set the ith element in the matrix. If 2D, selects elements in row-major order. operator fun <T> Matrix<T>.set(i: Int , j: Int , v: T): Unit operator fun <T> Matrix<T>.set(rows: IntRange , cols: IntRange , value: T): Unit operator fun <T> Matrix<T>.set(rows: Int , cols: IntRange , value: T): Unit operator fun <T> Matrix<T>.set(rows: IntRange , cols: Int , value: T): Unit operator fun Matrix< Double >.set(i: Int , v: Double ): Unit operator fun Matrix< Double >.set(i: Int , j: Int , v: Double ): Unit operator fun Matrix< Double >.set(i: Int , v: Int ): Unit operator fun Matrix< Double >.set(i: Int , j: Int , v: Int ): Unit operator fun <T> Matrix<T>.set(rows: IntRange , cols: IntRange , value: Matrix<T>): Unit Allow assignment to a slice, e.g.  matrix[1..2, 3..4] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun <T> Matrix<T>.set(rows: Int , cols: IntRange , value: Matrix<T>): Unit Allow assignment to a slice, e.g.  matrix[2, 3..4] =something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range. operator fun <T> Matrix<T>.set(rows: IntRange , cols: Int , value: Matrix<T>): Unit Allow assignment to a slice, e.g.  matrix[1..2, 3] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.    times  operator fun Matrix< Double >.times(other: Int ): Matrix< Double > Multiply a scalar by a matrix",
            "title": "Extension Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/index.html#inheritors",
            "text": "Name  Summary      DefaultDoubleMatrix  class DefaultDoubleMatrix : Matrix< Double >    DefaultFloatMatrix  class DefaultFloatMatrix : Matrix< Float >    DefaultIntMatrix  class DefaultIntMatrix : Matrix< Int >    DefaultLongMatrix  class DefaultLongMatrix : Matrix< Long >    MatrixBase  abstract class MatrixBase<T> : Matrix<T>",
            "title": "Inheritors"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/inv/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \ninv\n\n\ninv\n\n\nabstract fun inv():\nMatrix\n<T>",
            "title": "Inv"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/inv/index.html#inv",
            "text": "abstract fun inv(): Matrix <T>",
            "title": "inv"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/map-cols-to-list/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nmapColsToList\n\n\nmapColsToList\n\n\nopen fun <U> mapColsToList(f: (\nMatrix\n<T>) -> U):\nList\n<U>\n\n\nTakes each col in a matrix, passes them through f, and puts the outputs into a List.\nIn contrast to this#mapCols, the usage of a list as the output container allows for\narbitrary output types, such as taking a double matrix and returning a list of strings.\n\n\nParameters\n\n\nf\n - A function that takes in a Nx1 col and returns a Mx1 col. Note that all output\ncols must be the same length.",
            "title": "Map cols to list"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/map-cols-to-list/index.html#mapcolstolist",
            "text": "open fun <U> mapColsToList(f: ( Matrix <T>) -> U): List <U>  Takes each col in a matrix, passes them through f, and puts the outputs into a List.\nIn contrast to this#mapCols, the usage of a list as the output container allows for\narbitrary output types, such as taking a double matrix and returning a list of strings.",
            "title": "mapColsToList"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/map-cols-to-list/index.html#parameters",
            "text": "f  - A function that takes in a Nx1 col and returns a Mx1 col. Note that all output\ncols must be the same length.",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/map-cols/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nmapCols\n\n\nmapCols\n\n\nopen fun mapCols(f: (\nMatrix\n<T>) ->\nMatrix\n<T>):\nMatrix\n<T>\n\n\nTakes each col in a matrix, passes them through f, and puts the output of f into a\ncol of an output matrix.\n\n\nParameters\n\n\nf\n - A function that takes in a Nx1 col and returns a Mx1 col. Note that all output\ncols must be the same length. In addition, the input and output element types must be the same.\n\n\nReturn\n\nthe new matrix after each col is mapped through f",
            "title": "Map cols"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/map-cols/index.html#mapcols",
            "text": "open fun mapCols(f: ( Matrix <T>) -> Matrix <T>): Matrix <T>  Takes each col in a matrix, passes them through f, and puts the output of f into a\ncol of an output matrix.",
            "title": "mapCols"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/map-cols/index.html#parameters",
            "text": "f  - A function that takes in a Nx1 col and returns a Mx1 col. Note that all output\ncols must be the same length. In addition, the input and output element types must be the same.  Return \nthe new matrix after each col is mapped through f",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/map-indexed/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nmapIndexed\n\n\nmapIndexed\n\n\nopen fun mapIndexed(f: (row:\nInt\n, col:\nInt\n, ele: T) -> T):\nMatrix\n<T>\n\n\nTakes each element in a matrix, passes them through f, and puts the output of f into an\noutput matrix. This process is done in row-major order.\n\n\nParameters\n\n\nf\n - A function that takes in an element and returns an element. Function also takes\n    in the row, col index of the element's location.\n\n\nReturn\n\nthe new matrix after each element is mapped through f",
            "title": "Map indexed"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/map-indexed/index.html#mapindexed",
            "text": "open fun mapIndexed(f: (row: Int , col: Int , ele: T) -> T): Matrix <T>  Takes each element in a matrix, passes them through f, and puts the output of f into an\noutput matrix. This process is done in row-major order.",
            "title": "mapIndexed"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/map-indexed/index.html#parameters",
            "text": "f  - A function that takes in an element and returns an element. Function also takes\n    in the row, col index of the element's location.  Return \nthe new matrix after each element is mapped through f",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/map-mat-indexed/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nmapMatIndexed\n\n\nmapMatIndexed\n\n\nopen fun ~~mapMatIndexed~~(f: (row:\nInt\n, col:\nInt\n, ele: T) -> T):\nMatrix\n<T>\n\n\nDeprecated:\n Use mapIndexed",
            "title": "Map mat indexed"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/map-mat-indexed/index.html#mapmatindexed",
            "text": "open fun ~~mapMatIndexed~~(f: (row: Int , col: Int , ele: T) -> T): Matrix <T>  Deprecated:  Use mapIndexed",
            "title": "mapMatIndexed"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/map-mat/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nmapMat\n\n\nmapMat\n\n\nopen fun ~~mapMat~~(f: (T) -> T):\nMatrix\n<T>\n\n\nDeprecated:\n Use map instead",
            "title": "Map mat"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/map-mat/index.html#mapmat",
            "text": "open fun ~~mapMat~~(f: (T) -> T): Matrix <T>  Deprecated:  Use map instead",
            "title": "mapMat"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/map-rows-to-list/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nmapRowsToList\n\n\nmapRowsToList\n\n\nopen fun <U> mapRowsToList(f: (\nMatrix\n<T>) -> U):\nList\n<U>\n\n\nTakes each row in a matrix, passes them through f, and puts the outputs into a List.\nIn contrast to this#mapRows, the usage of a list as the output container allows for\narbitrary output types, such as taking a double matrix and returning a list of strings.\n\n\nParameters\n\n\nf\n - A function that takes in a 1xN row and returns a 1xM row. Note that all output\nrows must be the same length.",
            "title": "Map rows to list"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/map-rows-to-list/index.html#maprowstolist",
            "text": "open fun <U> mapRowsToList(f: ( Matrix <T>) -> U): List <U>  Takes each row in a matrix, passes them through f, and puts the outputs into a List.\nIn contrast to this#mapRows, the usage of a list as the output container allows for\narbitrary output types, such as taking a double matrix and returning a list of strings.",
            "title": "mapRowsToList"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/map-rows-to-list/index.html#parameters",
            "text": "f  - A function that takes in a 1xN row and returns a 1xM row. Note that all output\nrows must be the same length.",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/map-rows/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nmapRows\n\n\nmapRows\n\n\nopen fun mapRows(f: (\nMatrix\n<T>) ->\nMatrix\n<T>):\nMatrix\n<T>\n\n\nTakes each row in a matrix, passes them through f, and puts the output of f into a\nrow of an output matrix.\n\n\nParameters\n\n\nf\n - A function that takes in a 1xN row and returns a 1xM row. Note that all output\nrows must be the same length. In addition, the input and output element types must be the same.\n\n\nReturn\n\nthe new matrix after each row is mapped through f",
            "title": "Map rows"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/map-rows/index.html#maprows",
            "text": "open fun mapRows(f: ( Matrix <T>) -> Matrix <T>): Matrix <T>  Takes each row in a matrix, passes them through f, and puts the output of f into a\nrow of an output matrix.",
            "title": "mapRows"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/map-rows/index.html#parameters",
            "text": "f  - A function that takes in a 1xN row and returns a 1xM row. Note that all output\nrows must be the same length. In addition, the input and output element types must be the same.  Return \nthe new matrix after each row is mapped through f",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/map/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nmap\n\n\nmap\n\n\nopen fun map(f: (T) -> T):\nMatrix\n<T>\n\n\nTakes each element in a matrix, passes them through f, and puts the output of f into an\noutput matrix. This process is done in row-major order.\n\n\nParameters\n\n\nf\n - A function that takes in an element and returns an element\n\n\nReturn\n\nthe new matrix after each element is mapped through f",
            "title": "Map"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/map/index.html#map",
            "text": "open fun map(f: (T) -> T): Matrix <T>  Takes each element in a matrix, passes them through f, and puts the output of f into an\noutput matrix. This process is done in row-major order.",
            "title": "map"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/map/index.html#parameters",
            "text": "f  - A function that takes in an element and returns an element  Return \nthe new matrix after each element is mapped through f",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/max/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nmax\n\n\nmax\n\n\nabstract fun max(): T",
            "title": "Max"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/max/index.html#max",
            "text": "abstract fun max(): T",
            "title": "max"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/mean/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nmean\n\n\nmean\n\n\nabstract fun mean(): T",
            "title": "Mean"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/mean/index.html#mean",
            "text": "abstract fun mean(): T",
            "title": "mean"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/min/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nmin\n\n\nmin\n\n\nabstract fun min(): T",
            "title": "Min"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/min/index.html#min",
            "text": "abstract fun min(): T",
            "title": "min"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/minus/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nminus\n\n\nminus\n\n\nabstract operator fun minus(other: T):\nMatrix\n<T>\n\n\nabstract operator fun minus(other:\nMatrix\n<T>):\nMatrix\n<T>",
            "title": "Minus"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/minus/index.html#minus",
            "text": "abstract operator fun minus(other: T): Matrix <T>  abstract operator fun minus(other: Matrix <T>): Matrix <T>",
            "title": "minus"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/norm-f/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nnormF\n\n\nnormF\n\n\nabstract fun normF(): T",
            "title": "Norm f"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/norm-f/index.html#normf",
            "text": "abstract fun normF(): T",
            "title": "normF"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/norm-ind-p1/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nnormIndP1\n\n\nnormIndP1\n\n\nabstract fun normIndP1(): T",
            "title": "Norm ind p1"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/norm-ind-p1/index.html#normindp1",
            "text": "abstract fun normIndP1(): T",
            "title": "normIndP1"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/norm/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nnorm\n\n\nnorm\n\n\nabstract fun norm(): T",
            "title": "Norm"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/norm/index.html#norm",
            "text": "abstract fun norm(): T",
            "title": "norm"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/num-cols/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nnumCols\n\n\nnumCols\n\n\nabstract fun numCols():\nInt",
            "title": "Num cols"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/num-cols/index.html#numcols",
            "text": "abstract fun numCols(): Int",
            "title": "numCols"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/num-rows/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nnumRows\n\n\nnumRows\n\n\nabstract fun numRows():\nInt",
            "title": "Num rows"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/num-rows/index.html#numrows",
            "text": "abstract fun numRows(): Int",
            "title": "numRows"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/pinv/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \npinv\n\n\npinv\n\n\nabstract fun pinv():\nMatrix\n<T>",
            "title": "Pinv"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/pinv/index.html#pinv",
            "text": "abstract fun pinv(): Matrix <T>",
            "title": "pinv"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/plus/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nplus\n\n\nplus\n\n\nabstract operator fun plus(other: T):\nMatrix\n<T>\n\n\nabstract operator fun plus(other:\nMatrix\n<T>):\nMatrix\n<T>",
            "title": "Plus"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/plus/index.html#plus",
            "text": "abstract operator fun plus(other: T): Matrix <T>  abstract operator fun plus(other: Matrix <T>): Matrix <T>",
            "title": "plus"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/pow/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \npow\n\n\npow\n\n\nopen infix fun pow(exponent:\nInt\n):\nMatrix\n<T>",
            "title": "Pow"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/pow/index.html#pow",
            "text": "open infix fun pow(exponent: Int ): Matrix <T>",
            "title": "pow"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/rem/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nrem\n\n\nrem\n\n\nabstract operator fun rem(other:\nMatrix\n<T>):\nMatrix\n<T>",
            "title": "Rem"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/rem/index.html#rem",
            "text": "abstract operator fun rem(other: Matrix <T>): Matrix <T>",
            "title": "rem"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/repr/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nrepr\n\n\nrepr\n\n\nopen fun repr():\nString",
            "title": "Repr"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/repr/index.html#repr",
            "text": "open fun repr(): String",
            "title": "repr"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/select-cols/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nselectCols\n\n\nselectCols\n\n\nopen fun selectCols(vararg idxs:\nInt\n):\nMatrix\n<T>\n\n\nSelect a set of cols from a matrix to form the cols of a new matrix.\nFor example, if you wanted a new matrix consisting of the first, second, and\nfifth cols of an input matrix, you would write \ninput.selectCols(0,1,4)\n.\n\n\nopen fun <U :\nNumber\n> selectCols(idxs:\nMatrix\n<U>):\nMatrix\n<T>",
            "title": "Select cols"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/select-cols/index.html#selectcols",
            "text": "open fun selectCols(vararg idxs: Int ): Matrix <T>  Select a set of cols from a matrix to form the cols of a new matrix.\nFor example, if you wanted a new matrix consisting of the first, second, and\nfifth cols of an input matrix, you would write  input.selectCols(0,1,4) .  open fun <U : Number > selectCols(idxs: Matrix <U>): Matrix <T>",
            "title": "selectCols"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/select-rows/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nselectRows\n\n\nselectRows\n\n\nopen fun selectRows(vararg idxs:\nInt\n):\nMatrix\n<T>\n\n\nSelect a set of rows from a matrix to form the rows of a new matrix.\nFor example, if you wanted a new matrix consisting of the first, second, and\nfifth rows of an input matrix, you would write \ninput.selectRows(0,1,4)\n.\n\n\nopen fun <U :\nNumber\n> selectRows(idxs:\nMatrix\n<U>):\nMatrix\n<T>",
            "title": "Select rows"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/select-rows/index.html#selectrows",
            "text": "open fun selectRows(vararg idxs: Int ): Matrix <T>  Select a set of rows from a matrix to form the rows of a new matrix.\nFor example, if you wanted a new matrix consisting of the first, second, and\nfifth rows of an input matrix, you would write  input.selectRows(0,1,4) .  open fun <U : Number > selectRows(idxs: Matrix <U>): Matrix <T>",
            "title": "selectRows"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/set-col/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nsetCol\n\n\nsetCol\n\n\nabstract fun setCol(index:\nInt\n, col:\nMatrix\n<T>):\nUnit",
            "title": "Set col"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/set-col/index.html#setcol",
            "text": "abstract fun setCol(index: Int , col: Matrix <T>): Unit",
            "title": "setCol"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/set-double/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nsetDouble\n\n\nsetDouble\n\n\nabstract fun setDouble(i:\nInt\n, v:\nDouble\n):\nUnit\n\n\nabstract fun setDouble(i:\nInt\n, j:\nInt\n, v:\nDouble\n):\nUnit",
            "title": "Set double"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/set-double/index.html#setdouble",
            "text": "abstract fun setDouble(i: Int , v: Double ): Unit  abstract fun setDouble(i: Int , j: Int , v: Double ): Unit",
            "title": "setDouble"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/set-float/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nsetFloat\n\n\nsetFloat\n\n\nabstract fun setFloat(i:\nInt\n, v:\nFloat\n):\nUnit\n\n\nabstract fun setFloat(i:\nInt\n, j:\nInt\n, v:\nFloat\n):\nUnit",
            "title": "Set float"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/set-float/index.html#setfloat",
            "text": "abstract fun setFloat(i: Int , v: Float ): Unit  abstract fun setFloat(i: Int , j: Int , v: Float ): Unit",
            "title": "setFloat"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/set-generic/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nsetGeneric\n\n\nsetGeneric\n\n\nabstract fun setGeneric(i:\nInt\n, j:\nInt\n, v: T):\nUnit\n\n\nabstract fun setGeneric(i:\nInt\n, v: T):\nUnit",
            "title": "Set generic"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/set-generic/index.html#setgeneric",
            "text": "abstract fun setGeneric(i: Int , j: Int , v: T): Unit  abstract fun setGeneric(i: Int , v: T): Unit",
            "title": "setGeneric"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/set-int/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nsetInt\n\n\nsetInt\n\n\nabstract fun setInt(i:\nInt\n, v:\nInt\n):\nUnit\n\n\nabstract fun setInt(i:\nInt\n, j:\nInt\n, v:\nInt\n):\nUnit",
            "title": "Set int"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/set-int/index.html#setint",
            "text": "abstract fun setInt(i: Int , v: Int ): Unit  abstract fun setInt(i: Int , j: Int , v: Int ): Unit",
            "title": "setInt"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/set-row/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nsetRow\n\n\nsetRow\n\n\nabstract fun setRow(index:\nInt\n, row:\nMatrix\n<T>):\nUnit",
            "title": "Set row"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/set-row/index.html#setrow",
            "text": "abstract fun setRow(index: Int , row: Matrix <T>): Unit",
            "title": "setRow"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/solve/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nsolve\n\n\nsolve\n\n\nabstract fun solve(A:\nMatrix\n<T>, B:\nMatrix\n<T>):\nMatrix\n<T>",
            "title": "Solve"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/solve/index.html#solve",
            "text": "abstract fun solve(A: Matrix <T>, B: Matrix <T>): Matrix <T>",
            "title": "solve"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/times/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \ntimes\n\n\ntimes\n\n\nabstract operator fun times(other:\nMatrix\n<T>):\nMatrix\n<T>\n\n\nabstract operator fun times(other: T):\nMatrix\n<T>",
            "title": "Times"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/times/index.html#times",
            "text": "abstract operator fun times(other: Matrix <T>): Matrix <T>  abstract operator fun times(other: T): Matrix <T>",
            "title": "times"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/to-iterable/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \ntoIterable\n\n\ntoIterable\n\n\nopen fun toIterable():\nIterable\n<T>",
            "title": "To iterable"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/to-iterable/index.html#toiterable",
            "text": "open fun toIterable(): Iterable <T>",
            "title": "toIterable"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/to2-d-array/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nto2DArray\n\n\nto2DArray\n\n\nopen fun to2DArray():\nArray\n<\nDoubleArray\n>\n\n\nReturns a Matrix as a double 2D array. Intended for MATLAB interop.\n\n\nReturn\n\na 2D array copy of the matrix.",
            "title": "To2 d array"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/to2-d-array/index.html#to2darray",
            "text": "open fun to2DArray(): Array < DoubleArray >  Returns a Matrix as a double 2D array. Intended for MATLAB interop.  Return \na 2D array copy of the matrix.",
            "title": "to2DArray"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/trace/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \ntrace\n\n\ntrace\n\n\nabstract fun trace(): T",
            "title": "Trace"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/trace/index.html#trace",
            "text": "abstract fun trace(): T",
            "title": "trace"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/transpose/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \ntranspose\n\n\ntranspose\n\n\nabstract fun transpose():\nMatrix\n<T>",
            "title": "Transpose"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/transpose/index.html#transpose",
            "text": "abstract fun transpose(): Matrix <T>",
            "title": "transpose"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/unary-minus/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nunaryMinus\n\n\nunaryMinus\n\n\nabstract operator fun unaryMinus():\nMatrix\n<T>",
            "title": "Unary minus"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/unary-minus/index.html#unaryminus",
            "text": "abstract operator fun unaryMinus(): Matrix <T>",
            "title": "unaryMinus"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/wrap-range/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrix\n / \nwrapRange\n\n\nwrapRange\n\n\nopen fun wrapRange(range:\nIntRange\n, max:\nInt\n):\nIntRange",
            "title": "Wrap range"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix/wrap-range/index.html#wraprange",
            "text": "open fun wrapRange(range: IntRange , max: Int ): IntRange",
            "title": "wrapRange"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix-factory/arange/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrixFactory\n / \narange\n\n\narange\n\n\nabstract fun arange(start:\nDouble\n, stop:\nDouble\n, increment:\nDouble\n): T\n\n\nabstract fun arange(start:\nInt\n, stop:\nInt\n, increment:\nInt\n): T\n\n\nCreates a row-vector with the first value of \nstart\n and the last value of \nstop\n, with \nincrement\n steps\nbetween each value.\n\n\nabstract fun arange(start:\nDouble\n, stop:\nDouble\n): T\n\n\nabstract fun arange(start:\nInt\n, stop:\nInt\n): T\n\n\nCreates a row-vector with the first value of \nstart\n and the last value of \nstop\n, with unit steps\nbetween each value.",
            "title": "Arange"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix-factory/arange/index.html#arange",
            "text": "abstract fun arange(start: Double , stop: Double , increment: Double ): T  abstract fun arange(start: Int , stop: Int , increment: Int ): T  Creates a row-vector with the first value of  start  and the last value of  stop , with  increment  steps\nbetween each value.  abstract fun arange(start: Double , stop: Double ): T  abstract fun arange(start: Int , stop: Int ): T  Creates a row-vector with the first value of  start  and the last value of  stop , with unit steps\nbetween each value.",
            "title": "arange"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix-factory/create/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrixFactory\n / \ncreate\n\n\ncreate\n\n\nabstract fun create(data:\nIntRange\n): T\n\n\nCreates a row-vector with initial values pulled from an int range, e.g. 1..45\n\n\nabstract fun create(data:\nDoubleArray\n): T\n\n\nCreates a row-vector with initial values pulled from a double array\n\n\nabstract fun create(data:\nArray\n<\nDoubleArray\n>): T\n\n\nCreates a matrix from an array of arrays (row-major)",
            "title": "Create"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix-factory/create/index.html#create",
            "text": "abstract fun create(data: IntRange ): T  Creates a row-vector with initial values pulled from an int range, e.g. 1..45  abstract fun create(data: DoubleArray ): T  Creates a row-vector with initial values pulled from a double array  abstract fun create(data: Array < DoubleArray >): T  Creates a matrix from an array of arrays (row-major)",
            "title": "create"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix-factory/eye/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrixFactory\n / \neye\n\n\neye\n\n\nabstract fun eye(size:\nInt\n): T\n\n\nCreates an identity matrix of the requested shape\n\n\nabstract fun eye(rows:\nInt\n, cols:\nInt\n): T\n\n\nCreates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.",
            "title": "Eye"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix-factory/eye/index.html#eye",
            "text": "abstract fun eye(size: Int ): T  Creates an identity matrix of the requested shape  abstract fun eye(rows: Int , cols: Int ): T  Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.",
            "title": "eye"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix-factory/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrixFactory\n\n\nMatrixFactory\n\n\ninterface MatrixFactory<out T>\n\n\nA set of constructors that must be implemented by a koma backend. Generates various types of matrices.\nGeneric parameter is the type of element, i.e. T=Matrix or T=Matrix, etc.\n\n\nFunctions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\narange\n\n\nabstract fun arange(start:\nDouble\n, stop:\nDouble\n, increment:\nDouble\n): T\nabstract fun arange(start:\nInt\n, stop:\nInt\n, increment:\nInt\n): T\nCreates a row-vector with the first value of \nstart\n and the last value of \nstop\n, with \nincrement\n steps between each value.\nabstract fun arange(start:\nDouble\n, stop:\nDouble\n): T\nabstract fun arange(start:\nInt\n, stop:\nInt\n): T\nCreates a row-vector with the first value of \nstart\n and the last value of \nstop\n, with unit steps between each value.\n\n\n\n\n\n\ncreate\n\n\nabstract fun create(data:\nIntRange\n): T\nCreates a row-vector with initial values pulled from an int range, e.g. 1..45\nabstract fun create(data:\nDoubleArray\n): T\nCreates a row-vector with initial values pulled from a double array\nabstract fun create(data:\nArray\n<\nDoubleArray\n>): T\nCreates a matrix from an array of arrays (row-major)\n\n\n\n\n\n\neye\n\n\nabstract fun eye(size:\nInt\n): T\nCreates an identity matrix of the requested shape\nabstract fun eye(rows:\nInt\n, cols:\nInt\n): T\nCreates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.\n\n\n\n\n\n\nones\n\n\nabstract fun ~~ones~~(size:\nInt\n): T\nCreates a one initialized square matrix of the requested shape\nabstract fun ones(rows:\nInt\n, cols:\nInt\n): T\nCreates a one initialized matrix of the requested shape\n\n\n\n\n\n\nrand\n\n\nabstract fun ~~rand~~(size:\nInt\n): T\nCreates a vector of \nsize\n many uniform 0-1 random samples\nabstract fun rand(rows:\nInt\n, cols:\nInt\n): T\nCreates a matrix of uniform 0-1 random samples\nabstract fun rand(rows:\nInt\n, cols:\nInt\n, seed:\nLong\n): T\nCreates a matrix of rows x cols uniform 0-1 samples using the given seed. Two calls with the same seed will produce identical matrices\n\n\n\n\n\n\nrandn\n\n\nabstract fun ~~randn~~(size:\nInt\n): T\nCreates a vector of \nsize\n many unit-normal random samples\nabstract fun randn(rows:\nInt\n, cols:\nInt\n): T\nCreates a matrix of unit-normal random samples\nabstract fun randn(rows:\nInt\n, cols:\nInt\n, seed:\nLong\n): T\nCreates a matrix of rows x cols random samples using the given seed. Two calls with the same seed will produce identical matrices\n\n\n\n\n\n\nzeros\n\n\nabstract fun zeros(rows:\nInt\n, cols:\nInt\n): T\nGenerate a zero initialized matrix of the requested shape.\nabstract fun ~~zeros~~(size:\nInt\n): T\nGenerate a zero initialized square matrix of the requested shape.\n\n\n\n\n\n\n\n\nInheritors\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nDefaultDoubleMatrixFactory\n\n\nclass DefaultDoubleMatrixFactory : MatrixFactory<\nMatrix\n<\nDouble\n>>\n\n\n\n\n\n\nDefaultFloatMatrixFactory\n\n\nclass DefaultFloatMatrixFactory : MatrixFactory<\nMatrix\n<\nFloat\n>>\n\n\n\n\n\n\nDefaultIntMatrixFactory\n\n\nclass DefaultIntMatrixFactory : MatrixFactory<\nMatrix\n<\nInt\n>>\n\n\n\n\n\n\nDefaultLongMatrixFactory\n\n\nclass DefaultLongMatrixFactory : MatrixFactory<\nMatrix\n<\nLong\n>>\n\n\n\n\n\n\nDoubleFactoryBase\n\n\nabstract class DoubleFactoryBase<T :\nMatrix\n<\nDouble\n>> : MatrixFactory<T>\nSome functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions.",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix-factory/index.html#matrixfactory",
            "text": "interface MatrixFactory<out T>  A set of constructors that must be implemented by a koma backend. Generates various types of matrices.\nGeneric parameter is the type of element, i.e. T=Matrix or T=Matrix, etc.",
            "title": "MatrixFactory"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix-factory/index.html#functions",
            "text": "Name  Summary      arange  abstract fun arange(start: Double , stop: Double , increment: Double ): T abstract fun arange(start: Int , stop: Int , increment: Int ): T Creates a row-vector with the first value of  start  and the last value of  stop , with  increment  steps between each value. abstract fun arange(start: Double , stop: Double ): T abstract fun arange(start: Int , stop: Int ): T Creates a row-vector with the first value of  start  and the last value of  stop , with unit steps between each value.    create  abstract fun create(data: IntRange ): T Creates a row-vector with initial values pulled from an int range, e.g. 1..45 abstract fun create(data: DoubleArray ): T Creates a row-vector with initial values pulled from a double array abstract fun create(data: Array < DoubleArray >): T Creates a matrix from an array of arrays (row-major)    eye  abstract fun eye(size: Int ): T Creates an identity matrix of the requested shape abstract fun eye(rows: Int , cols: Int ): T Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.    ones  abstract fun ~~ones~~(size: Int ): T Creates a one initialized square matrix of the requested shape abstract fun ones(rows: Int , cols: Int ): T Creates a one initialized matrix of the requested shape    rand  abstract fun ~~rand~~(size: Int ): T Creates a vector of  size  many uniform 0-1 random samples abstract fun rand(rows: Int , cols: Int ): T Creates a matrix of uniform 0-1 random samples abstract fun rand(rows: Int , cols: Int , seed: Long ): T Creates a matrix of rows x cols uniform 0-1 samples using the given seed. Two calls with the same seed will produce identical matrices    randn  abstract fun ~~randn~~(size: Int ): T Creates a vector of  size  many unit-normal random samples abstract fun randn(rows: Int , cols: Int ): T Creates a matrix of unit-normal random samples abstract fun randn(rows: Int , cols: Int , seed: Long ): T Creates a matrix of rows x cols random samples using the given seed. Two calls with the same seed will produce identical matrices    zeros  abstract fun zeros(rows: Int , cols: Int ): T Generate a zero initialized matrix of the requested shape. abstract fun ~~zeros~~(size: Int ): T Generate a zero initialized square matrix of the requested shape.",
            "title": "Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix-factory/index.html#inheritors",
            "text": "Name  Summary      DefaultDoubleMatrixFactory  class DefaultDoubleMatrixFactory : MatrixFactory< Matrix < Double >>    DefaultFloatMatrixFactory  class DefaultFloatMatrixFactory : MatrixFactory< Matrix < Float >>    DefaultIntMatrixFactory  class DefaultIntMatrixFactory : MatrixFactory< Matrix < Int >>    DefaultLongMatrixFactory  class DefaultLongMatrixFactory : MatrixFactory< Matrix < Long >>    DoubleFactoryBase  abstract class DoubleFactoryBase<T : Matrix < Double >> : MatrixFactory<T> Some functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions.",
            "title": "Inheritors"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix-factory/ones/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrixFactory\n / \nones\n\n\nones\n\n\nabstract fun ~~ones~~(size:\nInt\n): T\n\n\nDeprecated:\n Use rows,col overload instead. This method will be removed in a future update.\n\n\nCreates a one initialized square matrix of the requested shape\n\n\nabstract fun ones(rows:\nInt\n, cols:\nInt\n): T\n\n\nCreates a one initialized matrix of the requested shape",
            "title": "Ones"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix-factory/ones/index.html#ones",
            "text": "abstract fun ~~ones~~(size: Int ): T  Deprecated:  Use rows,col overload instead. This method will be removed in a future update.  Creates a one initialized square matrix of the requested shape  abstract fun ones(rows: Int , cols: Int ): T  Creates a one initialized matrix of the requested shape",
            "title": "ones"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix-factory/rand/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrixFactory\n / \nrand\n\n\nrand\n\n\nabstract fun ~~rand~~(size:\nInt\n): T\n\n\nDeprecated:\n Use rows,col overload instead. This method will be removed in a future update.\n\n\nCreates a vector of \nsize\n many uniform 0-1 random samples\n\n\nabstract fun rand(rows:\nInt\n, cols:\nInt\n): T\n\n\nCreates a matrix of uniform 0-1 random samples\n\n\nabstract fun rand(rows:\nInt\n, cols:\nInt\n, seed:\nLong\n): T\n\n\nCreates a matrix of rows x cols uniform 0-1 samples using the given seed. Two calls with the same seed\nwill produce identical matrices",
            "title": "Rand"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix-factory/rand/index.html#rand",
            "text": "abstract fun ~~rand~~(size: Int ): T  Deprecated:  Use rows,col overload instead. This method will be removed in a future update.  Creates a vector of  size  many uniform 0-1 random samples  abstract fun rand(rows: Int , cols: Int ): T  Creates a matrix of uniform 0-1 random samples  abstract fun rand(rows: Int , cols: Int , seed: Long ): T  Creates a matrix of rows x cols uniform 0-1 samples using the given seed. Two calls with the same seed\nwill produce identical matrices",
            "title": "rand"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix-factory/randn/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrixFactory\n / \nrandn\n\n\nrandn\n\n\nabstract fun ~~randn~~(size:\nInt\n): T\n\n\nDeprecated:\n Use rows,col overload instead. This method will be removed in a future update.\n\n\nCreates a vector of \nsize\n many unit-normal random samples\n\n\nabstract fun randn(rows:\nInt\n, cols:\nInt\n): T\n\n\nCreates a matrix of unit-normal random samples\n\n\nabstract fun randn(rows:\nInt\n, cols:\nInt\n, seed:\nLong\n): T\n\n\nCreates a matrix of rows x cols random samples using the given seed. Two calls with the same seed\nwill produce identical matrices",
            "title": "Randn"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix-factory/randn/index.html#randn",
            "text": "abstract fun ~~randn~~(size: Int ): T  Deprecated:  Use rows,col overload instead. This method will be removed in a future update.  Creates a vector of  size  many unit-normal random samples  abstract fun randn(rows: Int , cols: Int ): T  Creates a matrix of unit-normal random samples  abstract fun randn(rows: Int , cols: Int , seed: Long ): T  Creates a matrix of rows x cols random samples using the given seed. Two calls with the same seed\nwill produce identical matrices",
            "title": "randn"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix-factory/zeros/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrixFactory\n / \nzeros\n\n\nzeros\n\n\nabstract fun zeros(rows:\nInt\n, cols:\nInt\n): T\n\n\nGenerate a zero initialized matrix of the requested shape.\n\n\nabstract fun ~~zeros~~(size:\nInt\n): T\n\n\nDeprecated:\n Use rows,col overload instead. This method will be removed in a future update.\n\n\nGenerate a zero initialized square matrix of the requested shape.",
            "title": "Zeros"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix-factory/zeros/index.html#zeros",
            "text": "abstract fun zeros(rows: Int , cols: Int ): T  Generate a zero initialized matrix of the requested shape.  abstract fun ~~zeros~~(size: Int ): T  Deprecated:  Use rows,col overload instead. This method will be removed in a future update.  Generate a zero initialized square matrix of the requested shape.",
            "title": "zeros"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix-types/-double-type/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrixTypes\n / \nDoubleType\n\n\nDoubleType\n\n\nval DoubleType:\nMatrixType\n<\nDouble\n>",
            "title": " double type"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix-types/-double-type/index.html#doubletype",
            "text": "val DoubleType: MatrixType < Double >",
            "title": "DoubleType"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix-types/-float-type/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrixTypes\n / \nFloatType\n\n\nFloatType\n\n\nval FloatType:\nMatrixType\n<\nFloat\n>",
            "title": " float type"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix-types/-float-type/index.html#floattype",
            "text": "val FloatType: MatrixType < Float >",
            "title": "FloatType"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix-types/-int-type/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrixTypes\n / \nIntType\n\n\nIntType\n\n\nval IntType:\nMatrixType\n<\nInt\n>",
            "title": " int type"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix-types/-int-type/index.html#inttype",
            "text": "val IntType: MatrixType < Int >",
            "title": "IntType"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix-types/index.html",
            "text": "api\n / \nkoma.matrix\n / \nMatrixTypes\n\n\nMatrixTypes\n\n\nobject MatrixTypes\n\n\nIntended to be used as a parameter to functions, when selection of matrix type is needed.\n(e.g. creators.kt which return Matrix for a requested T).\n\n\nProperties\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nDoubleType\n\n\nval DoubleType:\nMatrixType\n<\nDouble\n>\n\n\n\n\n\n\nFloatType\n\n\nval FloatType:\nMatrixType\n<\nFloat\n>\n\n\n\n\n\n\nIntType\n\n\nval IntType:\nMatrixType\n<\nInt\n>",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix-types/index.html#matrixtypes",
            "text": "object MatrixTypes  Intended to be used as a parameter to functions, when selection of matrix type is needed.\n(e.g. creators.kt which return Matrix for a requested T).",
            "title": "MatrixTypes"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix/-matrix-types/index.html#properties",
            "text": "Name  Summary      DoubleType  val DoubleType: MatrixType < Double >    FloatType  val FloatType: MatrixType < Float >    IntType  val IntType: MatrixType < Int >",
            "title": "Properties"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/index.html",
            "text": "api\n / \nkoma.matrix.common\n\n\nPackage koma.matrix.common\n\n\nBase classes for matrices.\n\n\nTypes\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nDoubleFactoryBase\n\n\nabstract class DoubleFactoryBase<T :\nMatrix\n<\nDouble\n>> :\nMatrixFactory\n<T>\nSome functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions.\n\n\n\n\n\n\nDoubleMatrixBase\n\n\nabstract class DoubleMatrixBase :\nMatrixBase\n<\nDouble\n>\nSome functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions.\n\n\n\n\n\n\nMatrixBase\n\n\nabstract class MatrixBase<T> :\nMatrix\n<T>",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/index.html#package-komamatrixcommon",
            "text": "Base classes for matrices.",
            "title": "Package koma.matrix.common"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/index.html#types",
            "text": "Name  Summary      DoubleFactoryBase  abstract class DoubleFactoryBase<T : Matrix < Double >> : MatrixFactory <T> Some functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions.    DoubleMatrixBase  abstract class DoubleMatrixBase : MatrixBase < Double > Some functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions.    MatrixBase  abstract class MatrixBase<T> : Matrix <T>",
            "title": "Types"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-double-factory-base/-init-/index.html",
            "text": "api\n / \nkoma.matrix.common\n / \nDoubleFactoryBase\n / \n<init>\n\n\n<init>\n\n\nDoubleFactoryBase()\n\n\nSome functionality to help more easily implement double based koma backends. Feel free to not use if\nyour backend has fast implementations of these functions.",
            "title": " init "
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-double-factory-base/-init-/index.html#init",
            "text": "DoubleFactoryBase()  Some functionality to help more easily implement double based koma backends. Feel free to not use if\nyour backend has fast implementations of these functions.",
            "title": "&lt;init&gt;"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-double-factory-base/arange/index.html",
            "text": "api\n / \nkoma.matrix.common\n / \nDoubleFactoryBase\n / \narange\n\n\narange\n\n\nopen fun arange(start:\nDouble\n, stop:\nDouble\n, increment:\nDouble\n): T\n\n\nOverrides \nMatrixFactory.arange\n\n\nopen fun arange(start:\nInt\n, stop:\nInt\n, increment:\nInt\n): T\n\n\nOverrides \nMatrixFactory.arange\n\n\nCreates a row-vector with the first value of \nstart\n and the last value of \nstop\n, with \nincrement\n steps\nbetween each value.\n\n\nopen fun arange(start:\nDouble\n, stop:\nDouble\n): T\n\n\nOverrides \nMatrixFactory.arange\n\n\nopen fun arange(start:\nInt\n, stop:\nInt\n): T\n\n\nOverrides \nMatrixFactory.arange\n\n\nCreates a row-vector with the first value of \nstart\n and the last value of \nstop\n, with unit steps\nbetween each value.",
            "title": "Arange"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-double-factory-base/arange/index.html#arange",
            "text": "open fun arange(start: Double , stop: Double , increment: Double ): T  Overrides  MatrixFactory.arange  open fun arange(start: Int , stop: Int , increment: Int ): T  Overrides  MatrixFactory.arange  Creates a row-vector with the first value of  start  and the last value of  stop , with  increment  steps\nbetween each value.  open fun arange(start: Double , stop: Double ): T  Overrides  MatrixFactory.arange  open fun arange(start: Int , stop: Int ): T  Overrides  MatrixFactory.arange  Creates a row-vector with the first value of  start  and the last value of  stop , with unit steps\nbetween each value.",
            "title": "arange"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-double-factory-base/index.html",
            "text": "api\n / \nkoma.matrix.common\n / \nDoubleFactoryBase\n\n\nDoubleFactoryBase\n\n\nabstract class DoubleFactoryBase<T :\nMatrix\n<\nDouble\n>> :\nMatrixFactory\n<T>\n\n\nSome functionality to help more easily implement double based koma backends. Feel free to not use if\nyour backend has fast implementations of these functions.\n\n\nConstructors\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\n<init>\n\n\nDoubleFactoryBase()\nSome functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions.\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\narange\n\n\nopen fun arange(start:\nDouble\n, stop:\nDouble\n, increment:\nDouble\n): T\nopen fun arange(start:\nInt\n, stop:\nInt\n, increment:\nInt\n): T\nCreates a row-vector with the first value of \nstart\n and the last value of \nstop\n, with \nincrement\n steps between each value.\nopen fun arange(start:\nDouble\n, stop:\nDouble\n): T\nopen fun arange(start:\nInt\n, stop:\nInt\n): T\nCreates a row-vector with the first value of \nstart\n and the last value of \nstop\n, with unit steps between each value.\n\n\n\n\n\n\n\n\nInherited Functions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\ncreate\n\n\nabstract fun create(data:\nArray\n<\nDoubleArray\n>): T\nCreates a matrix from an array of arrays (row-major)\nabstract fun create(data:\nIntRange\n): T\nCreates a row-vector with initial values pulled from an int range, e.g. 1..45\nabstract fun create(data:\nDoubleArray\n): T\nCreates a row-vector with initial values pulled from a double array\n\n\n\n\n\n\neye\n\n\nabstract fun eye(size:\nInt\n): T\nCreates an identity matrix of the requested shape\nabstract fun eye(rows:\nInt\n, cols:\nInt\n): T\nCreates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.\n\n\n\n\n\n\nones\n\n\nabstract fun ~~ones~~(size:\nInt\n): T\nCreates a one initialized square matrix of the requested shape\nabstract fun ones(rows:\nInt\n, cols:\nInt\n): T\nCreates a one initialized matrix of the requested shape\n\n\n\n\n\n\nrand\n\n\nabstract fun rand(rows:\nInt\n, cols:\nInt\n): T\nCreates a matrix of uniform 0-1 random samples\nabstract fun rand(rows:\nInt\n, cols:\nInt\n, seed:\nLong\n): T\nCreates a matrix of rows x cols uniform 0-1 samples using the given seed. Two calls with the same seed will produce identical matrices\nabstract fun ~~rand~~(size:\nInt\n): T\nCreates a vector of \nsize\n many uniform 0-1 random samples\n\n\n\n\n\n\nrandn\n\n\nabstract fun randn(rows:\nInt\n, cols:\nInt\n): T\nCreates a matrix of unit-normal random samples\nabstract fun randn(rows:\nInt\n, cols:\nInt\n, seed:\nLong\n): T\nCreates a matrix of rows x cols random samples using the given seed. Two calls with the same seed will produce identical matrices\nabstract fun ~~randn~~(size:\nInt\n): T\nCreates a vector of \nsize\n many unit-normal random samples\n\n\n\n\n\n\nzeros\n\n\nabstract fun zeros(rows:\nInt\n, cols:\nInt\n): T\nGenerate a zero initialized matrix of the requested shape.\nabstract fun ~~zeros~~(size:\nInt\n): T\nGenerate a zero initialized square matrix of the requested shape.",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-double-factory-base/index.html#doublefactorybase",
            "text": "abstract class DoubleFactoryBase<T : Matrix < Double >> : MatrixFactory <T>  Some functionality to help more easily implement double based koma backends. Feel free to not use if\nyour backend has fast implementations of these functions.",
            "title": "DoubleFactoryBase"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-double-factory-base/index.html#constructors",
            "text": "Name  Summary      <init>  DoubleFactoryBase() Some functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions.",
            "title": "Constructors"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-double-factory-base/index.html#functions",
            "text": "Name  Summary      arange  open fun arange(start: Double , stop: Double , increment: Double ): T open fun arange(start: Int , stop: Int , increment: Int ): T Creates a row-vector with the first value of  start  and the last value of  stop , with  increment  steps between each value. open fun arange(start: Double , stop: Double ): T open fun arange(start: Int , stop: Int ): T Creates a row-vector with the first value of  start  and the last value of  stop , with unit steps between each value.",
            "title": "Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-double-factory-base/index.html#inherited-functions",
            "text": "Name  Summary      create  abstract fun create(data: Array < DoubleArray >): T Creates a matrix from an array of arrays (row-major) abstract fun create(data: IntRange ): T Creates a row-vector with initial values pulled from an int range, e.g. 1..45 abstract fun create(data: DoubleArray ): T Creates a row-vector with initial values pulled from a double array    eye  abstract fun eye(size: Int ): T Creates an identity matrix of the requested shape abstract fun eye(rows: Int , cols: Int ): T Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.    ones  abstract fun ~~ones~~(size: Int ): T Creates a one initialized square matrix of the requested shape abstract fun ones(rows: Int , cols: Int ): T Creates a one initialized matrix of the requested shape    rand  abstract fun rand(rows: Int , cols: Int ): T Creates a matrix of uniform 0-1 random samples abstract fun rand(rows: Int , cols: Int , seed: Long ): T Creates a matrix of rows x cols uniform 0-1 samples using the given seed. Two calls with the same seed will produce identical matrices abstract fun ~~rand~~(size: Int ): T Creates a vector of  size  many uniform 0-1 random samples    randn  abstract fun randn(rows: Int , cols: Int ): T Creates a matrix of unit-normal random samples abstract fun randn(rows: Int , cols: Int , seed: Long ): T Creates a matrix of rows x cols random samples using the given seed. Two calls with the same seed will produce identical matrices abstract fun ~~randn~~(size: Int ): T Creates a vector of  size  many unit-normal random samples    zeros  abstract fun zeros(rows: Int , cols: Int ): T Generate a zero initialized matrix of the requested shape. abstract fun ~~zeros~~(size: Int ): T Generate a zero initialized square matrix of the requested shape.",
            "title": "Inherited Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-double-matrix-base/-init-/index.html",
            "text": "api\n / \nkoma.matrix.common\n / \nDoubleMatrixBase\n / \n<init>\n\n\n<init>\n\n\nDoubleMatrixBase()\n\n\nSome functionality to help more easily implement double based koma backends. Feel free to not use if\nyour backend has fast implementations of these functions.",
            "title": " init "
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-double-matrix-base/-init-/index.html#init",
            "text": "DoubleMatrixBase()  Some functionality to help more easily implement double based koma backends. Feel free to not use if\nyour backend has fast implementations of these functions.",
            "title": "&lt;init&gt;"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-double-matrix-base/expm/index.html",
            "text": "api\n / \nkoma.matrix.common\n / \nDoubleMatrixBase\n / \nexpm\n\n\nexpm\n\n\nopen fun expm():\nMatrix\n<\nDouble\n>\n\n\nOverrides \nMatrix.expm\n\n\nA backend agnostic implementation of the matrix exponential (i.e. e to the matrix).",
            "title": "Expm"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-double-matrix-base/expm/index.html#expm",
            "text": "open fun expm(): Matrix < Double >  Overrides  Matrix.expm  A backend agnostic implementation of the matrix exponential (i.e. e to the matrix).",
            "title": "expm"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-double-matrix-base/get-float/index.html",
            "text": "api\n / \nkoma.matrix.common\n / \nDoubleMatrixBase\n / \ngetFloat\n\n\ngetFloat\n\n\nopen fun getFloat(i:\nInt\n, j:\nInt\n):\nFloat\n\n\nOverrides \nMatrix.getFloat\n\n\nopen fun getFloat(i:\nInt\n):\nFloat\n\n\nOverrides \nMatrix.getFloat",
            "title": "Get float"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-double-matrix-base/get-float/index.html#getfloat",
            "text": "open fun getFloat(i: Int , j: Int ): Float  Overrides  Matrix.getFloat  open fun getFloat(i: Int ): Float  Overrides  Matrix.getFloat",
            "title": "getFloat"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-double-matrix-base/get-generic/index.html",
            "text": "api\n / \nkoma.matrix.common\n / \nDoubleMatrixBase\n / \ngetGeneric\n\n\ngetGeneric\n\n\nopen fun getGeneric(i:\nInt\n):\nDouble\n\n\nOverrides \nMatrix.getGeneric\n\n\nopen fun getGeneric(i:\nInt\n, j:\nInt\n):\nDouble\n\n\nOverrides \nMatrix.getGeneric",
            "title": "Get generic"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-double-matrix-base/get-generic/index.html#getgeneric",
            "text": "open fun getGeneric(i: Int ): Double  Overrides  Matrix.getGeneric  open fun getGeneric(i: Int , j: Int ): Double  Overrides  Matrix.getGeneric",
            "title": "getGeneric"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-double-matrix-base/get-int/index.html",
            "text": "api\n / \nkoma.matrix.common\n / \nDoubleMatrixBase\n / \ngetInt\n\n\ngetInt\n\n\nopen fun getInt(i:\nInt\n, j:\nInt\n):\nInt\n\n\nOverrides \nMatrix.getInt\n\n\nopen fun getInt(i:\nInt\n):\nInt\n\n\nOverrides \nMatrix.getInt",
            "title": "Get int"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-double-matrix-base/get-int/index.html#getint",
            "text": "open fun getInt(i: Int , j: Int ): Int  Overrides  Matrix.getInt  open fun getInt(i: Int ): Int  Overrides  Matrix.getInt",
            "title": "getInt"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-double-matrix-base/index.html",
            "text": "api\n / \nkoma.matrix.common\n / \nDoubleMatrixBase\n\n\nDoubleMatrixBase\n\n\nabstract class DoubleMatrixBase :\nMatrixBase\n<\nDouble\n>\n\n\nSome functionality to help more easily implement double based koma backends. Feel free to not use if\nyour backend has fast implementations of these functions.\n\n\nConstructors\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\n<init>\n\n\nDoubleMatrixBase()\nSome functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions.\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nexpm\n\n\nopen fun expm():\nMatrix\n<\nDouble\n>\nA backend agnostic implementation of the matrix exponential (i.e. e to the matrix).\n\n\n\n\n\n\ngetFloat\n\n\nopen fun getFloat(i:\nInt\n, j:\nInt\n):\nFloat\nopen fun getFloat(i:\nInt\n):\nFloat\n\n\n\n\n\n\ngetGeneric\n\n\nopen fun getGeneric(i:\nInt\n):\nDouble\nopen fun getGeneric(i:\nInt\n, j:\nInt\n):\nDouble\n\n\n\n\n\n\ngetInt\n\n\nopen fun getInt(i:\nInt\n, j:\nInt\n):\nInt\nopen fun getInt(i:\nInt\n):\nInt\n\n\n\n\n\n\nsetFloat\n\n\nopen fun setFloat(i:\nInt\n, v:\nFloat\n):\nUnit\nopen fun setFloat(i:\nInt\n, j:\nInt\n, v:\nFloat\n):\nUnit\n\n\n\n\n\n\nsetGeneric\n\n\nopen fun setGeneric(i:\nInt\n, v:\nDouble\n):\nUnit\nopen fun setGeneric(i:\nInt\n, j:\nInt\n, v:\nDouble\n):\nUnit\n\n\n\n\n\n\nsetInt\n\n\nopen fun setInt(i:\nInt\n, v:\nInt\n):\nUnit\nopen fun setInt(i:\nInt\n, j:\nInt\n, v:\nInt\n):\nUnit\n\n\n\n\n\n\n\n\nInherited Functions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\ncastOrCopy\n\n\nfun <DType, TOuter :\nMatrix\n<DType>, TInner> castOrCopy(mat:\nMatrix\n<DType>, makeOuter: (TInner) -> TOuter, outerFac:\nMatrixFactory\n<TOuter>): TOuter\nAttempts to downcast a matrix to its specific subclass, accepting both inner wrapped types and outer types. Requires the \nTOuter\n constructor to be passed in because reified generics don't support ctor calls. If the passed mat cannot be cast, instead copies the data manually into a newly allocated matrix of the correct type.\n\n\n\n\n\n\n\n\nExtension Functions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nemul\n\n\ninfix fun\nMatrix\n<\nDouble\n>.emul(other:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\nAllow infix operator \"a emul b\" to be element-wise multiplication of two matrices.\n\n\n\n\n\n\nget\n\n\noperator fun <T>\nMatrix\n<T>.get(rows:\nIntRange\n, cols:\nIntRange\n):\nMatrix\n<T>\nAllow slicing, e.g. \nmatrix[1..2, 3..4]\n. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.\noperator fun <T>\nMatrix\n<T>.get(rows:\nIntRange\n, cols:\nInt\n):\nMatrix\n<T>\nAllows for slicing of the rows and selection of a single column\noperator fun <T>\nMatrix\n<T>.get(rows:\nInt\n, cols:\nIntRange\n):\nMatrix\n<T>\nAllows for slicing of the cols and selection of a single row\n\n\n\n\n\n\nminus\n\n\noperator fun\nMatrix\n<\nDouble\n>.minus(value:\nInt\n):\nMatrix\n<\nDouble\n>\nAllow operator overloading with non-Double scalars\n\n\n\n\n\n\nplus\n\n\noperator fun\nMatrix\n<\nDouble\n>.plus(value:\nInt\n):\nMatrix\n<\nDouble\n>\nAllow operator overloading with non-Double scalars\n\n\n\n\n\n\nset\n\n\noperator fun <T>\nMatrix\n<T>.set(i:\nInt\n, v: T):\nUnit\nSet the ith element in the matrix. If 2D, selects elements in row-major order.\noperator fun <T>\nMatrix\n<T>.set(i:\nInt\n, j:\nInt\n, v: T):\nUnit\noperator fun <T>\nMatrix\n<T>.set(rows:\nIntRange\n, cols:\nIntRange\n, value: T):\nUnit\noperator fun <T>\nMatrix\n<T>.set(rows:\nInt\n, cols:\nIntRange\n, value: T):\nUnit\noperator fun <T>\nMatrix\n<T>.set(rows:\nIntRange\n, cols:\nInt\n, value: T):\nUnit\noperator fun\nMatrix\n<\nDouble\n>.set(i:\nInt\n, v:\nDouble\n):\nUnit\noperator fun\nMatrix\n<\nDouble\n>.set(i:\nInt\n, j:\nInt\n, v:\nDouble\n):\nUnit\noperator fun\nMatrix\n<\nDouble\n>.set(i:\nInt\n, v:\nInt\n):\nUnit\noperator fun\nMatrix\n<\nDouble\n>.set(i:\nInt\n, j:\nInt\n, v:\nInt\n):\nUnit\noperator fun <T>\nMatrix\n<T>.set(rows:\nIntRange\n, cols:\nIntRange\n, value:\nMatrix\n<T>):\nUnit\nAllow assignment to a slice, e.g. \nmatrix[1..2, 3..4]\n=something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.\noperator fun <T>\nMatrix\n<T>.set(rows:\nInt\n, cols:\nIntRange\n, value:\nMatrix\n<T>):\nUnit\nAllow assignment to a slice, e.g. \nmatrix[2, 3..4]\n=something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range.\noperator fun <T>\nMatrix\n<T>.set(rows:\nIntRange\n, cols:\nInt\n, value:\nMatrix\n<T>):\nUnit\nAllow assignment to a slice, e.g. \nmatrix[1..2, 3]\n=something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.\n\n\n\n\n\n\ntimes\n\n\noperator fun\nMatrix\n<\nDouble\n>.times(other:\nInt\n):\nMatrix\n<\nDouble\n>\nMultiply a scalar by a matrix",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-double-matrix-base/index.html#doublematrixbase",
            "text": "abstract class DoubleMatrixBase : MatrixBase < Double >  Some functionality to help more easily implement double based koma backends. Feel free to not use if\nyour backend has fast implementations of these functions.",
            "title": "DoubleMatrixBase"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-double-matrix-base/index.html#constructors",
            "text": "Name  Summary      <init>  DoubleMatrixBase() Some functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions.",
            "title": "Constructors"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-double-matrix-base/index.html#functions",
            "text": "Name  Summary      expm  open fun expm(): Matrix < Double > A backend agnostic implementation of the matrix exponential (i.e. e to the matrix).    getFloat  open fun getFloat(i: Int , j: Int ): Float open fun getFloat(i: Int ): Float    getGeneric  open fun getGeneric(i: Int ): Double open fun getGeneric(i: Int , j: Int ): Double    getInt  open fun getInt(i: Int , j: Int ): Int open fun getInt(i: Int ): Int    setFloat  open fun setFloat(i: Int , v: Float ): Unit open fun setFloat(i: Int , j: Int , v: Float ): Unit    setGeneric  open fun setGeneric(i: Int , v: Double ): Unit open fun setGeneric(i: Int , j: Int , v: Double ): Unit    setInt  open fun setInt(i: Int , v: Int ): Unit open fun setInt(i: Int , j: Int , v: Int ): Unit",
            "title": "Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-double-matrix-base/index.html#inherited-functions",
            "text": "Name  Summary      castOrCopy  fun <DType, TOuter : Matrix <DType>, TInner> castOrCopy(mat: Matrix <DType>, makeOuter: (TInner) -> TOuter, outerFac: MatrixFactory <TOuter>): TOuter Attempts to downcast a matrix to its specific subclass, accepting both inner wrapped types and outer types. Requires the  TOuter  constructor to be passed in because reified generics don't support ctor calls. If the passed mat cannot be cast, instead copies the data manually into a newly allocated matrix of the correct type.",
            "title": "Inherited Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-double-matrix-base/index.html#extension-functions",
            "text": "Name  Summary      emul  infix fun Matrix < Double >.emul(other: Matrix < Double >): Matrix < Double > Allow infix operator \"a emul b\" to be element-wise multiplication of two matrices.    get  operator fun <T> Matrix <T>.get(rows: IntRange , cols: IntRange ): Matrix <T> Allow slicing, e.g.  matrix[1..2, 3..4] . Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun <T> Matrix <T>.get(rows: IntRange , cols: Int ): Matrix <T> Allows for slicing of the rows and selection of a single column operator fun <T> Matrix <T>.get(rows: Int , cols: IntRange ): Matrix <T> Allows for slicing of the cols and selection of a single row    minus  operator fun Matrix < Double >.minus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars    plus  operator fun Matrix < Double >.plus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars    set  operator fun <T> Matrix <T>.set(i: Int , v: T): Unit Set the ith element in the matrix. If 2D, selects elements in row-major order. operator fun <T> Matrix <T>.set(i: Int , j: Int , v: T): Unit operator fun <T> Matrix <T>.set(rows: IntRange , cols: IntRange , value: T): Unit operator fun <T> Matrix <T>.set(rows: Int , cols: IntRange , value: T): Unit operator fun <T> Matrix <T>.set(rows: IntRange , cols: Int , value: T): Unit operator fun Matrix < Double >.set(i: Int , v: Double ): Unit operator fun Matrix < Double >.set(i: Int , j: Int , v: Double ): Unit operator fun Matrix < Double >.set(i: Int , v: Int ): Unit operator fun Matrix < Double >.set(i: Int , j: Int , v: Int ): Unit operator fun <T> Matrix <T>.set(rows: IntRange , cols: IntRange , value: Matrix <T>): Unit Allow assignment to a slice, e.g.  matrix[1..2, 3..4] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun <T> Matrix <T>.set(rows: Int , cols: IntRange , value: Matrix <T>): Unit Allow assignment to a slice, e.g.  matrix[2, 3..4] =something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range. operator fun <T> Matrix <T>.set(rows: IntRange , cols: Int , value: Matrix <T>): Unit Allow assignment to a slice, e.g.  matrix[1..2, 3] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.    times  operator fun Matrix < Double >.times(other: Int ): Matrix < Double > Multiply a scalar by a matrix",
            "title": "Extension Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-double-matrix-base/set-float/index.html",
            "text": "api\n / \nkoma.matrix.common\n / \nDoubleMatrixBase\n / \nsetFloat\n\n\nsetFloat\n\n\nopen fun setFloat(i:\nInt\n, v:\nFloat\n):\nUnit\n\n\nOverrides \nMatrix.setFloat\n\n\nopen fun setFloat(i:\nInt\n, j:\nInt\n, v:\nFloat\n):\nUnit\n\n\nOverrides \nMatrix.setFloat",
            "title": "Set float"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-double-matrix-base/set-float/index.html#setfloat",
            "text": "open fun setFloat(i: Int , v: Float ): Unit  Overrides  Matrix.setFloat  open fun setFloat(i: Int , j: Int , v: Float ): Unit  Overrides  Matrix.setFloat",
            "title": "setFloat"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-double-matrix-base/set-generic/index.html",
            "text": "api\n / \nkoma.matrix.common\n / \nDoubleMatrixBase\n / \nsetGeneric\n\n\nsetGeneric\n\n\nopen fun setGeneric(i:\nInt\n, v:\nDouble\n):\nUnit\n\n\nopen fun setGeneric(i:\nInt\n, j:\nInt\n, v:\nDouble\n):\nUnit",
            "title": "Set generic"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-double-matrix-base/set-generic/index.html#setgeneric",
            "text": "open fun setGeneric(i: Int , v: Double ): Unit  open fun setGeneric(i: Int , j: Int , v: Double ): Unit",
            "title": "setGeneric"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-double-matrix-base/set-int/index.html",
            "text": "api\n / \nkoma.matrix.common\n / \nDoubleMatrixBase\n / \nsetInt\n\n\nsetInt\n\n\nopen fun setInt(i:\nInt\n, v:\nInt\n):\nUnit\n\n\nOverrides \nMatrix.setInt\n\n\nopen fun setInt(i:\nInt\n, j:\nInt\n, v:\nInt\n):\nUnit\n\n\nOverrides \nMatrix.setInt",
            "title": "Set int"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-double-matrix-base/set-int/index.html#setint",
            "text": "open fun setInt(i: Int , v: Int ): Unit  Overrides  Matrix.setInt  open fun setInt(i: Int , j: Int , v: Int ): Unit  Overrides  Matrix.setInt",
            "title": "setInt"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-matrix-base/-init-/index.html",
            "text": "api\n / \nkoma.matrix.common\n / \nMatrixBase\n / \n<init>\n\n\n<init>\n\n\nMatrixBase()",
            "title": " init "
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-matrix-base/-init-/index.html#init",
            "text": "MatrixBase()",
            "title": "&lt;init&gt;"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-matrix-base/cast-or-copy/index.html",
            "text": "api\n / \nkoma.matrix.common\n / \nMatrixBase\n / \ncastOrCopy\n\n\ncastOrCopy\n\n\nprotected inline fun <DType, reified TOuter :\nMatrix\n<DType>, reified TInner> castOrCopy(mat:\nMatrix\n<DType>, makeOuter: (TInner) -> TOuter, outerFac:\nMatrixFactory\n<TOuter>): TOuter\n\n\nAttempts to downcast a matrix to its specific subclass,\naccepting both inner wrapped types and outer types.\nRequires the \nTOuter\n constructor to be passed in because\nreified generics don't support ctor calls. If the passed\nmat cannot be cast, instead copies the data manually into\na newly allocated matrix of the correct type.",
            "title": "Cast or copy"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-matrix-base/cast-or-copy/index.html#castorcopy",
            "text": "protected inline fun <DType, reified TOuter : Matrix <DType>, reified TInner> castOrCopy(mat: Matrix <DType>, makeOuter: (TInner) -> TOuter, outerFac: MatrixFactory <TOuter>): TOuter  Attempts to downcast a matrix to its specific subclass,\naccepting both inner wrapped types and outer types.\nRequires the  TOuter  constructor to be passed in because\nreified generics don't support ctor calls. If the passed\nmat cannot be cast, instead copies the data manually into\na newly allocated matrix of the correct type.",
            "title": "castOrCopy"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-matrix-base/index.html",
            "text": "api\n / \nkoma.matrix.common\n / \nMatrixBase\n\n\nMatrixBase\n\n\nabstract class MatrixBase<T> :\nMatrix\n<T>\n\n\nConstructors\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\n<init>\n\n\nMatrixBase()\n\n\n\n\n\n\n\n\nInherited Properties\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nT\n\n\nopen val T:\nMatrix\n<T>\nTranspose operator.\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\ncastOrCopy\n\n\nfun <DType, TOuter :\nMatrix\n<DType>, TInner> castOrCopy(mat:\nMatrix\n<DType>, makeOuter: (TInner) -> TOuter, outerFac:\nMatrixFactory\n<TOuter>): TOuter\nAttempts to downcast a matrix to its specific subclass, accepting both inner wrapped types and outer types. Requires the \nTOuter\n constructor to be passed in because reified generics don't support ctor calls. If the passed mat cannot be cast, instead copies the data manually into a newly allocated matrix of the correct type.\n\n\n\n\n\n\n\n\nInherited Functions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nLU\n\n\nabstract fun LU(): <ERROR CLASS><\nMatrix\n<T>,\nMatrix\n<T>,\nMatrix\n<T>>\n\n\n\n\n\n\nQR\n\n\nabstract fun QR(): <ERROR CLASS><\nMatrix\n<T>,\nMatrix\n<T>>\n\n\n\n\n\n\nT\n\n\nabstract fun T():\nMatrix\n<T>\nTranspose operator.\n\n\n\n\n\n\nargMax\n\n\nabstract fun argMax():\nInt\nRow major 1D index.\n\n\n\n\n\n\nargMin\n\n\nabstract fun argMin():\nInt\nRow major 1D index.\n\n\n\n\n\n\nasColVector\n\n\nopen fun asColVector():\nMatrix\n<T>\nReturns the given vector as a row vector. Will call transpose() on row vectors\n\n\n\n\n\n\nasRowVector\n\n\nopen fun asRowVector():\nMatrix\n<T>\nReturns the given vector as a row vector. Will call transpose() on column vectors\n\n\n\n\n\n\nchol\n\n\nabstract fun chol():\nMatrix\n<T>\n\n\n\n\n\n\ncopy\n\n\nabstract fun copy():\nMatrix\n<T>\n\n\n\n\n\n\ncumSum\n\n\nopen fun cumSum():\nMatrix\n<T>\nCalculates the cumulative (ongoing) sum of a matrix's elements. For example, \ncumsum(mat[1,2,3])\n would return \nmat[1,3,6]\n. Assumes matrix type is convertible to double.\n\n\n\n\n\n\ndet\n\n\nabstract fun det(): T\n\n\n\n\n\n\ndiag\n\n\nabstract fun diag():\nMatrix\n<T>\n\n\n\n\n\n\ndiv\n\n\nabstract operator fun div(other:\nInt\n):\nMatrix\n<T>\n\n\n\n\n\n\nelementSum\n\n\nabstract fun elementSum(): T\n\n\n\n\n\n\nepow\n\n\nabstract infix fun epow(other:\nInt\n):\nMatrix\n<T>\n\n\n\n\n\n\nexpm\n\n\nabstract fun expm():\nMatrix\n<T>\n\n\n\n\n\n\ngetBaseMatrix\n\n\nabstract fun getBaseMatrix():\nAny\nReturns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use \nget\n and \nset\n) to access the elements generically).\n\n\n\n\n\n\ngetCol\n\n\nabstract fun getCol(col:\nInt\n):\nMatrix\n<T>\n\n\n\n\n\n\ngetDouble\n\n\nabstract fun getDouble(i:\nInt\n, j:\nInt\n):\nDouble\nabstract fun getDouble(i:\nInt\n):\nDouble\n\n\n\n\n\n\ngetDoubleData\n\n\nabstract fun getDoubleData():\nDoubleArray\nRetrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known.\n\n\n\n\n\n\ngetFactory\n\n\nabstract fun getFactory():\nMatrixFactory\n<\nMatrix\n<T>>\nBecause sometimes all you have is a Matrix, but you really want a MatrixFactory.\n\n\n\n\n\n\ngetFloat\n\n\nabstract fun getFloat(i:\nInt\n):\nFloat\nabstract fun getFloat(i:\nInt\n, j:\nInt\n):\nFloat\n\n\n\n\n\n\ngetGeneric\n\n\nabstract fun getGeneric(i:\nInt\n): T\nabstract fun getGeneric(i:\nInt\n, j:\nInt\n): T\n\n\n\n\n\n\ngetInt\n\n\nabstract fun getInt(i:\nInt\n, j:\nInt\n):\nInt\nabstract fun getInt(i:\nInt\n):\nInt\n\n\n\n\n\n\ngetRow\n\n\nabstract fun getRow(row:\nInt\n):\nMatrix\n<T>\n\n\n\n\n\n\ninv\n\n\nabstract fun inv():\nMatrix\n<T>\n\n\n\n\n\n\nmax\n\n\nabstract fun max(): T\n\n\n\n\n\n\nmean\n\n\nabstract fun mean(): T\n\n\n\n\n\n\nmin\n\n\nabstract fun min(): T\n\n\n\n\n\n\nnorm\n\n\nabstract fun norm(): T\n\n\n\n\n\n\nnormF\n\n\nabstract fun normF(): T\n\n\n\n\n\n\nnormIndP1\n\n\nabstract fun normIndP1(): T\n\n\n\n\n\n\nnumCols\n\n\nabstract fun numCols():\nInt\n\n\n\n\n\n\nnumRows\n\n\nabstract fun numRows():\nInt\n\n\n\n\n\n\npinv\n\n\nabstract fun pinv():\nMatrix\n<T>\n\n\n\n\n\n\npow\n\n\nopen infix fun pow(exponent:\nInt\n):\nMatrix\n<T>\n\n\n\n\n\n\nrepr\n\n\nopen fun repr():\nString\n\n\n\n\n\n\nselectCols\n\n\nopen fun selectCols(vararg idxs:\nInt\n):\nMatrix\n<T>\nSelect a set of cols from a matrix to form the cols of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth cols of an input matrix, you would write \ninput.selectCols(0,1,4)\n.\nopen fun <U :\nNumber\n> selectCols(idxs:\nMatrix\n<U>):\nMatrix\n<T>\n\n\n\n\n\n\nselectRows\n\n\nopen fun selectRows(vararg idxs:\nInt\n):\nMatrix\n<T>\nSelect a set of rows from a matrix to form the rows of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth rows of an input matrix, you would write \ninput.selectRows(0,1,4)\n.\nopen fun <U :\nNumber\n> selectRows(idxs:\nMatrix\n<U>):\nMatrix\n<T>\n\n\n\n\n\n\nsetDouble\n\n\nabstract fun setDouble(i:\nInt\n, v:\nDouble\n):\nUnit\nabstract fun setDouble(i:\nInt\n, j:\nInt\n, v:\nDouble\n):\nUnit\n\n\n\n\n\n\nsetFloat\n\n\nabstract fun setFloat(i:\nInt\n, v:\nFloat\n):\nUnit\nabstract fun setFloat(i:\nInt\n, j:\nInt\n, v:\nFloat\n):\nUnit\n\n\n\n\n\n\nsetInt\n\n\nabstract fun setInt(i:\nInt\n, v:\nInt\n):\nUnit\nabstract fun setInt(i:\nInt\n, j:\nInt\n, v:\nInt\n):\nUnit\n\n\n\n\n\n\nto2DArray\n\n\nopen fun to2DArray():\nArray\n<\nDoubleArray\n>\nReturns a Matrix as a double 2D array. Intended for MATLAB interop.\n\n\n\n\n\n\ntoIterable\n\n\nopen fun toIterable():\nIterable\n<T>\n\n\n\n\n\n\ntrace\n\n\nabstract fun trace(): T\n\n\n\n\n\n\ntranspose\n\n\nabstract fun transpose():\nMatrix\n<T>\n\n\n\n\n\n\nunaryMinus\n\n\nabstract operator fun unaryMinus():\nMatrix\n<T>\n\n\n\n\n\n\nwrapRange\n\n\nopen fun wrapRange(range:\nIntRange\n, max:\nInt\n):\nIntRange\n\n\n\n\n\n\n\n\nExtension Functions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nget\n\n\noperator fun <T>\nMatrix\n<T>.get(i:\nInt\n, j:\nInt\n): T``operator fun <T>\nMatrix\n<T>.get(i:\nInt\n): T\nGets the ith element in the matrix. If 2D, selects elements in row-major order.\noperator fun <T>\nMatrix\n<T>.get(rows:\nIntRange\n, cols:\nIntRange\n):\nMatrix\n<T>\nAllow slicing, e.g. \nmatrix[1..2, 3..4]\n. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.\noperator fun <T>\nMatrix\n<T>.get(rows:\nIntRange\n, cols:\nInt\n):\nMatrix\n<T>\nAllows for slicing of the rows and selection of a single column\noperator fun <T>\nMatrix\n<T>.get(rows:\nInt\n, cols:\nIntRange\n):\nMatrix\n<T>\nAllows for slicing of the cols and selection of a single row\n\n\n\n\n\n\nset\n\n\noperator fun <T>\nMatrix\n<T>.set(i:\nInt\n, v: T):\nUnit\nSet the ith element in the matrix. If 2D, selects elements in row-major order.\noperator fun <T>\nMatrix\n<T>.set(i:\nInt\n, j:\nInt\n, v: T):\nUnit\noperator fun <T>\nMatrix\n<T>.set(rows:\nIntRange\n, cols:\nIntRange\n, value: T):\nUnit\noperator fun <T>\nMatrix\n<T>.set(rows:\nInt\n, cols:\nIntRange\n, value: T):\nUnit\noperator fun <T>\nMatrix\n<T>.set(rows:\nIntRange\n, cols:\nInt\n, value: T):\nUnit\noperator fun <T>\nMatrix\n<T>.set(rows:\nIntRange\n, cols:\nIntRange\n, value:\nMatrix\n<T>):\nUnit\nAllow assignment to a slice, e.g. \nmatrix[1..2, 3..4]\n=something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.\noperator fun <T>\nMatrix\n<T>.set(rows:\nInt\n, cols:\nIntRange\n, value:\nMatrix\n<T>):\nUnit\nAllow assignment to a slice, e.g. \nmatrix[2, 3..4]\n=something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range.\noperator fun <T>\nMatrix\n<T>.set(rows:\nIntRange\n, cols:\nInt\n, value:\nMatrix\n<T>):\nUnit\nAllow assignment to a slice, e.g. \nmatrix[1..2, 3]\n=something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.\n\n\n\n\n\n\n\n\nInheritors\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nDoubleMatrixBase\n\n\nabstract class DoubleMatrixBase : MatrixBase<\nDouble\n>\nSome functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions.",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-matrix-base/index.html#matrixbase",
            "text": "abstract class MatrixBase<T> : Matrix <T>",
            "title": "MatrixBase"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-matrix-base/index.html#constructors",
            "text": "Name  Summary      <init>  MatrixBase()",
            "title": "Constructors"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-matrix-base/index.html#inherited-properties",
            "text": "Name  Summary      T  open val T: Matrix <T> Transpose operator.",
            "title": "Inherited Properties"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-matrix-base/index.html#functions",
            "text": "Name  Summary      castOrCopy  fun <DType, TOuter : Matrix <DType>, TInner> castOrCopy(mat: Matrix <DType>, makeOuter: (TInner) -> TOuter, outerFac: MatrixFactory <TOuter>): TOuter Attempts to downcast a matrix to its specific subclass, accepting both inner wrapped types and outer types. Requires the  TOuter  constructor to be passed in because reified generics don't support ctor calls. If the passed mat cannot be cast, instead copies the data manually into a newly allocated matrix of the correct type.",
            "title": "Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-matrix-base/index.html#inherited-functions",
            "text": "Name  Summary      LU  abstract fun LU(): <ERROR CLASS>< Matrix <T>, Matrix <T>, Matrix <T>>    QR  abstract fun QR(): <ERROR CLASS>< Matrix <T>, Matrix <T>>    T  abstract fun T(): Matrix <T> Transpose operator.    argMax  abstract fun argMax(): Int Row major 1D index.    argMin  abstract fun argMin(): Int Row major 1D index.    asColVector  open fun asColVector(): Matrix <T> Returns the given vector as a row vector. Will call transpose() on row vectors    asRowVector  open fun asRowVector(): Matrix <T> Returns the given vector as a row vector. Will call transpose() on column vectors    chol  abstract fun chol(): Matrix <T>    copy  abstract fun copy(): Matrix <T>    cumSum  open fun cumSum(): Matrix <T> Calculates the cumulative (ongoing) sum of a matrix's elements. For example,  cumsum(mat[1,2,3])  would return  mat[1,3,6] . Assumes matrix type is convertible to double.    det  abstract fun det(): T    diag  abstract fun diag(): Matrix <T>    div  abstract operator fun div(other: Int ): Matrix <T>    elementSum  abstract fun elementSum(): T    epow  abstract infix fun epow(other: Int ): Matrix <T>    expm  abstract fun expm(): Matrix <T>    getBaseMatrix  abstract fun getBaseMatrix(): Any Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use  get  and  set ) to access the elements generically).    getCol  abstract fun getCol(col: Int ): Matrix <T>    getDouble  abstract fun getDouble(i: Int , j: Int ): Double abstract fun getDouble(i: Int ): Double    getDoubleData  abstract fun getDoubleData(): DoubleArray Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known.    getFactory  abstract fun getFactory(): MatrixFactory < Matrix <T>> Because sometimes all you have is a Matrix, but you really want a MatrixFactory.    getFloat  abstract fun getFloat(i: Int ): Float abstract fun getFloat(i: Int , j: Int ): Float    getGeneric  abstract fun getGeneric(i: Int ): T abstract fun getGeneric(i: Int , j: Int ): T    getInt  abstract fun getInt(i: Int , j: Int ): Int abstract fun getInt(i: Int ): Int    getRow  abstract fun getRow(row: Int ): Matrix <T>    inv  abstract fun inv(): Matrix <T>    max  abstract fun max(): T    mean  abstract fun mean(): T    min  abstract fun min(): T    norm  abstract fun norm(): T    normF  abstract fun normF(): T    normIndP1  abstract fun normIndP1(): T    numCols  abstract fun numCols(): Int    numRows  abstract fun numRows(): Int    pinv  abstract fun pinv(): Matrix <T>    pow  open infix fun pow(exponent: Int ): Matrix <T>    repr  open fun repr(): String    selectCols  open fun selectCols(vararg idxs: Int ): Matrix <T> Select a set of cols from a matrix to form the cols of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth cols of an input matrix, you would write  input.selectCols(0,1,4) . open fun <U : Number > selectCols(idxs: Matrix <U>): Matrix <T>    selectRows  open fun selectRows(vararg idxs: Int ): Matrix <T> Select a set of rows from a matrix to form the rows of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth rows of an input matrix, you would write  input.selectRows(0,1,4) . open fun <U : Number > selectRows(idxs: Matrix <U>): Matrix <T>    setDouble  abstract fun setDouble(i: Int , v: Double ): Unit abstract fun setDouble(i: Int , j: Int , v: Double ): Unit    setFloat  abstract fun setFloat(i: Int , v: Float ): Unit abstract fun setFloat(i: Int , j: Int , v: Float ): Unit    setInt  abstract fun setInt(i: Int , v: Int ): Unit abstract fun setInt(i: Int , j: Int , v: Int ): Unit    to2DArray  open fun to2DArray(): Array < DoubleArray > Returns a Matrix as a double 2D array. Intended for MATLAB interop.    toIterable  open fun toIterable(): Iterable <T>    trace  abstract fun trace(): T    transpose  abstract fun transpose(): Matrix <T>    unaryMinus  abstract operator fun unaryMinus(): Matrix <T>    wrapRange  open fun wrapRange(range: IntRange , max: Int ): IntRange",
            "title": "Inherited Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-matrix-base/index.html#extension-functions",
            "text": "Name  Summary      get  operator fun <T> Matrix <T>.get(i: Int , j: Int ): T``operator fun <T> Matrix <T>.get(i: Int ): T Gets the ith element in the matrix. If 2D, selects elements in row-major order. operator fun <T> Matrix <T>.get(rows: IntRange , cols: IntRange ): Matrix <T> Allow slicing, e.g.  matrix[1..2, 3..4] . Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun <T> Matrix <T>.get(rows: IntRange , cols: Int ): Matrix <T> Allows for slicing of the rows and selection of a single column operator fun <T> Matrix <T>.get(rows: Int , cols: IntRange ): Matrix <T> Allows for slicing of the cols and selection of a single row    set  operator fun <T> Matrix <T>.set(i: Int , v: T): Unit Set the ith element in the matrix. If 2D, selects elements in row-major order. operator fun <T> Matrix <T>.set(i: Int , j: Int , v: T): Unit operator fun <T> Matrix <T>.set(rows: IntRange , cols: IntRange , value: T): Unit operator fun <T> Matrix <T>.set(rows: Int , cols: IntRange , value: T): Unit operator fun <T> Matrix <T>.set(rows: IntRange , cols: Int , value: T): Unit operator fun <T> Matrix <T>.set(rows: IntRange , cols: IntRange , value: Matrix <T>): Unit Allow assignment to a slice, e.g.  matrix[1..2, 3..4] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun <T> Matrix <T>.set(rows: Int , cols: IntRange , value: Matrix <T>): Unit Allow assignment to a slice, e.g.  matrix[2, 3..4] =something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range. operator fun <T> Matrix <T>.set(rows: IntRange , cols: Int , value: Matrix <T>): Unit Allow assignment to a slice, e.g.  matrix[1..2, 3] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.",
            "title": "Extension Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.common/-matrix-base/index.html#inheritors",
            "text": "Name  Summary      DoubleMatrixBase  abstract class DoubleMatrixBase : MatrixBase< Double > Some functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions.",
            "title": "Inheritors"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/index.html",
            "text": "api\n / \nkoma.matrix.default\n\n\nPackage koma.matrix.default\n\n\nA set of (unoptimized) implementations of Matrices that run on all platforms.\n\n\nTypes\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nDefaultDoubleMatrix\n\n\nclass DefaultDoubleMatrix :\nMatrix\n<\nDouble\n>\n\n\n\n\n\n\nDefaultDoubleMatrixFactory\n\n\nclass DefaultDoubleMatrixFactory :\nMatrixFactory\n<\nMatrix\n<\nDouble\n>>\n\n\n\n\n\n\nDefaultFloatMatrix\n\n\nclass DefaultFloatMatrix :\nMatrix\n<\nFloat\n>\n\n\n\n\n\n\nDefaultFloatMatrixFactory\n\n\nclass DefaultFloatMatrixFactory :\nMatrixFactory\n<\nMatrix\n<\nFloat\n>>\n\n\n\n\n\n\nDefaultIntMatrix\n\n\nclass DefaultIntMatrix :\nMatrix\n<\nInt\n>\n\n\n\n\n\n\nDefaultIntMatrixFactory\n\n\nclass DefaultIntMatrixFactory :\nMatrixFactory\n<\nMatrix\n<\nInt\n>>\n\n\n\n\n\n\nDefaultLongMatrix\n\n\nclass DefaultLongMatrix :\nMatrix\n<\nLong\n>\n\n\n\n\n\n\nDefaultLongMatrixFactory\n\n\nclass DefaultLongMatrixFactory :\nMatrixFactory\n<\nMatrix\n<\nLong\n>>",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/index.html#package-komamatrixdefault",
            "text": "A set of (unoptimized) implementations of Matrices that run on all platforms.",
            "title": "Package koma.matrix.default"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/index.html#types",
            "text": "Name  Summary      DefaultDoubleMatrix  class DefaultDoubleMatrix : Matrix < Double >    DefaultDoubleMatrixFactory  class DefaultDoubleMatrixFactory : MatrixFactory < Matrix < Double >>    DefaultFloatMatrix  class DefaultFloatMatrix : Matrix < Float >    DefaultFloatMatrixFactory  class DefaultFloatMatrixFactory : MatrixFactory < Matrix < Float >>    DefaultIntMatrix  class DefaultIntMatrix : Matrix < Int >    DefaultIntMatrixFactory  class DefaultIntMatrixFactory : MatrixFactory < Matrix < Int >>    DefaultLongMatrix  class DefaultLongMatrix : Matrix < Long >    DefaultLongMatrixFactory  class DefaultLongMatrixFactory : MatrixFactory < Matrix < Long >>",
            "title": "Types"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/-init-/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \n<init>\n\n\n<init>\n\n\nDefaultDoubleMatrix(rows:\nInt\n, cols:\nInt\n)",
            "title": " init "
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/-init-/index.html#init",
            "text": "DefaultDoubleMatrix(rows: Int , cols: Int )",
            "title": "&lt;init&gt;"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/-l-u/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \nLU\n\n\nLU\n\n\nfun LU(): <ERROR CLASS><\nMatrix\n<\nDouble\n>,\nMatrix\n<\nDouble\n>,\nMatrix\n<\nDouble\n>>\n\n\nOverrides \nMatrix.LU",
            "title": " l u"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/-l-u/index.html#lu",
            "text": "fun LU(): <ERROR CLASS>< Matrix < Double >, Matrix < Double >, Matrix < Double >>  Overrides  Matrix.LU",
            "title": "LU"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/-q-r/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \nQR\n\n\nQR\n\n\nfun QR(): <ERROR CLASS><\nMatrix\n<\nDouble\n>,\nMatrix\n<\nDouble\n>>\n\n\nOverrides \nMatrix.QR",
            "title": " q r"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/-q-r/index.html#qr",
            "text": "fun QR(): <ERROR CLASS>< Matrix < Double >, Matrix < Double >>  Overrides  Matrix.QR",
            "title": "QR"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/-t/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \nT\n\n\nT\n\n\nfun T():\nMatrix\n<\nDouble\n>\n\n\nOverrides \nMatrix.T\n\n\nTranspose operator.",
            "title": " t"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/-t/index.html#t",
            "text": "fun T(): Matrix < Double >  Overrides  Matrix.T  Transpose operator.",
            "title": "T"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/arg-max/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \nargMax\n\n\nargMax\n\n\nfun argMax():\nInt\n\n\nOverrides \nMatrix.argMax\n\n\nRow major 1D index.",
            "title": "Arg max"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/arg-max/index.html#argmax",
            "text": "fun argMax(): Int  Overrides  Matrix.argMax  Row major 1D index.",
            "title": "argMax"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/arg-min/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \nargMin\n\n\nargMin\n\n\nfun argMin():\nInt\n\n\nOverrides \nMatrix.argMin\n\n\nRow major 1D index.",
            "title": "Arg min"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/arg-min/index.html#argmin",
            "text": "fun argMin(): Int  Overrides  Matrix.argMin  Row major 1D index.",
            "title": "argMin"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/chol/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \nchol\n\n\nchol\n\n\nfun chol():\nMatrix\n<\nDouble\n>\n\n\nOverrides \nMatrix.chol",
            "title": "Chol"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/chol/index.html#chol",
            "text": "fun chol(): Matrix < Double >  Overrides  Matrix.chol",
            "title": "chol"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/cols/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \ncols\n\n\ncols\n\n\nval cols:\nInt",
            "title": "Cols"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/cols/index.html#cols",
            "text": "val cols: Int",
            "title": "cols"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/copy/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \ncopy\n\n\ncopy\n\n\nfun copy():\nMatrix\n<\nDouble\n>\n\n\nOverrides \nMatrix.copy",
            "title": "Copy"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/copy/index.html#copy",
            "text": "fun copy(): Matrix < Double >  Overrides  Matrix.copy",
            "title": "copy"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/det/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \ndet\n\n\ndet\n\n\nfun det():\nDouble\n\n\nOverrides \nMatrix.det",
            "title": "Det"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/det/index.html#det",
            "text": "fun det(): Double  Overrides  Matrix.det",
            "title": "det"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/diag/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \ndiag\n\n\ndiag\n\n\nfun diag():\nMatrix\n<\nDouble\n>\n\n\nOverrides \nMatrix.diag",
            "title": "Diag"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/diag/index.html#diag",
            "text": "fun diag(): Matrix < Double >  Overrides  Matrix.diag",
            "title": "diag"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/div/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \ndiv\n\n\ndiv\n\n\nfun div(other:\nDouble\n):\nMatrix\n<\nDouble\n>\n\n\nfun div(other:\nInt\n):\nMatrix\n<\nDouble\n>\n\n\nOverrides \nMatrix.div",
            "title": "Div"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/div/index.html#div",
            "text": "fun div(other: Double ): Matrix < Double >  fun div(other: Int ): Matrix < Double >  Overrides  Matrix.div",
            "title": "div"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/element-sum/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \nelementSum\n\n\nelementSum\n\n\nfun elementSum():\nDouble\n\n\nOverrides \nMatrix.elementSum",
            "title": "Element sum"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/element-sum/index.html#elementsum",
            "text": "fun elementSum(): Double  Overrides  Matrix.elementSum",
            "title": "elementSum"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/element-times/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \nelementTimes\n\n\nelementTimes\n\n\nfun elementTimes(other:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>",
            "title": "Element times"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/element-times/index.html#elementtimes",
            "text": "fun elementTimes(other: Matrix < Double >): Matrix < Double >",
            "title": "elementTimes"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/epow/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \nepow\n\n\nepow\n\n\nfun epow(other:\nDouble\n):\nMatrix\n<\nDouble\n>\n\n\nfun epow(other:\nInt\n):\nMatrix\n<\nDouble\n>\n\n\nOverrides \nMatrix.epow",
            "title": "Epow"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/epow/index.html#epow",
            "text": "fun epow(other: Double ): Matrix < Double >  fun epow(other: Int ): Matrix < Double >  Overrides  Matrix.epow",
            "title": "epow"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/expm/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \nexpm\n\n\nexpm\n\n\nfun expm():\nMatrix\n<\nDouble\n>\n\n\nOverrides \nMatrix.expm",
            "title": "Expm"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/expm/index.html#expm",
            "text": "fun expm(): Matrix < Double >  Overrides  Matrix.expm",
            "title": "expm"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/get-base-matrix/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \ngetBaseMatrix\n\n\ngetBaseMatrix\n\n\nfun getBaseMatrix():\nAny\n\n\nOverrides \nMatrix.getBaseMatrix\n\n\nReturns the underlying matrix object from the back-end this Matrix is wrapping. This should be used\nsparingly (as it breaks encapsulation), but it can increase performance by using computation specifically\ndesigned for a particular back-end. Code using this method should not rely on a particular back-end, and\nshould always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use \nget\n and \nset\n)\nto access the elements generically).",
            "title": "Get base matrix"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/get-base-matrix/index.html#getbasematrix",
            "text": "fun getBaseMatrix(): Any  Overrides  Matrix.getBaseMatrix  Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used\nsparingly (as it breaks encapsulation), but it can increase performance by using computation specifically\ndesigned for a particular back-end. Code using this method should not rely on a particular back-end, and\nshould always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use  get  and  set )\nto access the elements generically).",
            "title": "getBaseMatrix"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/get-col/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \ngetCol\n\n\ngetCol\n\n\nfun getCol(col:\nInt\n):\nMatrix\n<\nDouble\n>\n\n\nOverrides \nMatrix.getCol",
            "title": "Get col"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/get-col/index.html#getcol",
            "text": "fun getCol(col: Int ): Matrix < Double >  Overrides  Matrix.getCol",
            "title": "getCol"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/get-double-data/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \ngetDoubleData\n\n\ngetDoubleData\n\n\nfun getDoubleData():\nDoubleArray\n\n\nOverrides \nMatrix.getDoubleData\n\n\nRetrieves the data formatted as doubles in row-major order\nThis method is only for performance over potentially boxing get(Double)\nmethods. This method may or may not return a copy, and thus should be\ntreated as read-only unless backend behavior is known.",
            "title": "Get double data"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/get-double-data/index.html#getdoubledata",
            "text": "fun getDoubleData(): DoubleArray  Overrides  Matrix.getDoubleData  Retrieves the data formatted as doubles in row-major order\nThis method is only for performance over potentially boxing get(Double)\nmethods. This method may or may not return a copy, and thus should be\ntreated as read-only unless backend behavior is known.",
            "title": "getDoubleData"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/get-double/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \ngetDouble\n\n\ngetDouble\n\n\nfun getDouble(i:\nInt\n, j:\nInt\n):\nDouble\n\n\nOverrides \nMatrix.getDouble\n\n\nfun getDouble(i:\nInt\n):\nDouble\n\n\nOverrides \nMatrix.getDouble",
            "title": "Get double"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/get-double/index.html#getdouble",
            "text": "fun getDouble(i: Int , j: Int ): Double  Overrides  Matrix.getDouble  fun getDouble(i: Int ): Double  Overrides  Matrix.getDouble",
            "title": "getDouble"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/get-factory/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \ngetFactory\n\n\ngetFactory\n\n\nfun getFactory():\nMatrixFactory\n<\nMatrix\n<\nDouble\n>>\n\n\nOverrides \nMatrix.getFactory\n\n\nBecause sometimes all you have is a Matrix, but you really want a MatrixFactory.",
            "title": "Get factory"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/get-factory/index.html#getfactory",
            "text": "fun getFactory(): MatrixFactory < Matrix < Double >>  Overrides  Matrix.getFactory  Because sometimes all you have is a Matrix, but you really want a MatrixFactory.",
            "title": "getFactory"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/get-float/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \ngetFloat\n\n\ngetFloat\n\n\nfun getFloat(i:\nInt\n, j:\nInt\n):\nFloat\n\n\nOverrides \nMatrix.getFloat\n\n\nfun getFloat(i:\nInt\n):\nFloat\n\n\nOverrides \nMatrix.getFloat",
            "title": "Get float"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/get-float/index.html#getfloat",
            "text": "fun getFloat(i: Int , j: Int ): Float  Overrides  Matrix.getFloat  fun getFloat(i: Int ): Float  Overrides  Matrix.getFloat",
            "title": "getFloat"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/get-generic/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \ngetGeneric\n\n\ngetGeneric\n\n\nfun getGeneric(i:\nInt\n, j:\nInt\n):\nDouble\n\n\nOverrides \nMatrix.getGeneric\n\n\nfun getGeneric(i:\nInt\n):\nDouble\n\n\nOverrides \nMatrix.getGeneric",
            "title": "Get generic"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/get-generic/index.html#getgeneric",
            "text": "fun getGeneric(i: Int , j: Int ): Double  Overrides  Matrix.getGeneric  fun getGeneric(i: Int ): Double  Overrides  Matrix.getGeneric",
            "title": "getGeneric"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/get-int/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \ngetInt\n\n\ngetInt\n\n\nfun getInt(i:\nInt\n, j:\nInt\n):\nInt\n\n\nOverrides \nMatrix.getInt\n\n\nfun getInt(i:\nInt\n):\nInt\n\n\nOverrides \nMatrix.getInt",
            "title": "Get int"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/get-int/index.html#getint",
            "text": "fun getInt(i: Int , j: Int ): Int  Overrides  Matrix.getInt  fun getInt(i: Int ): Int  Overrides  Matrix.getInt",
            "title": "getInt"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/get-row/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \ngetRow\n\n\ngetRow\n\n\nfun getRow(row:\nInt\n):\nMatrix\n<\nDouble\n>\n\n\nOverrides \nMatrix.getRow",
            "title": "Get row"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/get-row/index.html#getrow",
            "text": "fun getRow(row: Int ): Matrix < Double >  Overrides  Matrix.getRow",
            "title": "getRow"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n\n\nDefaultDoubleMatrix\n\n\nclass DefaultDoubleMatrix :\nMatrix\n<\nDouble\n>\n\n\nConstructors\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\n<init>\n\n\nDefaultDoubleMatrix(rows:\nInt\n, cols:\nInt\n)\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\ncols\n\n\nval cols:\nInt\n\n\n\n\n\n\nrows\n\n\nval rows:\nInt\n\n\n\n\n\n\nstorage\n\n\nval storage:\nDoubleArray\n\n\n\n\n\n\n\n\nInherited Properties\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nT\n\n\nopen val T:\nMatrix\n<T>\nTranspose operator.\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nLU\n\n\nfun LU(): <ERROR CLASS><\nMatrix\n<\nDouble\n>,\nMatrix\n<\nDouble\n>,\nMatrix\n<\nDouble\n>>\n\n\n\n\n\n\nQR\n\n\nfun QR(): <ERROR CLASS><\nMatrix\n<\nDouble\n>,\nMatrix\n<\nDouble\n>>\n\n\n\n\n\n\nT\n\n\nfun T():\nMatrix\n<\nDouble\n>\nTranspose operator.\n\n\n\n\n\n\nargMax\n\n\nfun argMax():\nInt\nRow major 1D index.\n\n\n\n\n\n\nargMin\n\n\nfun argMin():\nInt\nRow major 1D index.\n\n\n\n\n\n\nchol\n\n\nfun chol():\nMatrix\n<\nDouble\n>\n\n\n\n\n\n\ncopy\n\n\nfun copy():\nMatrix\n<\nDouble\n>\n\n\n\n\n\n\ndet\n\n\nfun det():\nDouble\n\n\n\n\n\n\ndiag\n\n\nfun diag():\nMatrix\n<\nDouble\n>\n\n\n\n\n\n\ndiv\n\n\nfun div(other:\nDouble\n):\nMatrix\n<\nDouble\n>\nfun div(other:\nInt\n):\nMatrix\n<\nDouble\n>\n\n\n\n\n\n\nelementSum\n\n\nfun elementSum():\nDouble\n\n\n\n\n\n\nelementTimes\n\n\nfun elementTimes(other:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\n\n\n\n\n\n\nepow\n\n\nfun epow(other:\nDouble\n):\nMatrix\n<\nDouble\n>\nfun epow(other:\nInt\n):\nMatrix\n<\nDouble\n>\n\n\n\n\n\n\nexpm\n\n\nfun expm():\nMatrix\n<\nDouble\n>\n\n\n\n\n\n\ngetBaseMatrix\n\n\nfun getBaseMatrix():\nAny\nReturns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use \nget\n and \nset\n) to access the elements generically).\n\n\n\n\n\n\ngetCol\n\n\nfun getCol(col:\nInt\n):\nMatrix\n<\nDouble\n>\n\n\n\n\n\n\ngetDouble\n\n\nfun getDouble(i:\nInt\n, j:\nInt\n):\nDouble\nfun getDouble(i:\nInt\n):\nDouble\n\n\n\n\n\n\ngetDoubleData\n\n\nfun getDoubleData():\nDoubleArray\nRetrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known.\n\n\n\n\n\n\ngetFactory\n\n\nfun getFactory():\nMatrixFactory\n<\nMatrix\n<\nDouble\n>>\nBecause sometimes all you have is a Matrix, but you really want a MatrixFactory.\n\n\n\n\n\n\ngetFloat\n\n\nfun getFloat(i:\nInt\n, j:\nInt\n):\nFloat\nfun getFloat(i:\nInt\n):\nFloat\n\n\n\n\n\n\ngetGeneric\n\n\nfun getGeneric(i:\nInt\n, j:\nInt\n):\nDouble\nfun getGeneric(i:\nInt\n):\nDouble\n\n\n\n\n\n\ngetInt\n\n\nfun getInt(i:\nInt\n, j:\nInt\n):\nInt\nfun getInt(i:\nInt\n):\nInt\n\n\n\n\n\n\ngetRow\n\n\nfun getRow(row:\nInt\n):\nMatrix\n<\nDouble\n>\n\n\n\n\n\n\ninv\n\n\nfun inv():\nMatrix\n<\nDouble\n>\n\n\n\n\n\n\nmax\n\n\nfun max():\nDouble\n\n\n\n\n\n\nmean\n\n\nfun mean():\nDouble\n\n\n\n\n\n\nmin\n\n\nfun min():\nDouble\n\n\n\n\n\n\nminus\n\n\nfun minus(other:\nDouble\n):\nMatrix\n<\nDouble\n>\nfun minus(other:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\n\n\n\n\n\n\nnorm\n\n\nfun norm():\nDouble\n\n\n\n\n\n\nnormF\n\n\nfun normF():\nDouble\n\n\n\n\n\n\nnormIndP1\n\n\nfun normIndP1():\nDouble\n\n\n\n\n\n\nnumCols\n\n\nfun numCols():\nInt\n\n\n\n\n\n\nnumRows\n\n\nfun numRows():\nInt\n\n\n\n\n\n\npinv\n\n\nfun pinv():\nMatrix\n<\nDouble\n>\n\n\n\n\n\n\nplus\n\n\nfun plus(other:\nDouble\n):\nMatrix\n<\nDouble\n>\nfun plus(other:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\n\n\n\n\n\n\nrem\n\n\nfun rem(other:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\n\n\n\n\n\n\nsetCol\n\n\nfun setCol(index:\nInt\n, col:\nMatrix\n<\nDouble\n>):\nUnit\n\n\n\n\n\n\nsetDouble\n\n\nfun setDouble(i:\nInt\n, v:\nDouble\n):\nUnit\nfun setDouble(i:\nInt\n, j:\nInt\n, v:\nDouble\n):\nUnit\n\n\n\n\n\n\nsetFloat\n\n\nfun setFloat(i:\nInt\n, v:\nFloat\n):\nUnit\nfun setFloat(i:\nInt\n, j:\nInt\n, v:\nFloat\n):\nUnit\n\n\n\n\n\n\nsetGeneric\n\n\nfun setGeneric(i:\nInt\n, v:\nDouble\n):\nUnit\nfun setGeneric(i:\nInt\n, j:\nInt\n, v:\nDouble\n):\nUnit\n\n\n\n\n\n\nsetInt\n\n\nfun setInt(i:\nInt\n, v:\nInt\n):\nUnit\nfun setInt(i:\nInt\n, j:\nInt\n, v:\nInt\n):\nUnit\n\n\n\n\n\n\nsetRow\n\n\nfun setRow(index:\nInt\n, row:\nMatrix\n<\nDouble\n>):\nUnit\n\n\n\n\n\n\nsolve\n\n\nfun solve(A:\nMatrix\n<\nDouble\n>, B:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\n\n\n\n\n\n\ntimes\n\n\nfun times(other:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\nfun times(other:\nDouble\n):\nMatrix\n<\nDouble\n>\n\n\n\n\n\n\ntrace\n\n\nfun trace():\nDouble\n\n\n\n\n\n\ntranspose\n\n\nfun transpose():\nMatrix\n<\nDouble\n>\n\n\n\n\n\n\nunaryMinus\n\n\nfun unaryMinus():\nMatrix\n<\nDouble\n>\n\n\n\n\n\n\n\n\nInherited Functions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nasColVector\n\n\nopen fun asColVector():\nMatrix\n<T>\nReturns the given vector as a row vector. Will call transpose() on row vectors\n\n\n\n\n\n\nasRowVector\n\n\nopen fun asRowVector():\nMatrix\n<T>\nReturns the given vector as a row vector. Will call transpose() on column vectors\n\n\n\n\n\n\ncumSum\n\n\nopen fun cumSum():\nMatrix\n<T>\nCalculates the cumulative (ongoing) sum of a matrix's elements. For example, \ncumsum(mat[1,2,3])\n would return \nmat[1,3,6]\n. Assumes matrix type is convertible to double.\n\n\n\n\n\n\npow\n\n\nopen infix fun pow(exponent:\nInt\n):\nMatrix\n<T>\n\n\n\n\n\n\nrepr\n\n\nopen fun repr():\nString\n\n\n\n\n\n\nselectCols\n\n\nopen fun selectCols(vararg idxs:\nInt\n):\nMatrix\n<T>\nSelect a set of cols from a matrix to form the cols of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth cols of an input matrix, you would write \ninput.selectCols(0,1,4)\n.\nopen fun <U :\nNumber\n> selectCols(idxs:\nMatrix\n<U>):\nMatrix\n<T>\n\n\n\n\n\n\nselectRows\n\n\nopen fun selectRows(vararg idxs:\nInt\n):\nMatrix\n<T>\nSelect a set of rows from a matrix to form the rows of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth rows of an input matrix, you would write \ninput.selectRows(0,1,4)\n.\nopen fun <U :\nNumber\n> selectRows(idxs:\nMatrix\n<U>):\nMatrix\n<T>\n\n\n\n\n\n\nto2DArray\n\n\nopen fun to2DArray():\nArray\n<\nDoubleArray\n>\nReturns a Matrix as a double 2D array. Intended for MATLAB interop.\n\n\n\n\n\n\ntoIterable\n\n\nopen fun toIterable():\nIterable\n<T>\n\n\n\n\n\n\nwrapRange\n\n\nopen fun wrapRange(range:\nIntRange\n, max:\nInt\n):\nIntRange\n\n\n\n\n\n\n\n\nExtension Functions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nemul\n\n\ninfix fun\nMatrix\n<\nDouble\n>.emul(other:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\nAllow infix operator \"a emul b\" to be element-wise multiplication of two matrices.\n\n\n\n\n\n\nget\n\n\noperator fun <T>\nMatrix\n<T>.get(rows:\nIntRange\n, cols:\nIntRange\n):\nMatrix\n<T>\nAllow slicing, e.g. \nmatrix[1..2, 3..4]\n. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.\noperator fun <T>\nMatrix\n<T>.get(rows:\nIntRange\n, cols:\nInt\n):\nMatrix\n<T>\nAllows for slicing of the rows and selection of a single column\noperator fun <T>\nMatrix\n<T>.get(rows:\nInt\n, cols:\nIntRange\n):\nMatrix\n<T>\nAllows for slicing of the cols and selection of a single row\n\n\n\n\n\n\nminus\n\n\noperator fun\nMatrix\n<\nDouble\n>.minus(value:\nInt\n):\nMatrix\n<\nDouble\n>\nAllow operator overloading with non-Double scalars\n\n\n\n\n\n\nplus\n\n\noperator fun\nMatrix\n<\nDouble\n>.plus(value:\nInt\n):\nMatrix\n<\nDouble\n>\nAllow operator overloading with non-Double scalars\n\n\n\n\n\n\nset\n\n\noperator fun <T>\nMatrix\n<T>.set(i:\nInt\n, v: T):\nUnit\nSet the ith element in the matrix. If 2D, selects elements in row-major order.\noperator fun <T>\nMatrix\n<T>.set(i:\nInt\n, j:\nInt\n, v: T):\nUnit\noperator fun <T>\nMatrix\n<T>.set(rows:\nIntRange\n, cols:\nIntRange\n, value: T):\nUnit\noperator fun <T>\nMatrix\n<T>.set(rows:\nInt\n, cols:\nIntRange\n, value: T):\nUnit\noperator fun <T>\nMatrix\n<T>.set(rows:\nIntRange\n, cols:\nInt\n, value: T):\nUnit\noperator fun\nMatrix\n<\nDouble\n>.set(i:\nInt\n, v:\nDouble\n):\nUnit\noperator fun\nMatrix\n<\nDouble\n>.set(i:\nInt\n, j:\nInt\n, v:\nDouble\n):\nUnit\noperator fun\nMatrix\n<\nDouble\n>.set(i:\nInt\n, v:\nInt\n):\nUnit\noperator fun\nMatrix\n<\nDouble\n>.set(i:\nInt\n, j:\nInt\n, v:\nInt\n):\nUnit\noperator fun <T>\nMatrix\n<T>.set(rows:\nIntRange\n, cols:\nIntRange\n, value:\nMatrix\n<T>):\nUnit\nAllow assignment to a slice, e.g. \nmatrix[1..2, 3..4]\n=something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.\noperator fun <T>\nMatrix\n<T>.set(rows:\nInt\n, cols:\nIntRange\n, value:\nMatrix\n<T>):\nUnit\nAllow assignment to a slice, e.g. \nmatrix[2, 3..4]\n=something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range.\noperator fun <T>\nMatrix\n<T>.set(rows:\nIntRange\n, cols:\nInt\n, value:\nMatrix\n<T>):\nUnit\nAllow assignment to a slice, e.g. \nmatrix[1..2, 3]\n=something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.\n\n\n\n\n\n\ntimes\n\n\noperator fun\nMatrix\n<\nDouble\n>.times(other:\nInt\n):\nMatrix\n<\nDouble\n>\nMultiply a scalar by a matrix",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/index.html#defaultdoublematrix",
            "text": "class DefaultDoubleMatrix : Matrix < Double >",
            "title": "DefaultDoubleMatrix"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/index.html#constructors",
            "text": "Name  Summary      <init>  DefaultDoubleMatrix(rows: Int , cols: Int )",
            "title": "Constructors"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/index.html#properties",
            "text": "Name  Summary      cols  val cols: Int    rows  val rows: Int    storage  val storage: DoubleArray",
            "title": "Properties"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/index.html#inherited-properties",
            "text": "Name  Summary      T  open val T: Matrix <T> Transpose operator.",
            "title": "Inherited Properties"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/index.html#functions",
            "text": "Name  Summary      LU  fun LU(): <ERROR CLASS>< Matrix < Double >, Matrix < Double >, Matrix < Double >>    QR  fun QR(): <ERROR CLASS>< Matrix < Double >, Matrix < Double >>    T  fun T(): Matrix < Double > Transpose operator.    argMax  fun argMax(): Int Row major 1D index.    argMin  fun argMin(): Int Row major 1D index.    chol  fun chol(): Matrix < Double >    copy  fun copy(): Matrix < Double >    det  fun det(): Double    diag  fun diag(): Matrix < Double >    div  fun div(other: Double ): Matrix < Double > fun div(other: Int ): Matrix < Double >    elementSum  fun elementSum(): Double    elementTimes  fun elementTimes(other: Matrix < Double >): Matrix < Double >    epow  fun epow(other: Double ): Matrix < Double > fun epow(other: Int ): Matrix < Double >    expm  fun expm(): Matrix < Double >    getBaseMatrix  fun getBaseMatrix(): Any Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use  get  and  set ) to access the elements generically).    getCol  fun getCol(col: Int ): Matrix < Double >    getDouble  fun getDouble(i: Int , j: Int ): Double fun getDouble(i: Int ): Double    getDoubleData  fun getDoubleData(): DoubleArray Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known.    getFactory  fun getFactory(): MatrixFactory < Matrix < Double >> Because sometimes all you have is a Matrix, but you really want a MatrixFactory.    getFloat  fun getFloat(i: Int , j: Int ): Float fun getFloat(i: Int ): Float    getGeneric  fun getGeneric(i: Int , j: Int ): Double fun getGeneric(i: Int ): Double    getInt  fun getInt(i: Int , j: Int ): Int fun getInt(i: Int ): Int    getRow  fun getRow(row: Int ): Matrix < Double >    inv  fun inv(): Matrix < Double >    max  fun max(): Double    mean  fun mean(): Double    min  fun min(): Double    minus  fun minus(other: Double ): Matrix < Double > fun minus(other: Matrix < Double >): Matrix < Double >    norm  fun norm(): Double    normF  fun normF(): Double    normIndP1  fun normIndP1(): Double    numCols  fun numCols(): Int    numRows  fun numRows(): Int    pinv  fun pinv(): Matrix < Double >    plus  fun plus(other: Double ): Matrix < Double > fun plus(other: Matrix < Double >): Matrix < Double >    rem  fun rem(other: Matrix < Double >): Matrix < Double >    setCol  fun setCol(index: Int , col: Matrix < Double >): Unit    setDouble  fun setDouble(i: Int , v: Double ): Unit fun setDouble(i: Int , j: Int , v: Double ): Unit    setFloat  fun setFloat(i: Int , v: Float ): Unit fun setFloat(i: Int , j: Int , v: Float ): Unit    setGeneric  fun setGeneric(i: Int , v: Double ): Unit fun setGeneric(i: Int , j: Int , v: Double ): Unit    setInt  fun setInt(i: Int , v: Int ): Unit fun setInt(i: Int , j: Int , v: Int ): Unit    setRow  fun setRow(index: Int , row: Matrix < Double >): Unit    solve  fun solve(A: Matrix < Double >, B: Matrix < Double >): Matrix < Double >    times  fun times(other: Matrix < Double >): Matrix < Double > fun times(other: Double ): Matrix < Double >    trace  fun trace(): Double    transpose  fun transpose(): Matrix < Double >    unaryMinus  fun unaryMinus(): Matrix < Double >",
            "title": "Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/index.html#inherited-functions",
            "text": "Name  Summary      asColVector  open fun asColVector(): Matrix <T> Returns the given vector as a row vector. Will call transpose() on row vectors    asRowVector  open fun asRowVector(): Matrix <T> Returns the given vector as a row vector. Will call transpose() on column vectors    cumSum  open fun cumSum(): Matrix <T> Calculates the cumulative (ongoing) sum of a matrix's elements. For example,  cumsum(mat[1,2,3])  would return  mat[1,3,6] . Assumes matrix type is convertible to double.    pow  open infix fun pow(exponent: Int ): Matrix <T>    repr  open fun repr(): String    selectCols  open fun selectCols(vararg idxs: Int ): Matrix <T> Select a set of cols from a matrix to form the cols of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth cols of an input matrix, you would write  input.selectCols(0,1,4) . open fun <U : Number > selectCols(idxs: Matrix <U>): Matrix <T>    selectRows  open fun selectRows(vararg idxs: Int ): Matrix <T> Select a set of rows from a matrix to form the rows of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth rows of an input matrix, you would write  input.selectRows(0,1,4) . open fun <U : Number > selectRows(idxs: Matrix <U>): Matrix <T>    to2DArray  open fun to2DArray(): Array < DoubleArray > Returns a Matrix as a double 2D array. Intended for MATLAB interop.    toIterable  open fun toIterable(): Iterable <T>    wrapRange  open fun wrapRange(range: IntRange , max: Int ): IntRange",
            "title": "Inherited Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/index.html#extension-functions",
            "text": "Name  Summary      emul  infix fun Matrix < Double >.emul(other: Matrix < Double >): Matrix < Double > Allow infix operator \"a emul b\" to be element-wise multiplication of two matrices.    get  operator fun <T> Matrix <T>.get(rows: IntRange , cols: IntRange ): Matrix <T> Allow slicing, e.g.  matrix[1..2, 3..4] . Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun <T> Matrix <T>.get(rows: IntRange , cols: Int ): Matrix <T> Allows for slicing of the rows and selection of a single column operator fun <T> Matrix <T>.get(rows: Int , cols: IntRange ): Matrix <T> Allows for slicing of the cols and selection of a single row    minus  operator fun Matrix < Double >.minus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars    plus  operator fun Matrix < Double >.plus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars    set  operator fun <T> Matrix <T>.set(i: Int , v: T): Unit Set the ith element in the matrix. If 2D, selects elements in row-major order. operator fun <T> Matrix <T>.set(i: Int , j: Int , v: T): Unit operator fun <T> Matrix <T>.set(rows: IntRange , cols: IntRange , value: T): Unit operator fun <T> Matrix <T>.set(rows: Int , cols: IntRange , value: T): Unit operator fun <T> Matrix <T>.set(rows: IntRange , cols: Int , value: T): Unit operator fun Matrix < Double >.set(i: Int , v: Double ): Unit operator fun Matrix < Double >.set(i: Int , j: Int , v: Double ): Unit operator fun Matrix < Double >.set(i: Int , v: Int ): Unit operator fun Matrix < Double >.set(i: Int , j: Int , v: Int ): Unit operator fun <T> Matrix <T>.set(rows: IntRange , cols: IntRange , value: Matrix <T>): Unit Allow assignment to a slice, e.g.  matrix[1..2, 3..4] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun <T> Matrix <T>.set(rows: Int , cols: IntRange , value: Matrix <T>): Unit Allow assignment to a slice, e.g.  matrix[2, 3..4] =something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range. operator fun <T> Matrix <T>.set(rows: IntRange , cols: Int , value: Matrix <T>): Unit Allow assignment to a slice, e.g.  matrix[1..2, 3] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.    times  operator fun Matrix < Double >.times(other: Int ): Matrix < Double > Multiply a scalar by a matrix",
            "title": "Extension Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/inv/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \ninv\n\n\ninv\n\n\nfun inv():\nMatrix\n<\nDouble\n>\n\n\nOverrides \nMatrix.inv",
            "title": "Inv"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/inv/index.html#inv",
            "text": "fun inv(): Matrix < Double >  Overrides  Matrix.inv",
            "title": "inv"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/max/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \nmax\n\n\nmax\n\n\nfun max():\nDouble\n\n\nOverrides \nMatrix.max",
            "title": "Max"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/max/index.html#max",
            "text": "fun max(): Double  Overrides  Matrix.max",
            "title": "max"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/mean/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \nmean\n\n\nmean\n\n\nfun mean():\nDouble\n\n\nOverrides \nMatrix.mean",
            "title": "Mean"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/mean/index.html#mean",
            "text": "fun mean(): Double  Overrides  Matrix.mean",
            "title": "mean"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/min/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \nmin\n\n\nmin\n\n\nfun min():\nDouble\n\n\nOverrides \nMatrix.min",
            "title": "Min"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/min/index.html#min",
            "text": "fun min(): Double  Overrides  Matrix.min",
            "title": "min"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/minus/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \nminus\n\n\nminus\n\n\nfun minus(other:\nDouble\n):\nMatrix\n<\nDouble\n>\n\n\nfun minus(other:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>",
            "title": "Minus"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/minus/index.html#minus",
            "text": "fun minus(other: Double ): Matrix < Double >  fun minus(other: Matrix < Double >): Matrix < Double >",
            "title": "minus"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/norm-f/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \nnormF\n\n\nnormF\n\n\nfun normF():\nDouble\n\n\nOverrides \nMatrix.normF",
            "title": "Norm f"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/norm-f/index.html#normf",
            "text": "fun normF(): Double  Overrides  Matrix.normF",
            "title": "normF"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/norm-ind-p1/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \nnormIndP1\n\n\nnormIndP1\n\n\nfun normIndP1():\nDouble\n\n\nOverrides \nMatrix.normIndP1",
            "title": "Norm ind p1"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/norm-ind-p1/index.html#normindp1",
            "text": "fun normIndP1(): Double  Overrides  Matrix.normIndP1",
            "title": "normIndP1"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/norm/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \nnorm\n\n\nnorm\n\n\nfun norm():\nDouble\n\n\nOverrides \nMatrix.norm",
            "title": "Norm"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/norm/index.html#norm",
            "text": "fun norm(): Double  Overrides  Matrix.norm",
            "title": "norm"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/num-cols/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \nnumCols\n\n\nnumCols\n\n\nfun numCols():\nInt\n\n\nOverrides \nMatrix.numCols",
            "title": "Num cols"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/num-cols/index.html#numcols",
            "text": "fun numCols(): Int  Overrides  Matrix.numCols",
            "title": "numCols"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/num-rows/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \nnumRows\n\n\nnumRows\n\n\nfun numRows():\nInt\n\n\nOverrides \nMatrix.numRows",
            "title": "Num rows"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/num-rows/index.html#numrows",
            "text": "fun numRows(): Int  Overrides  Matrix.numRows",
            "title": "numRows"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/pinv/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \npinv\n\n\npinv\n\n\nfun pinv():\nMatrix\n<\nDouble\n>\n\n\nOverrides \nMatrix.pinv",
            "title": "Pinv"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/pinv/index.html#pinv",
            "text": "fun pinv(): Matrix < Double >  Overrides  Matrix.pinv",
            "title": "pinv"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/plus/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \nplus\n\n\nplus\n\n\nfun plus(other:\nDouble\n):\nMatrix\n<\nDouble\n>\n\n\nfun plus(other:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>",
            "title": "Plus"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/plus/index.html#plus",
            "text": "fun plus(other: Double ): Matrix < Double >  fun plus(other: Matrix < Double >): Matrix < Double >",
            "title": "plus"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/rem/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \nrem\n\n\nrem\n\n\nfun rem(other:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>",
            "title": "Rem"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/rem/index.html#rem",
            "text": "fun rem(other: Matrix < Double >): Matrix < Double >",
            "title": "rem"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/rows/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \nrows\n\n\nrows\n\n\nval rows:\nInt",
            "title": "Rows"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/rows/index.html#rows",
            "text": "val rows: Int",
            "title": "rows"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/set-col/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \nsetCol\n\n\nsetCol\n\n\nfun setCol(index:\nInt\n, col:\nMatrix\n<\nDouble\n>):\nUnit",
            "title": "Set col"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/set-col/index.html#setcol",
            "text": "fun setCol(index: Int , col: Matrix < Double >): Unit",
            "title": "setCol"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/set-double/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \nsetDouble\n\n\nsetDouble\n\n\nfun setDouble(i:\nInt\n, v:\nDouble\n):\nUnit\n\n\nOverrides \nMatrix.setDouble\n\n\nfun setDouble(i:\nInt\n, j:\nInt\n, v:\nDouble\n):\nUnit\n\n\nOverrides \nMatrix.setDouble",
            "title": "Set double"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/set-double/index.html#setdouble",
            "text": "fun setDouble(i: Int , v: Double ): Unit  Overrides  Matrix.setDouble  fun setDouble(i: Int , j: Int , v: Double ): Unit  Overrides  Matrix.setDouble",
            "title": "setDouble"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/set-float/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \nsetFloat\n\n\nsetFloat\n\n\nfun setFloat(i:\nInt\n, v:\nFloat\n):\nUnit\n\n\nOverrides \nMatrix.setFloat\n\n\nfun setFloat(i:\nInt\n, j:\nInt\n, v:\nFloat\n):\nUnit\n\n\nOverrides \nMatrix.setFloat",
            "title": "Set float"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/set-float/index.html#setfloat",
            "text": "fun setFloat(i: Int , v: Float ): Unit  Overrides  Matrix.setFloat  fun setFloat(i: Int , j: Int , v: Float ): Unit  Overrides  Matrix.setFloat",
            "title": "setFloat"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/set-generic/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \nsetGeneric\n\n\nsetGeneric\n\n\nfun setGeneric(i:\nInt\n, v:\nDouble\n):\nUnit\n\n\nfun setGeneric(i:\nInt\n, j:\nInt\n, v:\nDouble\n):\nUnit",
            "title": "Set generic"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/set-generic/index.html#setgeneric",
            "text": "fun setGeneric(i: Int , v: Double ): Unit  fun setGeneric(i: Int , j: Int , v: Double ): Unit",
            "title": "setGeneric"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/set-int/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \nsetInt\n\n\nsetInt\n\n\nfun setInt(i:\nInt\n, v:\nInt\n):\nUnit\n\n\nOverrides \nMatrix.setInt\n\n\nfun setInt(i:\nInt\n, j:\nInt\n, v:\nInt\n):\nUnit\n\n\nOverrides \nMatrix.setInt",
            "title": "Set int"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/set-int/index.html#setint",
            "text": "fun setInt(i: Int , v: Int ): Unit  Overrides  Matrix.setInt  fun setInt(i: Int , j: Int , v: Int ): Unit  Overrides  Matrix.setInt",
            "title": "setInt"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/set-row/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \nsetRow\n\n\nsetRow\n\n\nfun setRow(index:\nInt\n, row:\nMatrix\n<\nDouble\n>):\nUnit",
            "title": "Set row"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/set-row/index.html#setrow",
            "text": "fun setRow(index: Int , row: Matrix < Double >): Unit",
            "title": "setRow"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/solve/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \nsolve\n\n\nsolve\n\n\nfun solve(A:\nMatrix\n<\nDouble\n>, B:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>",
            "title": "Solve"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/solve/index.html#solve",
            "text": "fun solve(A: Matrix < Double >, B: Matrix < Double >): Matrix < Double >",
            "title": "solve"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/storage/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \nstorage\n\n\nstorage\n\n\nval storage:\nDoubleArray",
            "title": "Storage"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/storage/index.html#storage",
            "text": "val storage: DoubleArray",
            "title": "storage"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/times/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \ntimes\n\n\ntimes\n\n\nfun times(other:\nMatrix\n<\nDouble\n>):\nMatrix\n<\nDouble\n>\n\n\nfun times(other:\nDouble\n):\nMatrix\n<\nDouble\n>",
            "title": "Times"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/times/index.html#times",
            "text": "fun times(other: Matrix < Double >): Matrix < Double >  fun times(other: Double ): Matrix < Double >",
            "title": "times"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/trace/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \ntrace\n\n\ntrace\n\n\nfun trace():\nDouble\n\n\nOverrides \nMatrix.trace",
            "title": "Trace"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/trace/index.html#trace",
            "text": "fun trace(): Double  Overrides  Matrix.trace",
            "title": "trace"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/transpose/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \ntranspose\n\n\ntranspose\n\n\nfun transpose():\nMatrix\n<\nDouble\n>\n\n\nOverrides \nMatrix.transpose",
            "title": "Transpose"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/transpose/index.html#transpose",
            "text": "fun transpose(): Matrix < Double >  Overrides  Matrix.transpose",
            "title": "transpose"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/unary-minus/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrix\n / \nunaryMinus\n\n\nunaryMinus\n\n\nfun unaryMinus():\nMatrix\n<\nDouble\n>\n\n\nOverrides \nMatrix.unaryMinus",
            "title": "Unary minus"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix/unary-minus/index.html#unaryminus",
            "text": "fun unaryMinus(): Matrix < Double >  Overrides  Matrix.unaryMinus",
            "title": "unaryMinus"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix-factory/-init-/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrixFactory\n / \n<init>\n\n\n<init>\n\n\nDefaultDoubleMatrixFactory()",
            "title": " init "
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix-factory/-init-/index.html#init",
            "text": "DefaultDoubleMatrixFactory()",
            "title": "&lt;init&gt;"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix-factory/arange/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrixFactory\n / \narange\n\n\narange\n\n\nfun arange(start:\nDouble\n, stop:\nDouble\n, increment:\nDouble\n):\nMatrix\n<\nDouble\n>\n\n\nOverrides \nMatrixFactory.arange\n\n\nfun arange(start:\nInt\n, stop:\nInt\n, increment:\nInt\n):\nMatrix\n<\nDouble\n>\n\n\nOverrides \nMatrixFactory.arange\n\n\nCreates a row-vector with the first value of \nstart\n and the last value of \nstop\n, with \nincrement\n steps\nbetween each value.\n\n\nfun arange(start:\nDouble\n, stop:\nDouble\n):\nMatrix\n<\nDouble\n>\n\n\nOverrides \nMatrixFactory.arange\n\n\nfun arange(start:\nInt\n, stop:\nInt\n):\nMatrix\n<\nDouble\n>\n\n\nOverrides \nMatrixFactory.arange\n\n\nCreates a row-vector with the first value of \nstart\n and the last value of \nstop\n, with unit steps\nbetween each value.",
            "title": "Arange"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix-factory/arange/index.html#arange",
            "text": "fun arange(start: Double , stop: Double , increment: Double ): Matrix < Double >  Overrides  MatrixFactory.arange  fun arange(start: Int , stop: Int , increment: Int ): Matrix < Double >  Overrides  MatrixFactory.arange  Creates a row-vector with the first value of  start  and the last value of  stop , with  increment  steps\nbetween each value.  fun arange(start: Double , stop: Double ): Matrix < Double >  Overrides  MatrixFactory.arange  fun arange(start: Int , stop: Int ): Matrix < Double >  Overrides  MatrixFactory.arange  Creates a row-vector with the first value of  start  and the last value of  stop , with unit steps\nbetween each value.",
            "title": "arange"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix-factory/create/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrixFactory\n / \ncreate\n\n\ncreate\n\n\nfun create(data:\nIntRange\n):\nMatrix\n<\nDouble\n>\n\n\nOverrides \nMatrixFactory.create\n\n\nCreates a row-vector with initial values pulled from an int range, e.g. 1..45\n\n\nfun create(data:\nDoubleArray\n):\nMatrix\n<\nDouble\n>\n\n\nOverrides \nMatrixFactory.create\n\n\nCreates a row-vector with initial values pulled from a double array\n\n\nfun create(data:\nArray\n<\nDoubleArray\n>):\nMatrix\n<\nDouble\n>\n\n\nOverrides \nMatrixFactory.create\n\n\nCreates a matrix from an array of arrays (row-major)",
            "title": "Create"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix-factory/create/index.html#create",
            "text": "fun create(data: IntRange ): Matrix < Double >  Overrides  MatrixFactory.create  Creates a row-vector with initial values pulled from an int range, e.g. 1..45  fun create(data: DoubleArray ): Matrix < Double >  Overrides  MatrixFactory.create  Creates a row-vector with initial values pulled from a double array  fun create(data: Array < DoubleArray >): Matrix < Double >  Overrides  MatrixFactory.create  Creates a matrix from an array of arrays (row-major)",
            "title": "create"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix-factory/eye/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrixFactory\n / \neye\n\n\neye\n\n\nfun eye(size:\nInt\n):\nMatrix\n<\nDouble\n>\n\n\nOverrides \nMatrixFactory.eye\n\n\nCreates an identity matrix of the requested shape\n\n\nfun eye(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nDouble\n>\n\n\nOverrides \nMatrixFactory.eye\n\n\nCreates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.",
            "title": "Eye"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix-factory/eye/index.html#eye",
            "text": "fun eye(size: Int ): Matrix < Double >  Overrides  MatrixFactory.eye  Creates an identity matrix of the requested shape  fun eye(rows: Int , cols: Int ): Matrix < Double >  Overrides  MatrixFactory.eye  Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.",
            "title": "eye"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix-factory/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrixFactory\n\n\nDefaultDoubleMatrixFactory\n\n\nclass DefaultDoubleMatrixFactory :\nMatrixFactory\n<\nMatrix\n<\nDouble\n>>\n\n\nConstructors\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\n<init>\n\n\nDefaultDoubleMatrixFactory()\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\narange\n\n\nfun arange(start:\nDouble\n, stop:\nDouble\n, increment:\nDouble\n):\nMatrix\n<\nDouble\n>\nfun arange(start:\nInt\n, stop:\nInt\n, increment:\nInt\n):\nMatrix\n<\nDouble\n>\nCreates a row-vector with the first value of \nstart\n and the last value of \nstop\n, with \nincrement\n steps between each value.\nfun arange(start:\nDouble\n, stop:\nDouble\n):\nMatrix\n<\nDouble\n>\nfun arange(start:\nInt\n, stop:\nInt\n):\nMatrix\n<\nDouble\n>\nCreates a row-vector with the first value of \nstart\n and the last value of \nstop\n, with unit steps between each value.\n\n\n\n\n\n\ncreate\n\n\nfun create(data:\nIntRange\n):\nMatrix\n<\nDouble\n>\nCreates a row-vector with initial values pulled from an int range, e.g. 1..45\nfun create(data:\nDoubleArray\n):\nMatrix\n<\nDouble\n>\nCreates a row-vector with initial values pulled from a double array\nfun create(data:\nArray\n<\nDoubleArray\n>):\nMatrix\n<\nDouble\n>\nCreates a matrix from an array of arrays (row-major)\n\n\n\n\n\n\neye\n\n\nfun eye(size:\nInt\n):\nMatrix\n<\nDouble\n>\nCreates an identity matrix of the requested shape\nfun eye(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nDouble\n>\nCreates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.\n\n\n\n\n\n\nones\n\n\nfun ~~ones~~(size:\nInt\n):\nMatrix\n<\nDouble\n>\nCreates a one initialized square matrix of the requested shape\nfun ones(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nDouble\n>\nCreates a one initialized matrix of the requested shape\n\n\n\n\n\n\nrand\n\n\nfun ~~rand~~(size:\nInt\n):\nMatrix\n<\nDouble\n>\nCreates a vector of \nsize\n many uniform 0-1 random samples\nfun rand(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nDouble\n>\nCreates a matrix of uniform 0-1 random samples\nfun rand(rows:\nInt\n, cols:\nInt\n, seed:\nLong\n):\nMatrix\n<\nDouble\n>\nCreates a matrix of rows x cols uniform 0-1 samples using the given seed. Two calls with the same seed will produce identical matrices\n\n\n\n\n\n\nrandn\n\n\nfun ~~randn~~(size:\nInt\n):\nMatrix\n<\nDouble\n>\nCreates a vector of \nsize\n many unit-normal random samples\nfun randn(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nDouble\n>\nCreates a matrix of unit-normal random samples\nfun randn(rows:\nInt\n, cols:\nInt\n, seed:\nLong\n):\nMatrix\n<\nDouble\n>\nCreates a matrix of rows x cols random samples using the given seed. Two calls with the same seed will produce identical matrices\n\n\n\n\n\n\nzeros\n\n\nfun zeros(rows:\nInt\n, cols:\nInt\n):\nDefaultDoubleMatrix\nGenerate a zero initialized matrix of the requested shape.\nfun ~~zeros~~(size:\nInt\n):\nMatrix\n<\nDouble\n>\nGenerate a zero initialized square matrix of the requested shape.",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix-factory/index.html#defaultdoublematrixfactory",
            "text": "class DefaultDoubleMatrixFactory : MatrixFactory < Matrix < Double >>",
            "title": "DefaultDoubleMatrixFactory"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix-factory/index.html#constructors",
            "text": "Name  Summary      <init>  DefaultDoubleMatrixFactory()",
            "title": "Constructors"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix-factory/index.html#functions",
            "text": "Name  Summary      arange  fun arange(start: Double , stop: Double , increment: Double ): Matrix < Double > fun arange(start: Int , stop: Int , increment: Int ): Matrix < Double > Creates a row-vector with the first value of  start  and the last value of  stop , with  increment  steps between each value. fun arange(start: Double , stop: Double ): Matrix < Double > fun arange(start: Int , stop: Int ): Matrix < Double > Creates a row-vector with the first value of  start  and the last value of  stop , with unit steps between each value.    create  fun create(data: IntRange ): Matrix < Double > Creates a row-vector with initial values pulled from an int range, e.g. 1..45 fun create(data: DoubleArray ): Matrix < Double > Creates a row-vector with initial values pulled from a double array fun create(data: Array < DoubleArray >): Matrix < Double > Creates a matrix from an array of arrays (row-major)    eye  fun eye(size: Int ): Matrix < Double > Creates an identity matrix of the requested shape fun eye(rows: Int , cols: Int ): Matrix < Double > Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.    ones  fun ~~ones~~(size: Int ): Matrix < Double > Creates a one initialized square matrix of the requested shape fun ones(rows: Int , cols: Int ): Matrix < Double > Creates a one initialized matrix of the requested shape    rand  fun ~~rand~~(size: Int ): Matrix < Double > Creates a vector of  size  many uniform 0-1 random samples fun rand(rows: Int , cols: Int ): Matrix < Double > Creates a matrix of uniform 0-1 random samples fun rand(rows: Int , cols: Int , seed: Long ): Matrix < Double > Creates a matrix of rows x cols uniform 0-1 samples using the given seed. Two calls with the same seed will produce identical matrices    randn  fun ~~randn~~(size: Int ): Matrix < Double > Creates a vector of  size  many unit-normal random samples fun randn(rows: Int , cols: Int ): Matrix < Double > Creates a matrix of unit-normal random samples fun randn(rows: Int , cols: Int , seed: Long ): Matrix < Double > Creates a matrix of rows x cols random samples using the given seed. Two calls with the same seed will produce identical matrices    zeros  fun zeros(rows: Int , cols: Int ): DefaultDoubleMatrix Generate a zero initialized matrix of the requested shape. fun ~~zeros~~(size: Int ): Matrix < Double > Generate a zero initialized square matrix of the requested shape.",
            "title": "Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix-factory/ones/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrixFactory\n / \nones\n\n\nones\n\n\nfun ~~ones~~(size:\nInt\n):\nMatrix\n<\nDouble\n>\n\n\nOverrides \nMatrixFactory.ones\n\n\nDeprecated:\n Use rows,col overload instead. This method will be removed in a future update.\n\n\nCreates a one initialized square matrix of the requested shape\n\n\nfun ones(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nDouble\n>\n\n\nOverrides \nMatrixFactory.ones\n\n\nCreates a one initialized matrix of the requested shape",
            "title": "Ones"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix-factory/ones/index.html#ones",
            "text": "fun ~~ones~~(size: Int ): Matrix < Double >  Overrides  MatrixFactory.ones  Deprecated:  Use rows,col overload instead. This method will be removed in a future update.  Creates a one initialized square matrix of the requested shape  fun ones(rows: Int , cols: Int ): Matrix < Double >  Overrides  MatrixFactory.ones  Creates a one initialized matrix of the requested shape",
            "title": "ones"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix-factory/rand/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrixFactory\n / \nrand\n\n\nrand\n\n\nfun ~~rand~~(size:\nInt\n):\nMatrix\n<\nDouble\n>\n\n\nOverrides \nMatrixFactory.rand\n\n\nDeprecated:\n Use rows,col overload instead. This method will be removed in a future update.\n\n\nCreates a vector of \nsize\n many uniform 0-1 random samples\n\n\nfun rand(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nDouble\n>\n\n\nOverrides \nMatrixFactory.rand\n\n\nCreates a matrix of uniform 0-1 random samples\n\n\nfun rand(rows:\nInt\n, cols:\nInt\n, seed:\nLong\n):\nMatrix\n<\nDouble\n>\n\n\nOverrides \nMatrixFactory.rand\n\n\nCreates a matrix of rows x cols uniform 0-1 samples using the given seed. Two calls with the same seed\nwill produce identical matrices",
            "title": "Rand"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix-factory/rand/index.html#rand",
            "text": "fun ~~rand~~(size: Int ): Matrix < Double >  Overrides  MatrixFactory.rand  Deprecated:  Use rows,col overload instead. This method will be removed in a future update.  Creates a vector of  size  many uniform 0-1 random samples  fun rand(rows: Int , cols: Int ): Matrix < Double >  Overrides  MatrixFactory.rand  Creates a matrix of uniform 0-1 random samples  fun rand(rows: Int , cols: Int , seed: Long ): Matrix < Double >  Overrides  MatrixFactory.rand  Creates a matrix of rows x cols uniform 0-1 samples using the given seed. Two calls with the same seed\nwill produce identical matrices",
            "title": "rand"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix-factory/randn/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrixFactory\n / \nrandn\n\n\nrandn\n\n\nfun ~~randn~~(size:\nInt\n):\nMatrix\n<\nDouble\n>\n\n\nOverrides \nMatrixFactory.randn\n\n\nDeprecated:\n Use rows,col overload instead. This method will be removed in a future update.\n\n\nCreates a vector of \nsize\n many unit-normal random samples\n\n\nfun randn(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nDouble\n>\n\n\nOverrides \nMatrixFactory.randn\n\n\nCreates a matrix of unit-normal random samples\n\n\nfun randn(rows:\nInt\n, cols:\nInt\n, seed:\nLong\n):\nMatrix\n<\nDouble\n>\n\n\nOverrides \nMatrixFactory.randn\n\n\nCreates a matrix of rows x cols random samples using the given seed. Two calls with the same seed\nwill produce identical matrices",
            "title": "Randn"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix-factory/randn/index.html#randn",
            "text": "fun ~~randn~~(size: Int ): Matrix < Double >  Overrides  MatrixFactory.randn  Deprecated:  Use rows,col overload instead. This method will be removed in a future update.  Creates a vector of  size  many unit-normal random samples  fun randn(rows: Int , cols: Int ): Matrix < Double >  Overrides  MatrixFactory.randn  Creates a matrix of unit-normal random samples  fun randn(rows: Int , cols: Int , seed: Long ): Matrix < Double >  Overrides  MatrixFactory.randn  Creates a matrix of rows x cols random samples using the given seed. Two calls with the same seed\nwill produce identical matrices",
            "title": "randn"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix-factory/zeros/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultDoubleMatrixFactory\n / \nzeros\n\n\nzeros\n\n\nfun zeros(rows:\nInt\n, cols:\nInt\n):\nDefaultDoubleMatrix\n\n\nOverrides \nMatrixFactory.zeros\n\n\nGenerate a zero initialized matrix of the requested shape.\n\n\nfun ~~zeros~~(size:\nInt\n):\nMatrix\n<\nDouble\n>\n\n\nOverrides \nMatrixFactory.zeros\n\n\nDeprecated:\n Use rows,col overload instead. This method will be removed in a future update.\n\n\nGenerate a zero initialized square matrix of the requested shape.",
            "title": "Zeros"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-double-matrix-factory/zeros/index.html#zeros",
            "text": "fun zeros(rows: Int , cols: Int ): DefaultDoubleMatrix  Overrides  MatrixFactory.zeros  Generate a zero initialized matrix of the requested shape.  fun ~~zeros~~(size: Int ): Matrix < Double >  Overrides  MatrixFactory.zeros  Deprecated:  Use rows,col overload instead. This method will be removed in a future update.  Generate a zero initialized square matrix of the requested shape.",
            "title": "zeros"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/-init-/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \n<init>\n\n\n<init>\n\n\nDefaultFloatMatrix(rows:\nInt\n, cols:\nInt\n)",
            "title": " init "
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/-init-/index.html#init",
            "text": "DefaultFloatMatrix(rows: Int , cols: Int )",
            "title": "&lt;init&gt;"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/-l-u/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \nLU\n\n\nLU\n\n\nfun LU(): <ERROR CLASS><\nMatrix\n<\nFloat\n>,\nMatrix\n<\nFloat\n>,\nMatrix\n<\nFloat\n>>\n\n\nOverrides \nMatrix.LU",
            "title": " l u"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/-l-u/index.html#lu",
            "text": "fun LU(): <ERROR CLASS>< Matrix < Float >, Matrix < Float >, Matrix < Float >>  Overrides  Matrix.LU",
            "title": "LU"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/-q-r/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \nQR\n\n\nQR\n\n\nfun QR(): <ERROR CLASS><\nMatrix\n<\nFloat\n>,\nMatrix\n<\nFloat\n>>\n\n\nOverrides \nMatrix.QR",
            "title": " q r"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/-q-r/index.html#qr",
            "text": "fun QR(): <ERROR CLASS>< Matrix < Float >, Matrix < Float >>  Overrides  Matrix.QR",
            "title": "QR"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/-t/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \nT\n\n\nT\n\n\nfun T():\nMatrix\n<\nFloat\n>\n\n\nOverrides \nMatrix.T\n\n\nTranspose operator.",
            "title": " t"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/-t/index.html#t",
            "text": "fun T(): Matrix < Float >  Overrides  Matrix.T  Transpose operator.",
            "title": "T"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/arg-max/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \nargMax\n\n\nargMax\n\n\nfun argMax():\nInt\n\n\nOverrides \nMatrix.argMax\n\n\nRow major 1D index.",
            "title": "Arg max"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/arg-max/index.html#argmax",
            "text": "fun argMax(): Int  Overrides  Matrix.argMax  Row major 1D index.",
            "title": "argMax"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/arg-min/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \nargMin\n\n\nargMin\n\n\nfun argMin():\nInt\n\n\nOverrides \nMatrix.argMin\n\n\nRow major 1D index.",
            "title": "Arg min"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/arg-min/index.html#argmin",
            "text": "fun argMin(): Int  Overrides  Matrix.argMin  Row major 1D index.",
            "title": "argMin"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/chol/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \nchol\n\n\nchol\n\n\nfun chol():\nMatrix\n<\nFloat\n>\n\n\nOverrides \nMatrix.chol",
            "title": "Chol"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/chol/index.html#chol",
            "text": "fun chol(): Matrix < Float >  Overrides  Matrix.chol",
            "title": "chol"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/cols/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \ncols\n\n\ncols\n\n\nval cols:\nInt",
            "title": "Cols"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/cols/index.html#cols",
            "text": "val cols: Int",
            "title": "cols"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/copy/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \ncopy\n\n\ncopy\n\n\nfun copy():\nMatrix\n<\nFloat\n>\n\n\nOverrides \nMatrix.copy",
            "title": "Copy"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/copy/index.html#copy",
            "text": "fun copy(): Matrix < Float >  Overrides  Matrix.copy",
            "title": "copy"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/det/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \ndet\n\n\ndet\n\n\nfun det():\nFloat\n\n\nOverrides \nMatrix.det",
            "title": "Det"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/det/index.html#det",
            "text": "fun det(): Float  Overrides  Matrix.det",
            "title": "det"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/diag/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \ndiag\n\n\ndiag\n\n\nfun diag():\nMatrix\n<\nFloat\n>\n\n\nOverrides \nMatrix.diag",
            "title": "Diag"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/diag/index.html#diag",
            "text": "fun diag(): Matrix < Float >  Overrides  Matrix.diag",
            "title": "diag"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/div/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \ndiv\n\n\ndiv\n\n\nfun div(other:\nFloat\n):\nMatrix\n<\nFloat\n>\n\n\nfun div(other:\nInt\n):\nMatrix\n<\nFloat\n>\n\n\nOverrides \nMatrix.div",
            "title": "Div"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/div/index.html#div",
            "text": "fun div(other: Float ): Matrix < Float >  fun div(other: Int ): Matrix < Float >  Overrides  Matrix.div",
            "title": "div"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/element-sum/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \nelementSum\n\n\nelementSum\n\n\nfun elementSum():\nFloat\n\n\nOverrides \nMatrix.elementSum",
            "title": "Element sum"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/element-sum/index.html#elementsum",
            "text": "fun elementSum(): Float  Overrides  Matrix.elementSum",
            "title": "elementSum"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/element-times/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \nelementTimes\n\n\nelementTimes\n\n\nfun elementTimes(other:\nMatrix\n<\nFloat\n>):\nMatrix\n<\nFloat\n>",
            "title": "Element times"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/element-times/index.html#elementtimes",
            "text": "fun elementTimes(other: Matrix < Float >): Matrix < Float >",
            "title": "elementTimes"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/epow/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \nepow\n\n\nepow\n\n\nfun epow(other:\nFloat\n):\nMatrix\n<\nFloat\n>\n\n\nfun epow(other:\nInt\n):\nMatrix\n<\nFloat\n>\n\n\nOverrides \nMatrix.epow",
            "title": "Epow"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/epow/index.html#epow",
            "text": "fun epow(other: Float ): Matrix < Float >  fun epow(other: Int ): Matrix < Float >  Overrides  Matrix.epow",
            "title": "epow"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/expm/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \nexpm\n\n\nexpm\n\n\nfun expm():\nMatrix\n<\nFloat\n>\n\n\nOverrides \nMatrix.expm",
            "title": "Expm"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/expm/index.html#expm",
            "text": "fun expm(): Matrix < Float >  Overrides  Matrix.expm",
            "title": "expm"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/get-base-matrix/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \ngetBaseMatrix\n\n\ngetBaseMatrix\n\n\nfun getBaseMatrix():\nAny\n\n\nOverrides \nMatrix.getBaseMatrix\n\n\nReturns the underlying matrix object from the back-end this Matrix is wrapping. This should be used\nsparingly (as it breaks encapsulation), but it can increase performance by using computation specifically\ndesigned for a particular back-end. Code using this method should not rely on a particular back-end, and\nshould always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use \nget\n and \nset\n)\nto access the elements generically).",
            "title": "Get base matrix"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/get-base-matrix/index.html#getbasematrix",
            "text": "fun getBaseMatrix(): Any  Overrides  Matrix.getBaseMatrix  Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used\nsparingly (as it breaks encapsulation), but it can increase performance by using computation specifically\ndesigned for a particular back-end. Code using this method should not rely on a particular back-end, and\nshould always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use  get  and  set )\nto access the elements generically).",
            "title": "getBaseMatrix"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/get-col/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \ngetCol\n\n\ngetCol\n\n\nfun getCol(col:\nInt\n):\nMatrix\n<\nFloat\n>\n\n\nOverrides \nMatrix.getCol",
            "title": "Get col"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/get-col/index.html#getcol",
            "text": "fun getCol(col: Int ): Matrix < Float >  Overrides  Matrix.getCol",
            "title": "getCol"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/get-double-data/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \ngetDoubleData\n\n\ngetDoubleData\n\n\nfun getDoubleData():\nDoubleArray\n\n\nOverrides \nMatrix.getDoubleData\n\n\nRetrieves the data formatted as doubles in row-major order\nThis method is only for performance over potentially boxing get(Double)\nmethods. This method may or may not return a copy, and thus should be\ntreated as read-only unless backend behavior is known.",
            "title": "Get double data"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/get-double-data/index.html#getdoubledata",
            "text": "fun getDoubleData(): DoubleArray  Overrides  Matrix.getDoubleData  Retrieves the data formatted as doubles in row-major order\nThis method is only for performance over potentially boxing get(Double)\nmethods. This method may or may not return a copy, and thus should be\ntreated as read-only unless backend behavior is known.",
            "title": "getDoubleData"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/get-double/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \ngetDouble\n\n\ngetDouble\n\n\nfun getDouble(i:\nInt\n, j:\nInt\n):\nDouble\n\n\nOverrides \nMatrix.getDouble\n\n\nfun getDouble(i:\nInt\n):\nDouble\n\n\nOverrides \nMatrix.getDouble",
            "title": "Get double"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/get-double/index.html#getdouble",
            "text": "fun getDouble(i: Int , j: Int ): Double  Overrides  Matrix.getDouble  fun getDouble(i: Int ): Double  Overrides  Matrix.getDouble",
            "title": "getDouble"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/get-factory/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \ngetFactory\n\n\ngetFactory\n\n\nfun getFactory():\nMatrixFactory\n<\nMatrix\n<\nFloat\n>>\n\n\nOverrides \nMatrix.getFactory\n\n\nBecause sometimes all you have is a Matrix, but you really want a MatrixFactory.",
            "title": "Get factory"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/get-factory/index.html#getfactory",
            "text": "fun getFactory(): MatrixFactory < Matrix < Float >>  Overrides  Matrix.getFactory  Because sometimes all you have is a Matrix, but you really want a MatrixFactory.",
            "title": "getFactory"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/get-float/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \ngetFloat\n\n\ngetFloat\n\n\nfun getFloat(i:\nInt\n, j:\nInt\n):\nFloat\n\n\nOverrides \nMatrix.getFloat\n\n\nfun getFloat(i:\nInt\n):\nFloat\n\n\nOverrides \nMatrix.getFloat",
            "title": "Get float"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/get-float/index.html#getfloat",
            "text": "fun getFloat(i: Int , j: Int ): Float  Overrides  Matrix.getFloat  fun getFloat(i: Int ): Float  Overrides  Matrix.getFloat",
            "title": "getFloat"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/get-generic/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \ngetGeneric\n\n\ngetGeneric\n\n\nfun getGeneric(i:\nInt\n, j:\nInt\n):\nFloat\n\n\nOverrides \nMatrix.getGeneric\n\n\nfun getGeneric(i:\nInt\n):\nFloat\n\n\nOverrides \nMatrix.getGeneric",
            "title": "Get generic"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/get-generic/index.html#getgeneric",
            "text": "fun getGeneric(i: Int , j: Int ): Float  Overrides  Matrix.getGeneric  fun getGeneric(i: Int ): Float  Overrides  Matrix.getGeneric",
            "title": "getGeneric"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/get-int/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \ngetInt\n\n\ngetInt\n\n\nfun getInt(i:\nInt\n, j:\nInt\n):\nInt\n\n\nOverrides \nMatrix.getInt\n\n\nfun getInt(i:\nInt\n):\nInt\n\n\nOverrides \nMatrix.getInt",
            "title": "Get int"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/get-int/index.html#getint",
            "text": "fun getInt(i: Int , j: Int ): Int  Overrides  Matrix.getInt  fun getInt(i: Int ): Int  Overrides  Matrix.getInt",
            "title": "getInt"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/get-row/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \ngetRow\n\n\ngetRow\n\n\nfun getRow(row:\nInt\n):\nMatrix\n<\nFloat\n>\n\n\nOverrides \nMatrix.getRow",
            "title": "Get row"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/get-row/index.html#getrow",
            "text": "fun getRow(row: Int ): Matrix < Float >  Overrides  Matrix.getRow",
            "title": "getRow"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n\n\nDefaultFloatMatrix\n\n\nclass DefaultFloatMatrix :\nMatrix\n<\nFloat\n>\n\n\nConstructors\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\n<init>\n\n\nDefaultFloatMatrix(rows:\nInt\n, cols:\nInt\n)\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\ncols\n\n\nval cols:\nInt\n\n\n\n\n\n\nrows\n\n\nval rows:\nInt\n\n\n\n\n\n\nstorage\n\n\nval storage:\nFloatArray\n\n\n\n\n\n\n\n\nInherited Properties\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nT\n\n\nopen val T:\nMatrix\n<T>\nTranspose operator.\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nLU\n\n\nfun LU(): <ERROR CLASS><\nMatrix\n<\nFloat\n>,\nMatrix\n<\nFloat\n>,\nMatrix\n<\nFloat\n>>\n\n\n\n\n\n\nQR\n\n\nfun QR(): <ERROR CLASS><\nMatrix\n<\nFloat\n>,\nMatrix\n<\nFloat\n>>\n\n\n\n\n\n\nT\n\n\nfun T():\nMatrix\n<\nFloat\n>\nTranspose operator.\n\n\n\n\n\n\nargMax\n\n\nfun argMax():\nInt\nRow major 1D index.\n\n\n\n\n\n\nargMin\n\n\nfun argMin():\nInt\nRow major 1D index.\n\n\n\n\n\n\nchol\n\n\nfun chol():\nMatrix\n<\nFloat\n>\n\n\n\n\n\n\ncopy\n\n\nfun copy():\nMatrix\n<\nFloat\n>\n\n\n\n\n\n\ndet\n\n\nfun det():\nFloat\n\n\n\n\n\n\ndiag\n\n\nfun diag():\nMatrix\n<\nFloat\n>\n\n\n\n\n\n\ndiv\n\n\nfun div(other:\nFloat\n):\nMatrix\n<\nFloat\n>\nfun div(other:\nInt\n):\nMatrix\n<\nFloat\n>\n\n\n\n\n\n\nelementSum\n\n\nfun elementSum():\nFloat\n\n\n\n\n\n\nelementTimes\n\n\nfun elementTimes(other:\nMatrix\n<\nFloat\n>):\nMatrix\n<\nFloat\n>\n\n\n\n\n\n\nepow\n\n\nfun epow(other:\nFloat\n):\nMatrix\n<\nFloat\n>\nfun epow(other:\nInt\n):\nMatrix\n<\nFloat\n>\n\n\n\n\n\n\nexpm\n\n\nfun expm():\nMatrix\n<\nFloat\n>\n\n\n\n\n\n\ngetBaseMatrix\n\n\nfun getBaseMatrix():\nAny\nReturns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use \nget\n and \nset\n) to access the elements generically).\n\n\n\n\n\n\ngetCol\n\n\nfun getCol(col:\nInt\n):\nMatrix\n<\nFloat\n>\n\n\n\n\n\n\ngetDouble\n\n\nfun getDouble(i:\nInt\n, j:\nInt\n):\nDouble\nfun getDouble(i:\nInt\n):\nDouble\n\n\n\n\n\n\ngetDoubleData\n\n\nfun getDoubleData():\nDoubleArray\nRetrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known.\n\n\n\n\n\n\ngetFactory\n\n\nfun getFactory():\nMatrixFactory\n<\nMatrix\n<\nFloat\n>>\nBecause sometimes all you have is a Matrix, but you really want a MatrixFactory.\n\n\n\n\n\n\ngetFloat\n\n\nfun getFloat(i:\nInt\n, j:\nInt\n):\nFloat\nfun getFloat(i:\nInt\n):\nFloat\n\n\n\n\n\n\ngetGeneric\n\n\nfun getGeneric(i:\nInt\n, j:\nInt\n):\nFloat\nfun getGeneric(i:\nInt\n):\nFloat\n\n\n\n\n\n\ngetInt\n\n\nfun getInt(i:\nInt\n, j:\nInt\n):\nInt\nfun getInt(i:\nInt\n):\nInt\n\n\n\n\n\n\ngetRow\n\n\nfun getRow(row:\nInt\n):\nMatrix\n<\nFloat\n>\n\n\n\n\n\n\ninv\n\n\nfun inv():\nMatrix\n<\nFloat\n>\n\n\n\n\n\n\nmax\n\n\nfun max():\nFloat\n\n\n\n\n\n\nmean\n\n\nfun mean():\nFloat\n\n\n\n\n\n\nmin\n\n\nfun min():\nFloat\n\n\n\n\n\n\nminus\n\n\nfun minus(other:\nFloat\n):\nMatrix\n<\nFloat\n>\nfun minus(other:\nMatrix\n<\nFloat\n>):\nMatrix\n<\nFloat\n>\n\n\n\n\n\n\nnorm\n\n\nfun norm():\nFloat\n\n\n\n\n\n\nnormF\n\n\nfun normF():\nFloat\n\n\n\n\n\n\nnormIndP1\n\n\nfun normIndP1():\nFloat\n\n\n\n\n\n\nnumCols\n\n\nfun numCols():\nInt\n\n\n\n\n\n\nnumRows\n\n\nfun numRows():\nInt\n\n\n\n\n\n\npinv\n\n\nfun pinv():\nMatrix\n<\nFloat\n>\n\n\n\n\n\n\nplus\n\n\nfun plus(other:\nFloat\n):\nMatrix\n<\nFloat\n>\nfun plus(other:\nMatrix\n<\nFloat\n>):\nMatrix\n<\nFloat\n>\n\n\n\n\n\n\nrem\n\n\nfun rem(other:\nMatrix\n<\nFloat\n>):\nMatrix\n<\nFloat\n>\n\n\n\n\n\n\nsetCol\n\n\nfun setCol(index:\nInt\n, col:\nMatrix\n<\nFloat\n>):\nUnit\n\n\n\n\n\n\nsetDouble\n\n\nfun setDouble(i:\nInt\n, v:\nDouble\n):\nUnit\nfun setDouble(i:\nInt\n, j:\nInt\n, v:\nDouble\n):\nUnit\n\n\n\n\n\n\nsetFloat\n\n\nfun setFloat(i:\nInt\n, v:\nFloat\n):\nUnit\nfun setFloat(i:\nInt\n, j:\nInt\n, v:\nFloat\n):\nUnit\n\n\n\n\n\n\nsetGeneric\n\n\nfun setGeneric(i:\nInt\n, v:\nFloat\n):\nUnit\nfun setGeneric(i:\nInt\n, j:\nInt\n, v:\nFloat\n):\nUnit\n\n\n\n\n\n\nsetInt\n\n\nfun setInt(i:\nInt\n, v:\nInt\n):\nUnit\nfun setInt(i:\nInt\n, j:\nInt\n, v:\nInt\n):\nUnit\n\n\n\n\n\n\nsetRow\n\n\nfun setRow(index:\nInt\n, row:\nMatrix\n<\nFloat\n>):\nUnit\n\n\n\n\n\n\nsolve\n\n\nfun solve(A:\nMatrix\n<\nFloat\n>, B:\nMatrix\n<\nFloat\n>):\nMatrix\n<\nFloat\n>\n\n\n\n\n\n\ntimes\n\n\nfun times(other:\nMatrix\n<\nFloat\n>):\nMatrix\n<\nFloat\n>\nfun times(other:\nFloat\n):\nMatrix\n<\nFloat\n>\n\n\n\n\n\n\ntrace\n\n\nfun trace():\nFloat\n\n\n\n\n\n\ntranspose\n\n\nfun transpose():\nMatrix\n<\nFloat\n>\n\n\n\n\n\n\nunaryMinus\n\n\nfun unaryMinus():\nMatrix\n<\nFloat\n>\n\n\n\n\n\n\n\n\nInherited Functions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nasColVector\n\n\nopen fun asColVector():\nMatrix\n<T>\nReturns the given vector as a row vector. Will call transpose() on row vectors\n\n\n\n\n\n\nasRowVector\n\n\nopen fun asRowVector():\nMatrix\n<T>\nReturns the given vector as a row vector. Will call transpose() on column vectors\n\n\n\n\n\n\ncumSum\n\n\nopen fun cumSum():\nMatrix\n<T>\nCalculates the cumulative (ongoing) sum of a matrix's elements. For example, \ncumsum(mat[1,2,3])\n would return \nmat[1,3,6]\n. Assumes matrix type is convertible to double.\n\n\n\n\n\n\npow\n\n\nopen infix fun pow(exponent:\nInt\n):\nMatrix\n<T>\n\n\n\n\n\n\nrepr\n\n\nopen fun repr():\nString\n\n\n\n\n\n\nselectCols\n\n\nopen fun selectCols(vararg idxs:\nInt\n):\nMatrix\n<T>\nSelect a set of cols from a matrix to form the cols of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth cols of an input matrix, you would write \ninput.selectCols(0,1,4)\n.\nopen fun <U :\nNumber\n> selectCols(idxs:\nMatrix\n<U>):\nMatrix\n<T>\n\n\n\n\n\n\nselectRows\n\n\nopen fun selectRows(vararg idxs:\nInt\n):\nMatrix\n<T>\nSelect a set of rows from a matrix to form the rows of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth rows of an input matrix, you would write \ninput.selectRows(0,1,4)\n.\nopen fun <U :\nNumber\n> selectRows(idxs:\nMatrix\n<U>):\nMatrix\n<T>\n\n\n\n\n\n\nto2DArray\n\n\nopen fun to2DArray():\nArray\n<\nDoubleArray\n>\nReturns a Matrix as a double 2D array. Intended for MATLAB interop.\n\n\n\n\n\n\ntoIterable\n\n\nopen fun toIterable():\nIterable\n<T>\n\n\n\n\n\n\nwrapRange\n\n\nopen fun wrapRange(range:\nIntRange\n, max:\nInt\n):\nIntRange\n\n\n\n\n\n\n\n\nExtension Functions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nget\n\n\noperator fun <T>\nMatrix\n<T>.get(i:\nInt\n, j:\nInt\n): T``operator fun <T>\nMatrix\n<T>.get(i:\nInt\n): T\nGets the ith element in the matrix. If 2D, selects elements in row-major order.\noperator fun <T>\nMatrix\n<T>.get(rows:\nIntRange\n, cols:\nIntRange\n):\nMatrix\n<T>\nAllow slicing, e.g. \nmatrix[1..2, 3..4]\n. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.\noperator fun <T>\nMatrix\n<T>.get(rows:\nIntRange\n, cols:\nInt\n):\nMatrix\n<T>\nAllows for slicing of the rows and selection of a single column\noperator fun <T>\nMatrix\n<T>.get(rows:\nInt\n, cols:\nIntRange\n):\nMatrix\n<T>\nAllows for slicing of the cols and selection of a single row\n\n\n\n\n\n\nset\n\n\noperator fun <T>\nMatrix\n<T>.set(i:\nInt\n, v: T):\nUnit\nSet the ith element in the matrix. If 2D, selects elements in row-major order.\noperator fun <T>\nMatrix\n<T>.set(i:\nInt\n, j:\nInt\n, v: T):\nUnit\noperator fun <T>\nMatrix\n<T>.set(rows:\nIntRange\n, cols:\nIntRange\n, value: T):\nUnit\noperator fun <T>\nMatrix\n<T>.set(rows:\nInt\n, cols:\nIntRange\n, value: T):\nUnit\noperator fun <T>\nMatrix\n<T>.set(rows:\nIntRange\n, cols:\nInt\n, value: T):\nUnit\noperator fun <T>\nMatrix\n<T>.set(rows:\nIntRange\n, cols:\nIntRange\n, value:\nMatrix\n<T>):\nUnit\nAllow assignment to a slice, e.g. \nmatrix[1..2, 3..4]\n=something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.\noperator fun <T>\nMatrix\n<T>.set(rows:\nInt\n, cols:\nIntRange\n, value:\nMatrix\n<T>):\nUnit\nAllow assignment to a slice, e.g. \nmatrix[2, 3..4]\n=something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range.\noperator fun <T>\nMatrix\n<T>.set(rows:\nIntRange\n, cols:\nInt\n, value:\nMatrix\n<T>):\nUnit\nAllow assignment to a slice, e.g. \nmatrix[1..2, 3]\n=something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/index.html#defaultfloatmatrix",
            "text": "class DefaultFloatMatrix : Matrix < Float >",
            "title": "DefaultFloatMatrix"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/index.html#constructors",
            "text": "Name  Summary      <init>  DefaultFloatMatrix(rows: Int , cols: Int )",
            "title": "Constructors"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/index.html#properties",
            "text": "Name  Summary      cols  val cols: Int    rows  val rows: Int    storage  val storage: FloatArray",
            "title": "Properties"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/index.html#inherited-properties",
            "text": "Name  Summary      T  open val T: Matrix <T> Transpose operator.",
            "title": "Inherited Properties"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/index.html#functions",
            "text": "Name  Summary      LU  fun LU(): <ERROR CLASS>< Matrix < Float >, Matrix < Float >, Matrix < Float >>    QR  fun QR(): <ERROR CLASS>< Matrix < Float >, Matrix < Float >>    T  fun T(): Matrix < Float > Transpose operator.    argMax  fun argMax(): Int Row major 1D index.    argMin  fun argMin(): Int Row major 1D index.    chol  fun chol(): Matrix < Float >    copy  fun copy(): Matrix < Float >    det  fun det(): Float    diag  fun diag(): Matrix < Float >    div  fun div(other: Float ): Matrix < Float > fun div(other: Int ): Matrix < Float >    elementSum  fun elementSum(): Float    elementTimes  fun elementTimes(other: Matrix < Float >): Matrix < Float >    epow  fun epow(other: Float ): Matrix < Float > fun epow(other: Int ): Matrix < Float >    expm  fun expm(): Matrix < Float >    getBaseMatrix  fun getBaseMatrix(): Any Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use  get  and  set ) to access the elements generically).    getCol  fun getCol(col: Int ): Matrix < Float >    getDouble  fun getDouble(i: Int , j: Int ): Double fun getDouble(i: Int ): Double    getDoubleData  fun getDoubleData(): DoubleArray Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known.    getFactory  fun getFactory(): MatrixFactory < Matrix < Float >> Because sometimes all you have is a Matrix, but you really want a MatrixFactory.    getFloat  fun getFloat(i: Int , j: Int ): Float fun getFloat(i: Int ): Float    getGeneric  fun getGeneric(i: Int , j: Int ): Float fun getGeneric(i: Int ): Float    getInt  fun getInt(i: Int , j: Int ): Int fun getInt(i: Int ): Int    getRow  fun getRow(row: Int ): Matrix < Float >    inv  fun inv(): Matrix < Float >    max  fun max(): Float    mean  fun mean(): Float    min  fun min(): Float    minus  fun minus(other: Float ): Matrix < Float > fun minus(other: Matrix < Float >): Matrix < Float >    norm  fun norm(): Float    normF  fun normF(): Float    normIndP1  fun normIndP1(): Float    numCols  fun numCols(): Int    numRows  fun numRows(): Int    pinv  fun pinv(): Matrix < Float >    plus  fun plus(other: Float ): Matrix < Float > fun plus(other: Matrix < Float >): Matrix < Float >    rem  fun rem(other: Matrix < Float >): Matrix < Float >    setCol  fun setCol(index: Int , col: Matrix < Float >): Unit    setDouble  fun setDouble(i: Int , v: Double ): Unit fun setDouble(i: Int , j: Int , v: Double ): Unit    setFloat  fun setFloat(i: Int , v: Float ): Unit fun setFloat(i: Int , j: Int , v: Float ): Unit    setGeneric  fun setGeneric(i: Int , v: Float ): Unit fun setGeneric(i: Int , j: Int , v: Float ): Unit    setInt  fun setInt(i: Int , v: Int ): Unit fun setInt(i: Int , j: Int , v: Int ): Unit    setRow  fun setRow(index: Int , row: Matrix < Float >): Unit    solve  fun solve(A: Matrix < Float >, B: Matrix < Float >): Matrix < Float >    times  fun times(other: Matrix < Float >): Matrix < Float > fun times(other: Float ): Matrix < Float >    trace  fun trace(): Float    transpose  fun transpose(): Matrix < Float >    unaryMinus  fun unaryMinus(): Matrix < Float >",
            "title": "Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/index.html#inherited-functions",
            "text": "Name  Summary      asColVector  open fun asColVector(): Matrix <T> Returns the given vector as a row vector. Will call transpose() on row vectors    asRowVector  open fun asRowVector(): Matrix <T> Returns the given vector as a row vector. Will call transpose() on column vectors    cumSum  open fun cumSum(): Matrix <T> Calculates the cumulative (ongoing) sum of a matrix's elements. For example,  cumsum(mat[1,2,3])  would return  mat[1,3,6] . Assumes matrix type is convertible to double.    pow  open infix fun pow(exponent: Int ): Matrix <T>    repr  open fun repr(): String    selectCols  open fun selectCols(vararg idxs: Int ): Matrix <T> Select a set of cols from a matrix to form the cols of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth cols of an input matrix, you would write  input.selectCols(0,1,4) . open fun <U : Number > selectCols(idxs: Matrix <U>): Matrix <T>    selectRows  open fun selectRows(vararg idxs: Int ): Matrix <T> Select a set of rows from a matrix to form the rows of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth rows of an input matrix, you would write  input.selectRows(0,1,4) . open fun <U : Number > selectRows(idxs: Matrix <U>): Matrix <T>    to2DArray  open fun to2DArray(): Array < DoubleArray > Returns a Matrix as a double 2D array. Intended for MATLAB interop.    toIterable  open fun toIterable(): Iterable <T>    wrapRange  open fun wrapRange(range: IntRange , max: Int ): IntRange",
            "title": "Inherited Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/index.html#extension-functions",
            "text": "Name  Summary      get  operator fun <T> Matrix <T>.get(i: Int , j: Int ): T``operator fun <T> Matrix <T>.get(i: Int ): T Gets the ith element in the matrix. If 2D, selects elements in row-major order. operator fun <T> Matrix <T>.get(rows: IntRange , cols: IntRange ): Matrix <T> Allow slicing, e.g.  matrix[1..2, 3..4] . Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun <T> Matrix <T>.get(rows: IntRange , cols: Int ): Matrix <T> Allows for slicing of the rows and selection of a single column operator fun <T> Matrix <T>.get(rows: Int , cols: IntRange ): Matrix <T> Allows for slicing of the cols and selection of a single row    set  operator fun <T> Matrix <T>.set(i: Int , v: T): Unit Set the ith element in the matrix. If 2D, selects elements in row-major order. operator fun <T> Matrix <T>.set(i: Int , j: Int , v: T): Unit operator fun <T> Matrix <T>.set(rows: IntRange , cols: IntRange , value: T): Unit operator fun <T> Matrix <T>.set(rows: Int , cols: IntRange , value: T): Unit operator fun <T> Matrix <T>.set(rows: IntRange , cols: Int , value: T): Unit operator fun <T> Matrix <T>.set(rows: IntRange , cols: IntRange , value: Matrix <T>): Unit Allow assignment to a slice, e.g.  matrix[1..2, 3..4] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun <T> Matrix <T>.set(rows: Int , cols: IntRange , value: Matrix <T>): Unit Allow assignment to a slice, e.g.  matrix[2, 3..4] =something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range. operator fun <T> Matrix <T>.set(rows: IntRange , cols: Int , value: Matrix <T>): Unit Allow assignment to a slice, e.g.  matrix[1..2, 3] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.",
            "title": "Extension Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/inv/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \ninv\n\n\ninv\n\n\nfun inv():\nMatrix\n<\nFloat\n>\n\n\nOverrides \nMatrix.inv",
            "title": "Inv"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/inv/index.html#inv",
            "text": "fun inv(): Matrix < Float >  Overrides  Matrix.inv",
            "title": "inv"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/max/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \nmax\n\n\nmax\n\n\nfun max():\nFloat\n\n\nOverrides \nMatrix.max",
            "title": "Max"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/max/index.html#max",
            "text": "fun max(): Float  Overrides  Matrix.max",
            "title": "max"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/mean/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \nmean\n\n\nmean\n\n\nfun mean():\nFloat\n\n\nOverrides \nMatrix.mean",
            "title": "Mean"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/mean/index.html#mean",
            "text": "fun mean(): Float  Overrides  Matrix.mean",
            "title": "mean"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/min/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \nmin\n\n\nmin\n\n\nfun min():\nFloat\n\n\nOverrides \nMatrix.min",
            "title": "Min"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/min/index.html#min",
            "text": "fun min(): Float  Overrides  Matrix.min",
            "title": "min"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/minus/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \nminus\n\n\nminus\n\n\nfun minus(other:\nFloat\n):\nMatrix\n<\nFloat\n>\n\n\nfun minus(other:\nMatrix\n<\nFloat\n>):\nMatrix\n<\nFloat\n>",
            "title": "Minus"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/minus/index.html#minus",
            "text": "fun minus(other: Float ): Matrix < Float >  fun minus(other: Matrix < Float >): Matrix < Float >",
            "title": "minus"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/norm-f/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \nnormF\n\n\nnormF\n\n\nfun normF():\nFloat\n\n\nOverrides \nMatrix.normF",
            "title": "Norm f"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/norm-f/index.html#normf",
            "text": "fun normF(): Float  Overrides  Matrix.normF",
            "title": "normF"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/norm-ind-p1/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \nnormIndP1\n\n\nnormIndP1\n\n\nfun normIndP1():\nFloat\n\n\nOverrides \nMatrix.normIndP1",
            "title": "Norm ind p1"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/norm-ind-p1/index.html#normindp1",
            "text": "fun normIndP1(): Float  Overrides  Matrix.normIndP1",
            "title": "normIndP1"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/norm/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \nnorm\n\n\nnorm\n\n\nfun norm():\nFloat\n\n\nOverrides \nMatrix.norm",
            "title": "Norm"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/norm/index.html#norm",
            "text": "fun norm(): Float  Overrides  Matrix.norm",
            "title": "norm"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/num-cols/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \nnumCols\n\n\nnumCols\n\n\nfun numCols():\nInt\n\n\nOverrides \nMatrix.numCols",
            "title": "Num cols"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/num-cols/index.html#numcols",
            "text": "fun numCols(): Int  Overrides  Matrix.numCols",
            "title": "numCols"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/num-rows/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \nnumRows\n\n\nnumRows\n\n\nfun numRows():\nInt\n\n\nOverrides \nMatrix.numRows",
            "title": "Num rows"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/num-rows/index.html#numrows",
            "text": "fun numRows(): Int  Overrides  Matrix.numRows",
            "title": "numRows"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/pinv/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \npinv\n\n\npinv\n\n\nfun pinv():\nMatrix\n<\nFloat\n>\n\n\nOverrides \nMatrix.pinv",
            "title": "Pinv"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/pinv/index.html#pinv",
            "text": "fun pinv(): Matrix < Float >  Overrides  Matrix.pinv",
            "title": "pinv"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/plus/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \nplus\n\n\nplus\n\n\nfun plus(other:\nFloat\n):\nMatrix\n<\nFloat\n>\n\n\nfun plus(other:\nMatrix\n<\nFloat\n>):\nMatrix\n<\nFloat\n>",
            "title": "Plus"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/plus/index.html#plus",
            "text": "fun plus(other: Float ): Matrix < Float >  fun plus(other: Matrix < Float >): Matrix < Float >",
            "title": "plus"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/rem/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \nrem\n\n\nrem\n\n\nfun rem(other:\nMatrix\n<\nFloat\n>):\nMatrix\n<\nFloat\n>",
            "title": "Rem"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/rem/index.html#rem",
            "text": "fun rem(other: Matrix < Float >): Matrix < Float >",
            "title": "rem"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/rows/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \nrows\n\n\nrows\n\n\nval rows:\nInt",
            "title": "Rows"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/rows/index.html#rows",
            "text": "val rows: Int",
            "title": "rows"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/set-col/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \nsetCol\n\n\nsetCol\n\n\nfun setCol(index:\nInt\n, col:\nMatrix\n<\nFloat\n>):\nUnit",
            "title": "Set col"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/set-col/index.html#setcol",
            "text": "fun setCol(index: Int , col: Matrix < Float >): Unit",
            "title": "setCol"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/set-double/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \nsetDouble\n\n\nsetDouble\n\n\nfun setDouble(i:\nInt\n, v:\nDouble\n):\nUnit\n\n\nOverrides \nMatrix.setDouble\n\n\nfun setDouble(i:\nInt\n, j:\nInt\n, v:\nDouble\n):\nUnit\n\n\nOverrides \nMatrix.setDouble",
            "title": "Set double"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/set-double/index.html#setdouble",
            "text": "fun setDouble(i: Int , v: Double ): Unit  Overrides  Matrix.setDouble  fun setDouble(i: Int , j: Int , v: Double ): Unit  Overrides  Matrix.setDouble",
            "title": "setDouble"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/set-float/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \nsetFloat\n\n\nsetFloat\n\n\nfun setFloat(i:\nInt\n, v:\nFloat\n):\nUnit\n\n\nOverrides \nMatrix.setFloat\n\n\nfun setFloat(i:\nInt\n, j:\nInt\n, v:\nFloat\n):\nUnit\n\n\nOverrides \nMatrix.setFloat",
            "title": "Set float"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/set-float/index.html#setfloat",
            "text": "fun setFloat(i: Int , v: Float ): Unit  Overrides  Matrix.setFloat  fun setFloat(i: Int , j: Int , v: Float ): Unit  Overrides  Matrix.setFloat",
            "title": "setFloat"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/set-generic/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \nsetGeneric\n\n\nsetGeneric\n\n\nfun setGeneric(i:\nInt\n, v:\nFloat\n):\nUnit\n\n\nfun setGeneric(i:\nInt\n, j:\nInt\n, v:\nFloat\n):\nUnit",
            "title": "Set generic"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/set-generic/index.html#setgeneric",
            "text": "fun setGeneric(i: Int , v: Float ): Unit  fun setGeneric(i: Int , j: Int , v: Float ): Unit",
            "title": "setGeneric"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/set-int/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \nsetInt\n\n\nsetInt\n\n\nfun setInt(i:\nInt\n, v:\nInt\n):\nUnit\n\n\nOverrides \nMatrix.setInt\n\n\nfun setInt(i:\nInt\n, j:\nInt\n, v:\nInt\n):\nUnit\n\n\nOverrides \nMatrix.setInt",
            "title": "Set int"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/set-int/index.html#setint",
            "text": "fun setInt(i: Int , v: Int ): Unit  Overrides  Matrix.setInt  fun setInt(i: Int , j: Int , v: Int ): Unit  Overrides  Matrix.setInt",
            "title": "setInt"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/set-row/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \nsetRow\n\n\nsetRow\n\n\nfun setRow(index:\nInt\n, row:\nMatrix\n<\nFloat\n>):\nUnit",
            "title": "Set row"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/set-row/index.html#setrow",
            "text": "fun setRow(index: Int , row: Matrix < Float >): Unit",
            "title": "setRow"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/solve/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \nsolve\n\n\nsolve\n\n\nfun solve(A:\nMatrix\n<\nFloat\n>, B:\nMatrix\n<\nFloat\n>):\nMatrix\n<\nFloat\n>",
            "title": "Solve"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/solve/index.html#solve",
            "text": "fun solve(A: Matrix < Float >, B: Matrix < Float >): Matrix < Float >",
            "title": "solve"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/storage/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \nstorage\n\n\nstorage\n\n\nval storage:\nFloatArray",
            "title": "Storage"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/storage/index.html#storage",
            "text": "val storage: FloatArray",
            "title": "storage"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/times/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \ntimes\n\n\ntimes\n\n\nfun times(other:\nMatrix\n<\nFloat\n>):\nMatrix\n<\nFloat\n>\n\n\nfun times(other:\nFloat\n):\nMatrix\n<\nFloat\n>",
            "title": "Times"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/times/index.html#times",
            "text": "fun times(other: Matrix < Float >): Matrix < Float >  fun times(other: Float ): Matrix < Float >",
            "title": "times"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/trace/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \ntrace\n\n\ntrace\n\n\nfun trace():\nFloat\n\n\nOverrides \nMatrix.trace",
            "title": "Trace"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/trace/index.html#trace",
            "text": "fun trace(): Float  Overrides  Matrix.trace",
            "title": "trace"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/transpose/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \ntranspose\n\n\ntranspose\n\n\nfun transpose():\nMatrix\n<\nFloat\n>\n\n\nOverrides \nMatrix.transpose",
            "title": "Transpose"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/transpose/index.html#transpose",
            "text": "fun transpose(): Matrix < Float >  Overrides  Matrix.transpose",
            "title": "transpose"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/unary-minus/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrix\n / \nunaryMinus\n\n\nunaryMinus\n\n\nfun unaryMinus():\nMatrix\n<\nFloat\n>\n\n\nOverrides \nMatrix.unaryMinus",
            "title": "Unary minus"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix/unary-minus/index.html#unaryminus",
            "text": "fun unaryMinus(): Matrix < Float >  Overrides  Matrix.unaryMinus",
            "title": "unaryMinus"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix-factory/-init-/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrixFactory\n / \n<init>\n\n\n<init>\n\n\nDefaultFloatMatrixFactory()",
            "title": " init "
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix-factory/-init-/index.html#init",
            "text": "DefaultFloatMatrixFactory()",
            "title": "&lt;init&gt;"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix-factory/arange/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrixFactory\n / \narange\n\n\narange\n\n\nfun arange(start:\nDouble\n, stop:\nDouble\n, increment:\nDouble\n):\nMatrix\n<\nFloat\n>\n\n\nOverrides \nMatrixFactory.arange\n\n\nfun arange(start:\nInt\n, stop:\nInt\n, increment:\nInt\n):\nMatrix\n<\nFloat\n>\n\n\nOverrides \nMatrixFactory.arange\n\n\nCreates a row-vector with the first value of \nstart\n and the last value of \nstop\n, with \nincrement\n steps\nbetween each value.\n\n\nfun arange(start:\nDouble\n, stop:\nDouble\n):\nMatrix\n<\nFloat\n>\n\n\nOverrides \nMatrixFactory.arange\n\n\nfun arange(start:\nInt\n, stop:\nInt\n):\nMatrix\n<\nFloat\n>\n\n\nOverrides \nMatrixFactory.arange\n\n\nCreates a row-vector with the first value of \nstart\n and the last value of \nstop\n, with unit steps\nbetween each value.",
            "title": "Arange"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix-factory/arange/index.html#arange",
            "text": "fun arange(start: Double , stop: Double , increment: Double ): Matrix < Float >  Overrides  MatrixFactory.arange  fun arange(start: Int , stop: Int , increment: Int ): Matrix < Float >  Overrides  MatrixFactory.arange  Creates a row-vector with the first value of  start  and the last value of  stop , with  increment  steps\nbetween each value.  fun arange(start: Double , stop: Double ): Matrix < Float >  Overrides  MatrixFactory.arange  fun arange(start: Int , stop: Int ): Matrix < Float >  Overrides  MatrixFactory.arange  Creates a row-vector with the first value of  start  and the last value of  stop , with unit steps\nbetween each value.",
            "title": "arange"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix-factory/create/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrixFactory\n / \ncreate\n\n\ncreate\n\n\nfun create(data:\nIntRange\n):\nMatrix\n<\nFloat\n>\n\n\nOverrides \nMatrixFactory.create\n\n\nCreates a row-vector with initial values pulled from an int range, e.g. 1..45\n\n\nfun create(data:\nDoubleArray\n):\nMatrix\n<\nFloat\n>\n\n\nOverrides \nMatrixFactory.create\n\n\nCreates a row-vector with initial values pulled from a double array\n\n\nfun create(data:\nArray\n<\nDoubleArray\n>):\nMatrix\n<\nFloat\n>\n\n\nOverrides \nMatrixFactory.create\n\n\nCreates a matrix from an array of arrays (row-major)",
            "title": "Create"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix-factory/create/index.html#create",
            "text": "fun create(data: IntRange ): Matrix < Float >  Overrides  MatrixFactory.create  Creates a row-vector with initial values pulled from an int range, e.g. 1..45  fun create(data: DoubleArray ): Matrix < Float >  Overrides  MatrixFactory.create  Creates a row-vector with initial values pulled from a double array  fun create(data: Array < DoubleArray >): Matrix < Float >  Overrides  MatrixFactory.create  Creates a matrix from an array of arrays (row-major)",
            "title": "create"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix-factory/eye/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrixFactory\n / \neye\n\n\neye\n\n\nfun eye(size:\nInt\n):\nMatrix\n<\nFloat\n>\n\n\nOverrides \nMatrixFactory.eye\n\n\nCreates an identity matrix of the requested shape\n\n\nfun eye(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nFloat\n>\n\n\nOverrides \nMatrixFactory.eye\n\n\nCreates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.",
            "title": "Eye"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix-factory/eye/index.html#eye",
            "text": "fun eye(size: Int ): Matrix < Float >  Overrides  MatrixFactory.eye  Creates an identity matrix of the requested shape  fun eye(rows: Int , cols: Int ): Matrix < Float >  Overrides  MatrixFactory.eye  Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.",
            "title": "eye"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix-factory/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrixFactory\n\n\nDefaultFloatMatrixFactory\n\n\nclass DefaultFloatMatrixFactory :\nMatrixFactory\n<\nMatrix\n<\nFloat\n>>\n\n\nConstructors\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\n<init>\n\n\nDefaultFloatMatrixFactory()\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\narange\n\n\nfun arange(start:\nDouble\n, stop:\nDouble\n, increment:\nDouble\n):\nMatrix\n<\nFloat\n>\nfun arange(start:\nInt\n, stop:\nInt\n, increment:\nInt\n):\nMatrix\n<\nFloat\n>\nCreates a row-vector with the first value of \nstart\n and the last value of \nstop\n, with \nincrement\n steps between each value.\nfun arange(start:\nDouble\n, stop:\nDouble\n):\nMatrix\n<\nFloat\n>\nfun arange(start:\nInt\n, stop:\nInt\n):\nMatrix\n<\nFloat\n>\nCreates a row-vector with the first value of \nstart\n and the last value of \nstop\n, with unit steps between each value.\n\n\n\n\n\n\ncreate\n\n\nfun create(data:\nIntRange\n):\nMatrix\n<\nFloat\n>\nCreates a row-vector with initial values pulled from an int range, e.g. 1..45\nfun create(data:\nDoubleArray\n):\nMatrix\n<\nFloat\n>\nCreates a row-vector with initial values pulled from a double array\nfun create(data:\nArray\n<\nDoubleArray\n>):\nMatrix\n<\nFloat\n>\nCreates a matrix from an array of arrays (row-major)\n\n\n\n\n\n\neye\n\n\nfun eye(size:\nInt\n):\nMatrix\n<\nFloat\n>\nCreates an identity matrix of the requested shape\nfun eye(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nFloat\n>\nCreates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.\n\n\n\n\n\n\nones\n\n\nfun ~~ones~~(size:\nInt\n):\nMatrix\n<\nFloat\n>\nCreates a one initialized square matrix of the requested shape\nfun ones(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nFloat\n>\nCreates a one initialized matrix of the requested shape\n\n\n\n\n\n\nrand\n\n\nfun ~~rand~~(size:\nInt\n):\nMatrix\n<\nFloat\n>\nCreates a vector of \nsize\n many uniform 0-1 random samples\nfun rand(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nFloat\n>\nCreates a matrix of uniform 0-1 random samples\nfun rand(rows:\nInt\n, cols:\nInt\n, seed:\nLong\n):\nMatrix\n<\nFloat\n>\nCreates a matrix of rows x cols uniform 0-1 samples using the given seed. Two calls with the same seed will produce identical matrices\n\n\n\n\n\n\nrandn\n\n\nfun ~~randn~~(size:\nInt\n):\nMatrix\n<\nFloat\n>\nCreates a vector of \nsize\n many unit-normal random samples\nfun randn(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nFloat\n>\nCreates a matrix of unit-normal random samples\nfun randn(rows:\nInt\n, cols:\nInt\n, seed:\nLong\n):\nMatrix\n<\nFloat\n>\nCreates a matrix of rows x cols random samples using the given seed. Two calls with the same seed will produce identical matrices\n\n\n\n\n\n\nzeros\n\n\nfun zeros(rows:\nInt\n, cols:\nInt\n):\nDefaultFloatMatrix\nGenerate a zero initialized matrix of the requested shape.\nfun ~~zeros~~(size:\nInt\n):\nMatrix\n<\nFloat\n>\nGenerate a zero initialized square matrix of the requested shape.",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix-factory/index.html#defaultfloatmatrixfactory",
            "text": "class DefaultFloatMatrixFactory : MatrixFactory < Matrix < Float >>",
            "title": "DefaultFloatMatrixFactory"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix-factory/index.html#constructors",
            "text": "Name  Summary      <init>  DefaultFloatMatrixFactory()",
            "title": "Constructors"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix-factory/index.html#functions",
            "text": "Name  Summary      arange  fun arange(start: Double , stop: Double , increment: Double ): Matrix < Float > fun arange(start: Int , stop: Int , increment: Int ): Matrix < Float > Creates a row-vector with the first value of  start  and the last value of  stop , with  increment  steps between each value. fun arange(start: Double , stop: Double ): Matrix < Float > fun arange(start: Int , stop: Int ): Matrix < Float > Creates a row-vector with the first value of  start  and the last value of  stop , with unit steps between each value.    create  fun create(data: IntRange ): Matrix < Float > Creates a row-vector with initial values pulled from an int range, e.g. 1..45 fun create(data: DoubleArray ): Matrix < Float > Creates a row-vector with initial values pulled from a double array fun create(data: Array < DoubleArray >): Matrix < Float > Creates a matrix from an array of arrays (row-major)    eye  fun eye(size: Int ): Matrix < Float > Creates an identity matrix of the requested shape fun eye(rows: Int , cols: Int ): Matrix < Float > Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.    ones  fun ~~ones~~(size: Int ): Matrix < Float > Creates a one initialized square matrix of the requested shape fun ones(rows: Int , cols: Int ): Matrix < Float > Creates a one initialized matrix of the requested shape    rand  fun ~~rand~~(size: Int ): Matrix < Float > Creates a vector of  size  many uniform 0-1 random samples fun rand(rows: Int , cols: Int ): Matrix < Float > Creates a matrix of uniform 0-1 random samples fun rand(rows: Int , cols: Int , seed: Long ): Matrix < Float > Creates a matrix of rows x cols uniform 0-1 samples using the given seed. Two calls with the same seed will produce identical matrices    randn  fun ~~randn~~(size: Int ): Matrix < Float > Creates a vector of  size  many unit-normal random samples fun randn(rows: Int , cols: Int ): Matrix < Float > Creates a matrix of unit-normal random samples fun randn(rows: Int , cols: Int , seed: Long ): Matrix < Float > Creates a matrix of rows x cols random samples using the given seed. Two calls with the same seed will produce identical matrices    zeros  fun zeros(rows: Int , cols: Int ): DefaultFloatMatrix Generate a zero initialized matrix of the requested shape. fun ~~zeros~~(size: Int ): Matrix < Float > Generate a zero initialized square matrix of the requested shape.",
            "title": "Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix-factory/ones/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrixFactory\n / \nones\n\n\nones\n\n\nfun ~~ones~~(size:\nInt\n):\nMatrix\n<\nFloat\n>\n\n\nOverrides \nMatrixFactory.ones\n\n\nDeprecated:\n Use rows,col overload instead. This method will be removed in a future update.\n\n\nCreates a one initialized square matrix of the requested shape\n\n\nfun ones(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nFloat\n>\n\n\nOverrides \nMatrixFactory.ones\n\n\nCreates a one initialized matrix of the requested shape",
            "title": "Ones"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix-factory/ones/index.html#ones",
            "text": "fun ~~ones~~(size: Int ): Matrix < Float >  Overrides  MatrixFactory.ones  Deprecated:  Use rows,col overload instead. This method will be removed in a future update.  Creates a one initialized square matrix of the requested shape  fun ones(rows: Int , cols: Int ): Matrix < Float >  Overrides  MatrixFactory.ones  Creates a one initialized matrix of the requested shape",
            "title": "ones"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix-factory/rand/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrixFactory\n / \nrand\n\n\nrand\n\n\nfun ~~rand~~(size:\nInt\n):\nMatrix\n<\nFloat\n>\n\n\nOverrides \nMatrixFactory.rand\n\n\nDeprecated:\n Use rows,col overload instead. This method will be removed in a future update.\n\n\nCreates a vector of \nsize\n many uniform 0-1 random samples\n\n\nfun rand(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nFloat\n>\n\n\nOverrides \nMatrixFactory.rand\n\n\nCreates a matrix of uniform 0-1 random samples\n\n\nfun rand(rows:\nInt\n, cols:\nInt\n, seed:\nLong\n):\nMatrix\n<\nFloat\n>\n\n\nOverrides \nMatrixFactory.rand\n\n\nCreates a matrix of rows x cols uniform 0-1 samples using the given seed. Two calls with the same seed\nwill produce identical matrices",
            "title": "Rand"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix-factory/rand/index.html#rand",
            "text": "fun ~~rand~~(size: Int ): Matrix < Float >  Overrides  MatrixFactory.rand  Deprecated:  Use rows,col overload instead. This method will be removed in a future update.  Creates a vector of  size  many uniform 0-1 random samples  fun rand(rows: Int , cols: Int ): Matrix < Float >  Overrides  MatrixFactory.rand  Creates a matrix of uniform 0-1 random samples  fun rand(rows: Int , cols: Int , seed: Long ): Matrix < Float >  Overrides  MatrixFactory.rand  Creates a matrix of rows x cols uniform 0-1 samples using the given seed. Two calls with the same seed\nwill produce identical matrices",
            "title": "rand"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix-factory/randn/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrixFactory\n / \nrandn\n\n\nrandn\n\n\nfun ~~randn~~(size:\nInt\n):\nMatrix\n<\nFloat\n>\n\n\nOverrides \nMatrixFactory.randn\n\n\nDeprecated:\n Use rows,col overload instead. This method will be removed in a future update.\n\n\nCreates a vector of \nsize\n many unit-normal random samples\n\n\nfun randn(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nFloat\n>\n\n\nOverrides \nMatrixFactory.randn\n\n\nCreates a matrix of unit-normal random samples\n\n\nfun randn(rows:\nInt\n, cols:\nInt\n, seed:\nLong\n):\nMatrix\n<\nFloat\n>\n\n\nOverrides \nMatrixFactory.randn\n\n\nCreates a matrix of rows x cols random samples using the given seed. Two calls with the same seed\nwill produce identical matrices",
            "title": "Randn"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix-factory/randn/index.html#randn",
            "text": "fun ~~randn~~(size: Int ): Matrix < Float >  Overrides  MatrixFactory.randn  Deprecated:  Use rows,col overload instead. This method will be removed in a future update.  Creates a vector of  size  many unit-normal random samples  fun randn(rows: Int , cols: Int ): Matrix < Float >  Overrides  MatrixFactory.randn  Creates a matrix of unit-normal random samples  fun randn(rows: Int , cols: Int , seed: Long ): Matrix < Float >  Overrides  MatrixFactory.randn  Creates a matrix of rows x cols random samples using the given seed. Two calls with the same seed\nwill produce identical matrices",
            "title": "randn"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix-factory/zeros/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultFloatMatrixFactory\n / \nzeros\n\n\nzeros\n\n\nfun zeros(rows:\nInt\n, cols:\nInt\n):\nDefaultFloatMatrix\n\n\nOverrides \nMatrixFactory.zeros\n\n\nGenerate a zero initialized matrix of the requested shape.\n\n\nfun ~~zeros~~(size:\nInt\n):\nMatrix\n<\nFloat\n>\n\n\nOverrides \nMatrixFactory.zeros\n\n\nDeprecated:\n Use rows,col overload instead. This method will be removed in a future update.\n\n\nGenerate a zero initialized square matrix of the requested shape.",
            "title": "Zeros"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-float-matrix-factory/zeros/index.html#zeros",
            "text": "fun zeros(rows: Int , cols: Int ): DefaultFloatMatrix  Overrides  MatrixFactory.zeros  Generate a zero initialized matrix of the requested shape.  fun ~~zeros~~(size: Int ): Matrix < Float >  Overrides  MatrixFactory.zeros  Deprecated:  Use rows,col overload instead. This method will be removed in a future update.  Generate a zero initialized square matrix of the requested shape.",
            "title": "zeros"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/-init-/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \n<init>\n\n\n<init>\n\n\nDefaultIntMatrix(rows:\nInt\n, cols:\nInt\n)",
            "title": " init "
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/-init-/index.html#init",
            "text": "DefaultIntMatrix(rows: Int , cols: Int )",
            "title": "&lt;init&gt;"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/-l-u/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \nLU\n\n\nLU\n\n\nfun LU(): <ERROR CLASS><\nMatrix\n<\nInt\n>,\nMatrix\n<\nInt\n>,\nMatrix\n<\nInt\n>>\n\n\nOverrides \nMatrix.LU",
            "title": " l u"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/-l-u/index.html#lu",
            "text": "fun LU(): <ERROR CLASS>< Matrix < Int >, Matrix < Int >, Matrix < Int >>  Overrides  Matrix.LU",
            "title": "LU"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/-q-r/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \nQR\n\n\nQR\n\n\nfun QR(): <ERROR CLASS><\nMatrix\n<\nInt\n>,\nMatrix\n<\nInt\n>>\n\n\nOverrides \nMatrix.QR",
            "title": " q r"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/-q-r/index.html#qr",
            "text": "fun QR(): <ERROR CLASS>< Matrix < Int >, Matrix < Int >>  Overrides  Matrix.QR",
            "title": "QR"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/-t/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \nT\n\n\nT\n\n\nfun T():\nMatrix\n<\nInt\n>\n\n\nOverrides \nMatrix.T\n\n\nTranspose operator.",
            "title": " t"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/-t/index.html#t",
            "text": "fun T(): Matrix < Int >  Overrides  Matrix.T  Transpose operator.",
            "title": "T"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/arg-max/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \nargMax\n\n\nargMax\n\n\nfun argMax():\nInt\n\n\nOverrides \nMatrix.argMax\n\n\nRow major 1D index.",
            "title": "Arg max"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/arg-max/index.html#argmax",
            "text": "fun argMax(): Int  Overrides  Matrix.argMax  Row major 1D index.",
            "title": "argMax"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/arg-min/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \nargMin\n\n\nargMin\n\n\nfun argMin():\nInt\n\n\nOverrides \nMatrix.argMin\n\n\nRow major 1D index.",
            "title": "Arg min"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/arg-min/index.html#argmin",
            "text": "fun argMin(): Int  Overrides  Matrix.argMin  Row major 1D index.",
            "title": "argMin"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/chol/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \nchol\n\n\nchol\n\n\nfun chol():\nMatrix\n<\nInt\n>\n\n\nOverrides \nMatrix.chol",
            "title": "Chol"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/chol/index.html#chol",
            "text": "fun chol(): Matrix < Int >  Overrides  Matrix.chol",
            "title": "chol"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/cols/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \ncols\n\n\ncols\n\n\nval cols:\nInt",
            "title": "Cols"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/cols/index.html#cols",
            "text": "val cols: Int",
            "title": "cols"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/copy/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \ncopy\n\n\ncopy\n\n\nfun copy():\nMatrix\n<\nInt\n>\n\n\nOverrides \nMatrix.copy",
            "title": "Copy"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/copy/index.html#copy",
            "text": "fun copy(): Matrix < Int >  Overrides  Matrix.copy",
            "title": "copy"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/det/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \ndet\n\n\ndet\n\n\nfun det():\nInt\n\n\nOverrides \nMatrix.det",
            "title": "Det"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/det/index.html#det",
            "text": "fun det(): Int  Overrides  Matrix.det",
            "title": "det"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/diag/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \ndiag\n\n\ndiag\n\n\nfun diag():\nMatrix\n<\nInt\n>\n\n\nOverrides \nMatrix.diag",
            "title": "Diag"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/diag/index.html#diag",
            "text": "fun diag(): Matrix < Int >  Overrides  Matrix.diag",
            "title": "diag"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/div/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \ndiv\n\n\ndiv\n\n\nfun div(other:\nInt\n):\nMatrix\n<\nInt\n>\n\n\nOverrides \nMatrix.div",
            "title": "Div"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/div/index.html#div",
            "text": "fun div(other: Int ): Matrix < Int >  Overrides  Matrix.div",
            "title": "div"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/element-sum/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \nelementSum\n\n\nelementSum\n\n\nfun elementSum():\nInt\n\n\nOverrides \nMatrix.elementSum",
            "title": "Element sum"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/element-sum/index.html#elementsum",
            "text": "fun elementSum(): Int  Overrides  Matrix.elementSum",
            "title": "elementSum"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/element-times/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \nelementTimes\n\n\nelementTimes\n\n\nfun elementTimes(other:\nMatrix\n<\nInt\n>):\nMatrix\n<\nInt\n>",
            "title": "Element times"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/element-times/index.html#elementtimes",
            "text": "fun elementTimes(other: Matrix < Int >): Matrix < Int >",
            "title": "elementTimes"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/epow/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \nepow\n\n\nepow\n\n\nfun epow(other:\nInt\n):\nMatrix\n<\nInt\n>\n\n\nOverrides \nMatrix.epow",
            "title": "Epow"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/epow/index.html#epow",
            "text": "fun epow(other: Int ): Matrix < Int >  Overrides  Matrix.epow",
            "title": "epow"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/expm/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \nexpm\n\n\nexpm\n\n\nfun expm():\nMatrix\n<\nInt\n>\n\n\nOverrides \nMatrix.expm",
            "title": "Expm"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/expm/index.html#expm",
            "text": "fun expm(): Matrix < Int >  Overrides  Matrix.expm",
            "title": "expm"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/get-base-matrix/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \ngetBaseMatrix\n\n\ngetBaseMatrix\n\n\nfun getBaseMatrix():\nAny\n\n\nOverrides \nMatrix.getBaseMatrix\n\n\nReturns the underlying matrix object from the back-end this Matrix is wrapping. This should be used\nsparingly (as it breaks encapsulation), but it can increase performance by using computation specifically\ndesigned for a particular back-end. Code using this method should not rely on a particular back-end, and\nshould always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use \nget\n and \nset\n)\nto access the elements generically).",
            "title": "Get base matrix"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/get-base-matrix/index.html#getbasematrix",
            "text": "fun getBaseMatrix(): Any  Overrides  Matrix.getBaseMatrix  Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used\nsparingly (as it breaks encapsulation), but it can increase performance by using computation specifically\ndesigned for a particular back-end. Code using this method should not rely on a particular back-end, and\nshould always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use  get  and  set )\nto access the elements generically).",
            "title": "getBaseMatrix"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/get-col/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \ngetCol\n\n\ngetCol\n\n\nfun getCol(col:\nInt\n):\nMatrix\n<\nInt\n>\n\n\nOverrides \nMatrix.getCol",
            "title": "Get col"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/get-col/index.html#getcol",
            "text": "fun getCol(col: Int ): Matrix < Int >  Overrides  Matrix.getCol",
            "title": "getCol"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/get-double-data/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \ngetDoubleData\n\n\ngetDoubleData\n\n\nfun getDoubleData():\nDoubleArray\n\n\nOverrides \nMatrix.getDoubleData\n\n\nRetrieves the data formatted as doubles in row-major order\nThis method is only for performance over potentially boxing get(Double)\nmethods. This method may or may not return a copy, and thus should be\ntreated as read-only unless backend behavior is known.",
            "title": "Get double data"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/get-double-data/index.html#getdoubledata",
            "text": "fun getDoubleData(): DoubleArray  Overrides  Matrix.getDoubleData  Retrieves the data formatted as doubles in row-major order\nThis method is only for performance over potentially boxing get(Double)\nmethods. This method may or may not return a copy, and thus should be\ntreated as read-only unless backend behavior is known.",
            "title": "getDoubleData"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/get-double/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \ngetDouble\n\n\ngetDouble\n\n\nfun getDouble(i:\nInt\n, j:\nInt\n):\nDouble\n\n\nOverrides \nMatrix.getDouble\n\n\nfun getDouble(i:\nInt\n):\nDouble\n\n\nOverrides \nMatrix.getDouble",
            "title": "Get double"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/get-double/index.html#getdouble",
            "text": "fun getDouble(i: Int , j: Int ): Double  Overrides  Matrix.getDouble  fun getDouble(i: Int ): Double  Overrides  Matrix.getDouble",
            "title": "getDouble"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/get-factory/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \ngetFactory\n\n\ngetFactory\n\n\nfun getFactory():\nMatrixFactory\n<\nMatrix\n<\nInt\n>>\n\n\nOverrides \nMatrix.getFactory\n\n\nBecause sometimes all you have is a Matrix, but you really want a MatrixFactory.",
            "title": "Get factory"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/get-factory/index.html#getfactory",
            "text": "fun getFactory(): MatrixFactory < Matrix < Int >>  Overrides  Matrix.getFactory  Because sometimes all you have is a Matrix, but you really want a MatrixFactory.",
            "title": "getFactory"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/get-float/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \ngetFloat\n\n\ngetFloat\n\n\nfun getFloat(i:\nInt\n, j:\nInt\n):\nFloat\n\n\nOverrides \nMatrix.getFloat\n\n\nfun getFloat(i:\nInt\n):\nFloat\n\n\nOverrides \nMatrix.getFloat",
            "title": "Get float"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/get-float/index.html#getfloat",
            "text": "fun getFloat(i: Int , j: Int ): Float  Overrides  Matrix.getFloat  fun getFloat(i: Int ): Float  Overrides  Matrix.getFloat",
            "title": "getFloat"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/get-generic/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \ngetGeneric\n\n\ngetGeneric\n\n\nfun getGeneric(i:\nInt\n, j:\nInt\n):\nInt\n\n\nOverrides \nMatrix.getGeneric\n\n\nfun getGeneric(i:\nInt\n):\nInt\n\n\nOverrides \nMatrix.getGeneric",
            "title": "Get generic"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/get-generic/index.html#getgeneric",
            "text": "fun getGeneric(i: Int , j: Int ): Int  Overrides  Matrix.getGeneric  fun getGeneric(i: Int ): Int  Overrides  Matrix.getGeneric",
            "title": "getGeneric"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/get-int/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \ngetInt\n\n\ngetInt\n\n\nfun getInt(i:\nInt\n, j:\nInt\n):\nInt\n\n\nOverrides \nMatrix.getInt\n\n\nfun getInt(i:\nInt\n):\nInt\n\n\nOverrides \nMatrix.getInt",
            "title": "Get int"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/get-int/index.html#getint",
            "text": "fun getInt(i: Int , j: Int ): Int  Overrides  Matrix.getInt  fun getInt(i: Int ): Int  Overrides  Matrix.getInt",
            "title": "getInt"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/get-row/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \ngetRow\n\n\ngetRow\n\n\nfun getRow(row:\nInt\n):\nMatrix\n<\nInt\n>\n\n\nOverrides \nMatrix.getRow",
            "title": "Get row"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/get-row/index.html#getrow",
            "text": "fun getRow(row: Int ): Matrix < Int >  Overrides  Matrix.getRow",
            "title": "getRow"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n\n\nDefaultIntMatrix\n\n\nclass DefaultIntMatrix :\nMatrix\n<\nInt\n>\n\n\nConstructors\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\n<init>\n\n\nDefaultIntMatrix(rows:\nInt\n, cols:\nInt\n)\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\ncols\n\n\nval cols:\nInt\n\n\n\n\n\n\nrows\n\n\nval rows:\nInt\n\n\n\n\n\n\nstorage\n\n\nval storage:\nIntArray\n\n\n\n\n\n\n\n\nInherited Properties\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nT\n\n\nopen val T:\nMatrix\n<T>\nTranspose operator.\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nLU\n\n\nfun LU(): <ERROR CLASS><\nMatrix\n<\nInt\n>,\nMatrix\n<\nInt\n>,\nMatrix\n<\nInt\n>>\n\n\n\n\n\n\nQR\n\n\nfun QR(): <ERROR CLASS><\nMatrix\n<\nInt\n>,\nMatrix\n<\nInt\n>>\n\n\n\n\n\n\nT\n\n\nfun T():\nMatrix\n<\nInt\n>\nTranspose operator.\n\n\n\n\n\n\nargMax\n\n\nfun argMax():\nInt\nRow major 1D index.\n\n\n\n\n\n\nargMin\n\n\nfun argMin():\nInt\nRow major 1D index.\n\n\n\n\n\n\nchol\n\n\nfun chol():\nMatrix\n<\nInt\n>\n\n\n\n\n\n\ncopy\n\n\nfun copy():\nMatrix\n<\nInt\n>\n\n\n\n\n\n\ndet\n\n\nfun det():\nInt\n\n\n\n\n\n\ndiag\n\n\nfun diag():\nMatrix\n<\nInt\n>\n\n\n\n\n\n\ndiv\n\n\nfun div(other:\nInt\n):\nMatrix\n<\nInt\n>\n\n\n\n\n\n\nelementSum\n\n\nfun elementSum():\nInt\n\n\n\n\n\n\nelementTimes\n\n\nfun elementTimes(other:\nMatrix\n<\nInt\n>):\nMatrix\n<\nInt\n>\n\n\n\n\n\n\nepow\n\n\nfun epow(other:\nInt\n):\nMatrix\n<\nInt\n>\n\n\n\n\n\n\nexpm\n\n\nfun expm():\nMatrix\n<\nInt\n>\n\n\n\n\n\n\ngetBaseMatrix\n\n\nfun getBaseMatrix():\nAny\nReturns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use \nget\n and \nset\n) to access the elements generically).\n\n\n\n\n\n\ngetCol\n\n\nfun getCol(col:\nInt\n):\nMatrix\n<\nInt\n>\n\n\n\n\n\n\ngetDouble\n\n\nfun getDouble(i:\nInt\n, j:\nInt\n):\nDouble\nfun getDouble(i:\nInt\n):\nDouble\n\n\n\n\n\n\ngetDoubleData\n\n\nfun getDoubleData():\nDoubleArray\nRetrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known.\n\n\n\n\n\n\ngetFactory\n\n\nfun getFactory():\nMatrixFactory\n<\nMatrix\n<\nInt\n>>\nBecause sometimes all you have is a Matrix, but you really want a MatrixFactory.\n\n\n\n\n\n\ngetFloat\n\n\nfun getFloat(i:\nInt\n, j:\nInt\n):\nFloat\nfun getFloat(i:\nInt\n):\nFloat\n\n\n\n\n\n\ngetGeneric\n\n\nfun getGeneric(i:\nInt\n, j:\nInt\n):\nInt\nfun getGeneric(i:\nInt\n):\nInt\n\n\n\n\n\n\ngetInt\n\n\nfun getInt(i:\nInt\n, j:\nInt\n):\nInt\nfun getInt(i:\nInt\n):\nInt\n\n\n\n\n\n\ngetRow\n\n\nfun getRow(row:\nInt\n):\nMatrix\n<\nInt\n>\n\n\n\n\n\n\ninv\n\n\nfun inv():\nMatrix\n<\nInt\n>\n\n\n\n\n\n\nmax\n\n\nfun max():\nInt\n\n\n\n\n\n\nmean\n\n\nfun mean():\nInt\n\n\n\n\n\n\nmin\n\n\nfun min():\nInt\n\n\n\n\n\n\nminus\n\n\nfun minus(other:\nInt\n):\nMatrix\n<\nInt\n>\nfun minus(other:\nMatrix\n<\nInt\n>):\nMatrix\n<\nInt\n>\n\n\n\n\n\n\nnorm\n\n\nfun norm():\nInt\n\n\n\n\n\n\nnormF\n\n\nfun normF():\nInt\n\n\n\n\n\n\nnormIndP1\n\n\nfun normIndP1():\nInt\n\n\n\n\n\n\nnumCols\n\n\nfun numCols():\nInt\n\n\n\n\n\n\nnumRows\n\n\nfun numRows():\nInt\n\n\n\n\n\n\npinv\n\n\nfun pinv():\nMatrix\n<\nInt\n>\n\n\n\n\n\n\nplus\n\n\nfun plus(other:\nInt\n):\nMatrix\n<\nInt\n>\nfun plus(other:\nMatrix\n<\nInt\n>):\nMatrix\n<\nInt\n>\n\n\n\n\n\n\nrem\n\n\nfun rem(other:\nMatrix\n<\nInt\n>):\nMatrix\n<\nInt\n>\n\n\n\n\n\n\nsetCol\n\n\nfun setCol(index:\nInt\n, col:\nMatrix\n<\nInt\n>):\nUnit\n\n\n\n\n\n\nsetDouble\n\n\nfun setDouble(i:\nInt\n, v:\nDouble\n):\nUnit\nfun setDouble(i:\nInt\n, j:\nInt\n, v:\nDouble\n):\nUnit\n\n\n\n\n\n\nsetFloat\n\n\nfun setFloat(i:\nInt\n, v:\nFloat\n):\nUnit\nfun setFloat(i:\nInt\n, j:\nInt\n, v:\nFloat\n):\nUnit\n\n\n\n\n\n\nsetGeneric\n\n\nfun setGeneric(i:\nInt\n, v:\nInt\n):\nUnit\nfun setGeneric(i:\nInt\n, j:\nInt\n, v:\nInt\n):\nUnit\n\n\n\n\n\n\nsetInt\n\n\nfun setInt(i:\nInt\n, v:\nInt\n):\nUnit\nfun setInt(i:\nInt\n, j:\nInt\n, v:\nInt\n):\nUnit\n\n\n\n\n\n\nsetRow\n\n\nfun setRow(index:\nInt\n, row:\nMatrix\n<\nInt\n>):\nUnit\n\n\n\n\n\n\nsolve\n\n\nfun solve(A:\nMatrix\n<\nInt\n>, B:\nMatrix\n<\nInt\n>):\nMatrix\n<\nInt\n>\n\n\n\n\n\n\ntimes\n\n\nfun times(other:\nMatrix\n<\nInt\n>):\nMatrix\n<\nInt\n>\nfun times(other:\nInt\n):\nMatrix\n<\nInt\n>\n\n\n\n\n\n\ntrace\n\n\nfun trace():\nInt\n\n\n\n\n\n\ntranspose\n\n\nfun transpose():\nMatrix\n<\nInt\n>\n\n\n\n\n\n\nunaryMinus\n\n\nfun unaryMinus():\nMatrix\n<\nInt\n>\n\n\n\n\n\n\n\n\nInherited Functions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nasColVector\n\n\nopen fun asColVector():\nMatrix\n<T>\nReturns the given vector as a row vector. Will call transpose() on row vectors\n\n\n\n\n\n\nasRowVector\n\n\nopen fun asRowVector():\nMatrix\n<T>\nReturns the given vector as a row vector. Will call transpose() on column vectors\n\n\n\n\n\n\ncumSum\n\n\nopen fun cumSum():\nMatrix\n<T>\nCalculates the cumulative (ongoing) sum of a matrix's elements. For example, \ncumsum(mat[1,2,3])\n would return \nmat[1,3,6]\n. Assumes matrix type is convertible to double.\n\n\n\n\n\n\npow\n\n\nopen infix fun pow(exponent:\nInt\n):\nMatrix\n<T>\n\n\n\n\n\n\nrepr\n\n\nopen fun repr():\nString\n\n\n\n\n\n\nselectCols\n\n\nopen fun <U :\nNumber\n> selectCols(idxs:\nMatrix\n<U>):\nMatrix\n<T>``open fun selectCols(vararg idxs:\nInt\n):\nMatrix\n<T>\nSelect a set of cols from a matrix to form the cols of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth cols of an input matrix, you would write \ninput.selectCols(0,1,4)\n.\n\n\n\n\n\n\nselectRows\n\n\nopen fun <U :\nNumber\n> selectRows(idxs:\nMatrix\n<U>):\nMatrix\n<T>``open fun selectRows(vararg idxs:\nInt\n):\nMatrix\n<T>\nSelect a set of rows from a matrix to form the rows of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth rows of an input matrix, you would write \ninput.selectRows(0,1,4)\n.\n\n\n\n\n\n\nto2DArray\n\n\nopen fun to2DArray():\nArray\n<\nDoubleArray\n>\nReturns a Matrix as a double 2D array. Intended for MATLAB interop.\n\n\n\n\n\n\ntoIterable\n\n\nopen fun toIterable():\nIterable\n<T>\n\n\n\n\n\n\nwrapRange\n\n\nopen fun wrapRange(range:\nIntRange\n, max:\nInt\n):\nIntRange\n\n\n\n\n\n\n\n\nExtension Functions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nget\n\n\noperator fun <T>\nMatrix\n<T>.get(i:\nInt\n, j:\nInt\n): T``operator fun <T>\nMatrix\n<T>.get(i:\nInt\n): T\nGets the ith element in the matrix. If 2D, selects elements in row-major order.\noperator fun <T>\nMatrix\n<T>.get(rows:\nIntRange\n, cols:\nIntRange\n):\nMatrix\n<T>\nAllow slicing, e.g. \nmatrix[1..2, 3..4]\n. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.\noperator fun <T>\nMatrix\n<T>.get(rows:\nIntRange\n, cols:\nInt\n):\nMatrix\n<T>\nAllows for slicing of the rows and selection of a single column\noperator fun <T>\nMatrix\n<T>.get(rows:\nInt\n, cols:\nIntRange\n):\nMatrix\n<T>\nAllows for slicing of the cols and selection of a single row\n\n\n\n\n\n\nset\n\n\noperator fun <T>\nMatrix\n<T>.set(i:\nInt\n, v: T):\nUnit\nSet the ith element in the matrix. If 2D, selects elements in row-major order.\noperator fun <T>\nMatrix\n<T>.set(i:\nInt\n, j:\nInt\n, v: T):\nUnit\noperator fun <T>\nMatrix\n<T>.set(rows:\nIntRange\n, cols:\nIntRange\n, value: T):\nUnit\noperator fun <T>\nMatrix\n<T>.set(rows:\nInt\n, cols:\nIntRange\n, value: T):\nUnit\noperator fun <T>\nMatrix\n<T>.set(rows:\nIntRange\n, cols:\nInt\n, value: T):\nUnit\noperator fun <T>\nMatrix\n<T>.set(rows:\nIntRange\n, cols:\nIntRange\n, value:\nMatrix\n<T>):\nUnit\nAllow assignment to a slice, e.g. \nmatrix[1..2, 3..4]\n=something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.\noperator fun <T>\nMatrix\n<T>.set(rows:\nInt\n, cols:\nIntRange\n, value:\nMatrix\n<T>):\nUnit\nAllow assignment to a slice, e.g. \nmatrix[2, 3..4]\n=something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range.\noperator fun <T>\nMatrix\n<T>.set(rows:\nIntRange\n, cols:\nInt\n, value:\nMatrix\n<T>):\nUnit\nAllow assignment to a slice, e.g. \nmatrix[1..2, 3]\n=something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/index.html#defaultintmatrix",
            "text": "class DefaultIntMatrix : Matrix < Int >",
            "title": "DefaultIntMatrix"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/index.html#constructors",
            "text": "Name  Summary      <init>  DefaultIntMatrix(rows: Int , cols: Int )",
            "title": "Constructors"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/index.html#properties",
            "text": "Name  Summary      cols  val cols: Int    rows  val rows: Int    storage  val storage: IntArray",
            "title": "Properties"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/index.html#inherited-properties",
            "text": "Name  Summary      T  open val T: Matrix <T> Transpose operator.",
            "title": "Inherited Properties"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/index.html#functions",
            "text": "Name  Summary      LU  fun LU(): <ERROR CLASS>< Matrix < Int >, Matrix < Int >, Matrix < Int >>    QR  fun QR(): <ERROR CLASS>< Matrix < Int >, Matrix < Int >>    T  fun T(): Matrix < Int > Transpose operator.    argMax  fun argMax(): Int Row major 1D index.    argMin  fun argMin(): Int Row major 1D index.    chol  fun chol(): Matrix < Int >    copy  fun copy(): Matrix < Int >    det  fun det(): Int    diag  fun diag(): Matrix < Int >    div  fun div(other: Int ): Matrix < Int >    elementSum  fun elementSum(): Int    elementTimes  fun elementTimes(other: Matrix < Int >): Matrix < Int >    epow  fun epow(other: Int ): Matrix < Int >    expm  fun expm(): Matrix < Int >    getBaseMatrix  fun getBaseMatrix(): Any Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use  get  and  set ) to access the elements generically).    getCol  fun getCol(col: Int ): Matrix < Int >    getDouble  fun getDouble(i: Int , j: Int ): Double fun getDouble(i: Int ): Double    getDoubleData  fun getDoubleData(): DoubleArray Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known.    getFactory  fun getFactory(): MatrixFactory < Matrix < Int >> Because sometimes all you have is a Matrix, but you really want a MatrixFactory.    getFloat  fun getFloat(i: Int , j: Int ): Float fun getFloat(i: Int ): Float    getGeneric  fun getGeneric(i: Int , j: Int ): Int fun getGeneric(i: Int ): Int    getInt  fun getInt(i: Int , j: Int ): Int fun getInt(i: Int ): Int    getRow  fun getRow(row: Int ): Matrix < Int >    inv  fun inv(): Matrix < Int >    max  fun max(): Int    mean  fun mean(): Int    min  fun min(): Int    minus  fun minus(other: Int ): Matrix < Int > fun minus(other: Matrix < Int >): Matrix < Int >    norm  fun norm(): Int    normF  fun normF(): Int    normIndP1  fun normIndP1(): Int    numCols  fun numCols(): Int    numRows  fun numRows(): Int    pinv  fun pinv(): Matrix < Int >    plus  fun plus(other: Int ): Matrix < Int > fun plus(other: Matrix < Int >): Matrix < Int >    rem  fun rem(other: Matrix < Int >): Matrix < Int >    setCol  fun setCol(index: Int , col: Matrix < Int >): Unit    setDouble  fun setDouble(i: Int , v: Double ): Unit fun setDouble(i: Int , j: Int , v: Double ): Unit    setFloat  fun setFloat(i: Int , v: Float ): Unit fun setFloat(i: Int , j: Int , v: Float ): Unit    setGeneric  fun setGeneric(i: Int , v: Int ): Unit fun setGeneric(i: Int , j: Int , v: Int ): Unit    setInt  fun setInt(i: Int , v: Int ): Unit fun setInt(i: Int , j: Int , v: Int ): Unit    setRow  fun setRow(index: Int , row: Matrix < Int >): Unit    solve  fun solve(A: Matrix < Int >, B: Matrix < Int >): Matrix < Int >    times  fun times(other: Matrix < Int >): Matrix < Int > fun times(other: Int ): Matrix < Int >    trace  fun trace(): Int    transpose  fun transpose(): Matrix < Int >    unaryMinus  fun unaryMinus(): Matrix < Int >",
            "title": "Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/index.html#inherited-functions",
            "text": "Name  Summary      asColVector  open fun asColVector(): Matrix <T> Returns the given vector as a row vector. Will call transpose() on row vectors    asRowVector  open fun asRowVector(): Matrix <T> Returns the given vector as a row vector. Will call transpose() on column vectors    cumSum  open fun cumSum(): Matrix <T> Calculates the cumulative (ongoing) sum of a matrix's elements. For example,  cumsum(mat[1,2,3])  would return  mat[1,3,6] . Assumes matrix type is convertible to double.    pow  open infix fun pow(exponent: Int ): Matrix <T>    repr  open fun repr(): String    selectCols  open fun <U : Number > selectCols(idxs: Matrix <U>): Matrix <T>``open fun selectCols(vararg idxs: Int ): Matrix <T> Select a set of cols from a matrix to form the cols of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth cols of an input matrix, you would write  input.selectCols(0,1,4) .    selectRows  open fun <U : Number > selectRows(idxs: Matrix <U>): Matrix <T>``open fun selectRows(vararg idxs: Int ): Matrix <T> Select a set of rows from a matrix to form the rows of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth rows of an input matrix, you would write  input.selectRows(0,1,4) .    to2DArray  open fun to2DArray(): Array < DoubleArray > Returns a Matrix as a double 2D array. Intended for MATLAB interop.    toIterable  open fun toIterable(): Iterable <T>    wrapRange  open fun wrapRange(range: IntRange , max: Int ): IntRange",
            "title": "Inherited Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/index.html#extension-functions",
            "text": "Name  Summary      get  operator fun <T> Matrix <T>.get(i: Int , j: Int ): T``operator fun <T> Matrix <T>.get(i: Int ): T Gets the ith element in the matrix. If 2D, selects elements in row-major order. operator fun <T> Matrix <T>.get(rows: IntRange , cols: IntRange ): Matrix <T> Allow slicing, e.g.  matrix[1..2, 3..4] . Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun <T> Matrix <T>.get(rows: IntRange , cols: Int ): Matrix <T> Allows for slicing of the rows and selection of a single column operator fun <T> Matrix <T>.get(rows: Int , cols: IntRange ): Matrix <T> Allows for slicing of the cols and selection of a single row    set  operator fun <T> Matrix <T>.set(i: Int , v: T): Unit Set the ith element in the matrix. If 2D, selects elements in row-major order. operator fun <T> Matrix <T>.set(i: Int , j: Int , v: T): Unit operator fun <T> Matrix <T>.set(rows: IntRange , cols: IntRange , value: T): Unit operator fun <T> Matrix <T>.set(rows: Int , cols: IntRange , value: T): Unit operator fun <T> Matrix <T>.set(rows: IntRange , cols: Int , value: T): Unit operator fun <T> Matrix <T>.set(rows: IntRange , cols: IntRange , value: Matrix <T>): Unit Allow assignment to a slice, e.g.  matrix[1..2, 3..4] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun <T> Matrix <T>.set(rows: Int , cols: IntRange , value: Matrix <T>): Unit Allow assignment to a slice, e.g.  matrix[2, 3..4] =something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range. operator fun <T> Matrix <T>.set(rows: IntRange , cols: Int , value: Matrix <T>): Unit Allow assignment to a slice, e.g.  matrix[1..2, 3] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.",
            "title": "Extension Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/inv/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \ninv\n\n\ninv\n\n\nfun inv():\nMatrix\n<\nInt\n>\n\n\nOverrides \nMatrix.inv",
            "title": "Inv"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/inv/index.html#inv",
            "text": "fun inv(): Matrix < Int >  Overrides  Matrix.inv",
            "title": "inv"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/max/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \nmax\n\n\nmax\n\n\nfun max():\nInt\n\n\nOverrides \nMatrix.max",
            "title": "Max"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/max/index.html#max",
            "text": "fun max(): Int  Overrides  Matrix.max",
            "title": "max"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/mean/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \nmean\n\n\nmean\n\n\nfun mean():\nInt\n\n\nOverrides \nMatrix.mean",
            "title": "Mean"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/mean/index.html#mean",
            "text": "fun mean(): Int  Overrides  Matrix.mean",
            "title": "mean"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/min/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \nmin\n\n\nmin\n\n\nfun min():\nInt\n\n\nOverrides \nMatrix.min",
            "title": "Min"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/min/index.html#min",
            "text": "fun min(): Int  Overrides  Matrix.min",
            "title": "min"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/minus/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \nminus\n\n\nminus\n\n\nfun minus(other:\nInt\n):\nMatrix\n<\nInt\n>\n\n\nfun minus(other:\nMatrix\n<\nInt\n>):\nMatrix\n<\nInt\n>",
            "title": "Minus"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/minus/index.html#minus",
            "text": "fun minus(other: Int ): Matrix < Int >  fun minus(other: Matrix < Int >): Matrix < Int >",
            "title": "minus"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/norm-f/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \nnormF\n\n\nnormF\n\n\nfun normF():\nInt\n\n\nOverrides \nMatrix.normF",
            "title": "Norm f"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/norm-f/index.html#normf",
            "text": "fun normF(): Int  Overrides  Matrix.normF",
            "title": "normF"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/norm-ind-p1/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \nnormIndP1\n\n\nnormIndP1\n\n\nfun normIndP1():\nInt\n\n\nOverrides \nMatrix.normIndP1",
            "title": "Norm ind p1"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/norm-ind-p1/index.html#normindp1",
            "text": "fun normIndP1(): Int  Overrides  Matrix.normIndP1",
            "title": "normIndP1"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/norm/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \nnorm\n\n\nnorm\n\n\nfun norm():\nInt\n\n\nOverrides \nMatrix.norm",
            "title": "Norm"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/norm/index.html#norm",
            "text": "fun norm(): Int  Overrides  Matrix.norm",
            "title": "norm"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/num-cols/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \nnumCols\n\n\nnumCols\n\n\nfun numCols():\nInt\n\n\nOverrides \nMatrix.numCols",
            "title": "Num cols"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/num-cols/index.html#numcols",
            "text": "fun numCols(): Int  Overrides  Matrix.numCols",
            "title": "numCols"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/num-rows/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \nnumRows\n\n\nnumRows\n\n\nfun numRows():\nInt\n\n\nOverrides \nMatrix.numRows",
            "title": "Num rows"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/num-rows/index.html#numrows",
            "text": "fun numRows(): Int  Overrides  Matrix.numRows",
            "title": "numRows"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/pinv/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \npinv\n\n\npinv\n\n\nfun pinv():\nMatrix\n<\nInt\n>\n\n\nOverrides \nMatrix.pinv",
            "title": "Pinv"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/pinv/index.html#pinv",
            "text": "fun pinv(): Matrix < Int >  Overrides  Matrix.pinv",
            "title": "pinv"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/plus/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \nplus\n\n\nplus\n\n\nfun plus(other:\nInt\n):\nMatrix\n<\nInt\n>\n\n\nfun plus(other:\nMatrix\n<\nInt\n>):\nMatrix\n<\nInt\n>",
            "title": "Plus"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/plus/index.html#plus",
            "text": "fun plus(other: Int ): Matrix < Int >  fun plus(other: Matrix < Int >): Matrix < Int >",
            "title": "plus"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/rem/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \nrem\n\n\nrem\n\n\nfun rem(other:\nMatrix\n<\nInt\n>):\nMatrix\n<\nInt\n>",
            "title": "Rem"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/rem/index.html#rem",
            "text": "fun rem(other: Matrix < Int >): Matrix < Int >",
            "title": "rem"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/rows/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \nrows\n\n\nrows\n\n\nval rows:\nInt",
            "title": "Rows"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/rows/index.html#rows",
            "text": "val rows: Int",
            "title": "rows"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/set-col/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \nsetCol\n\n\nsetCol\n\n\nfun setCol(index:\nInt\n, col:\nMatrix\n<\nInt\n>):\nUnit",
            "title": "Set col"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/set-col/index.html#setcol",
            "text": "fun setCol(index: Int , col: Matrix < Int >): Unit",
            "title": "setCol"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/set-double/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \nsetDouble\n\n\nsetDouble\n\n\nfun setDouble(i:\nInt\n, v:\nDouble\n):\nUnit\n\n\nOverrides \nMatrix.setDouble\n\n\nfun setDouble(i:\nInt\n, j:\nInt\n, v:\nDouble\n):\nUnit\n\n\nOverrides \nMatrix.setDouble",
            "title": "Set double"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/set-double/index.html#setdouble",
            "text": "fun setDouble(i: Int , v: Double ): Unit  Overrides  Matrix.setDouble  fun setDouble(i: Int , j: Int , v: Double ): Unit  Overrides  Matrix.setDouble",
            "title": "setDouble"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/set-float/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \nsetFloat\n\n\nsetFloat\n\n\nfun setFloat(i:\nInt\n, v:\nFloat\n):\nUnit\n\n\nOverrides \nMatrix.setFloat\n\n\nfun setFloat(i:\nInt\n, j:\nInt\n, v:\nFloat\n):\nUnit\n\n\nOverrides \nMatrix.setFloat",
            "title": "Set float"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/set-float/index.html#setfloat",
            "text": "fun setFloat(i: Int , v: Float ): Unit  Overrides  Matrix.setFloat  fun setFloat(i: Int , j: Int , v: Float ): Unit  Overrides  Matrix.setFloat",
            "title": "setFloat"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/set-generic/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \nsetGeneric\n\n\nsetGeneric\n\n\nfun setGeneric(i:\nInt\n, v:\nInt\n):\nUnit\n\n\nfun setGeneric(i:\nInt\n, j:\nInt\n, v:\nInt\n):\nUnit",
            "title": "Set generic"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/set-generic/index.html#setgeneric",
            "text": "fun setGeneric(i: Int , v: Int ): Unit  fun setGeneric(i: Int , j: Int , v: Int ): Unit",
            "title": "setGeneric"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/set-int/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \nsetInt\n\n\nsetInt\n\n\nfun setInt(i:\nInt\n, v:\nInt\n):\nUnit\n\n\nOverrides \nMatrix.setInt\n\n\nfun setInt(i:\nInt\n, j:\nInt\n, v:\nInt\n):\nUnit\n\n\nOverrides \nMatrix.setInt",
            "title": "Set int"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/set-int/index.html#setint",
            "text": "fun setInt(i: Int , v: Int ): Unit  Overrides  Matrix.setInt  fun setInt(i: Int , j: Int , v: Int ): Unit  Overrides  Matrix.setInt",
            "title": "setInt"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/set-row/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \nsetRow\n\n\nsetRow\n\n\nfun setRow(index:\nInt\n, row:\nMatrix\n<\nInt\n>):\nUnit",
            "title": "Set row"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/set-row/index.html#setrow",
            "text": "fun setRow(index: Int , row: Matrix < Int >): Unit",
            "title": "setRow"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/solve/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \nsolve\n\n\nsolve\n\n\nfun solve(A:\nMatrix\n<\nInt\n>, B:\nMatrix\n<\nInt\n>):\nMatrix\n<\nInt\n>",
            "title": "Solve"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/solve/index.html#solve",
            "text": "fun solve(A: Matrix < Int >, B: Matrix < Int >): Matrix < Int >",
            "title": "solve"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/storage/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \nstorage\n\n\nstorage\n\n\nval storage:\nIntArray",
            "title": "Storage"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/storage/index.html#storage",
            "text": "val storage: IntArray",
            "title": "storage"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/times/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \ntimes\n\n\ntimes\n\n\nfun times(other:\nMatrix\n<\nInt\n>):\nMatrix\n<\nInt\n>\n\n\nfun times(other:\nInt\n):\nMatrix\n<\nInt\n>",
            "title": "Times"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/times/index.html#times",
            "text": "fun times(other: Matrix < Int >): Matrix < Int >  fun times(other: Int ): Matrix < Int >",
            "title": "times"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/trace/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \ntrace\n\n\ntrace\n\n\nfun trace():\nInt\n\n\nOverrides \nMatrix.trace",
            "title": "Trace"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/trace/index.html#trace",
            "text": "fun trace(): Int  Overrides  Matrix.trace",
            "title": "trace"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/transpose/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \ntranspose\n\n\ntranspose\n\n\nfun transpose():\nMatrix\n<\nInt\n>\n\n\nOverrides \nMatrix.transpose",
            "title": "Transpose"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/transpose/index.html#transpose",
            "text": "fun transpose(): Matrix < Int >  Overrides  Matrix.transpose",
            "title": "transpose"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/unary-minus/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrix\n / \nunaryMinus\n\n\nunaryMinus\n\n\nfun unaryMinus():\nMatrix\n<\nInt\n>\n\n\nOverrides \nMatrix.unaryMinus",
            "title": "Unary minus"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix/unary-minus/index.html#unaryminus",
            "text": "fun unaryMinus(): Matrix < Int >  Overrides  Matrix.unaryMinus",
            "title": "unaryMinus"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix-factory/-init-/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrixFactory\n / \n<init>\n\n\n<init>\n\n\nDefaultIntMatrixFactory()",
            "title": " init "
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix-factory/-init-/index.html#init",
            "text": "DefaultIntMatrixFactory()",
            "title": "&lt;init&gt;"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix-factory/arange/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrixFactory\n / \narange\n\n\narange\n\n\nfun arange(start:\nDouble\n, stop:\nDouble\n, increment:\nDouble\n):\nMatrix\n<\nInt\n>\n\n\nOverrides \nMatrixFactory.arange\n\n\nfun arange(start:\nInt\n, stop:\nInt\n, increment:\nInt\n):\nMatrix\n<\nInt\n>\n\n\nOverrides \nMatrixFactory.arange\n\n\nCreates a row-vector with the first value of \nstart\n and the last value of \nstop\n, with \nincrement\n steps\nbetween each value.\n\n\nfun arange(start:\nDouble\n, stop:\nDouble\n):\nMatrix\n<\nInt\n>\n\n\nOverrides \nMatrixFactory.arange\n\n\nfun arange(start:\nInt\n, stop:\nInt\n):\nMatrix\n<\nInt\n>\n\n\nOverrides \nMatrixFactory.arange\n\n\nCreates a row-vector with the first value of \nstart\n and the last value of \nstop\n, with unit steps\nbetween each value.",
            "title": "Arange"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix-factory/arange/index.html#arange",
            "text": "fun arange(start: Double , stop: Double , increment: Double ): Matrix < Int >  Overrides  MatrixFactory.arange  fun arange(start: Int , stop: Int , increment: Int ): Matrix < Int >  Overrides  MatrixFactory.arange  Creates a row-vector with the first value of  start  and the last value of  stop , with  increment  steps\nbetween each value.  fun arange(start: Double , stop: Double ): Matrix < Int >  Overrides  MatrixFactory.arange  fun arange(start: Int , stop: Int ): Matrix < Int >  Overrides  MatrixFactory.arange  Creates a row-vector with the first value of  start  and the last value of  stop , with unit steps\nbetween each value.",
            "title": "arange"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix-factory/create/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrixFactory\n / \ncreate\n\n\ncreate\n\n\nfun create(data:\nIntRange\n):\nMatrix\n<\nInt\n>\n\n\nOverrides \nMatrixFactory.create\n\n\nCreates a row-vector with initial values pulled from an int range, e.g. 1..45\n\n\nfun create(data:\nDoubleArray\n):\nMatrix\n<\nInt\n>\n\n\nOverrides \nMatrixFactory.create\n\n\nCreates a row-vector with initial values pulled from a double array\n\n\nfun create(data:\nArray\n<\nDoubleArray\n>):\nMatrix\n<\nInt\n>\n\n\nOverrides \nMatrixFactory.create\n\n\nCreates a matrix from an array of arrays (row-major)",
            "title": "Create"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix-factory/create/index.html#create",
            "text": "fun create(data: IntRange ): Matrix < Int >  Overrides  MatrixFactory.create  Creates a row-vector with initial values pulled from an int range, e.g. 1..45  fun create(data: DoubleArray ): Matrix < Int >  Overrides  MatrixFactory.create  Creates a row-vector with initial values pulled from a double array  fun create(data: Array < DoubleArray >): Matrix < Int >  Overrides  MatrixFactory.create  Creates a matrix from an array of arrays (row-major)",
            "title": "create"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix-factory/eye/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrixFactory\n / \neye\n\n\neye\n\n\nfun eye(size:\nInt\n):\nMatrix\n<\nInt\n>\n\n\nOverrides \nMatrixFactory.eye\n\n\nCreates an identity matrix of the requested shape\n\n\nfun eye(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nInt\n>\n\n\nOverrides \nMatrixFactory.eye\n\n\nCreates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.",
            "title": "Eye"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix-factory/eye/index.html#eye",
            "text": "fun eye(size: Int ): Matrix < Int >  Overrides  MatrixFactory.eye  Creates an identity matrix of the requested shape  fun eye(rows: Int , cols: Int ): Matrix < Int >  Overrides  MatrixFactory.eye  Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.",
            "title": "eye"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix-factory/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrixFactory\n\n\nDefaultIntMatrixFactory\n\n\nclass DefaultIntMatrixFactory :\nMatrixFactory\n<\nMatrix\n<\nInt\n>>\n\n\nConstructors\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\n<init>\n\n\nDefaultIntMatrixFactory()\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\narange\n\n\nfun arange(start:\nDouble\n, stop:\nDouble\n, increment:\nDouble\n):\nMatrix\n<\nInt\n>\nfun arange(start:\nInt\n, stop:\nInt\n, increment:\nInt\n):\nMatrix\n<\nInt\n>\nCreates a row-vector with the first value of \nstart\n and the last value of \nstop\n, with \nincrement\n steps between each value.\nfun arange(start:\nDouble\n, stop:\nDouble\n):\nMatrix\n<\nInt\n>\nfun arange(start:\nInt\n, stop:\nInt\n):\nMatrix\n<\nInt\n>\nCreates a row-vector with the first value of \nstart\n and the last value of \nstop\n, with unit steps between each value.\n\n\n\n\n\n\ncreate\n\n\nfun create(data:\nIntRange\n):\nMatrix\n<\nInt\n>\nCreates a row-vector with initial values pulled from an int range, e.g. 1..45\nfun create(data:\nDoubleArray\n):\nMatrix\n<\nInt\n>\nCreates a row-vector with initial values pulled from a double array\nfun create(data:\nArray\n<\nDoubleArray\n>):\nMatrix\n<\nInt\n>\nCreates a matrix from an array of arrays (row-major)\n\n\n\n\n\n\neye\n\n\nfun eye(size:\nInt\n):\nMatrix\n<\nInt\n>\nCreates an identity matrix of the requested shape\nfun eye(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nInt\n>\nCreates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.\n\n\n\n\n\n\nones\n\n\nfun ~~ones~~(size:\nInt\n):\nMatrix\n<\nInt\n>\nCreates a one initialized square matrix of the requested shape\nfun ones(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nInt\n>\nCreates a one initialized matrix of the requested shape\n\n\n\n\n\n\nrand\n\n\nfun ~~rand~~(size:\nInt\n):\nMatrix\n<\nInt\n>\nCreates a vector of \nsize\n many uniform 0-1 random samples\nfun rand(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nInt\n>\nCreates a matrix of uniform 0-1 random samples\nfun rand(rows:\nInt\n, cols:\nInt\n, seed:\nLong\n):\nMatrix\n<\nInt\n>\nCreates a matrix of rows x cols uniform 0-1 samples using the given seed. Two calls with the same seed will produce identical matrices\n\n\n\n\n\n\nrandn\n\n\nfun ~~randn~~(size:\nInt\n):\nMatrix\n<\nInt\n>\nCreates a vector of \nsize\n many unit-normal random samples\nfun randn(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nInt\n>\nCreates a matrix of unit-normal random samples\nfun randn(rows:\nInt\n, cols:\nInt\n, seed:\nLong\n):\nMatrix\n<\nInt\n>\nCreates a matrix of rows x cols random samples using the given seed. Two calls with the same seed will produce identical matrices\n\n\n\n\n\n\nzeros\n\n\nfun zeros(rows:\nInt\n, cols:\nInt\n):\nDefaultIntMatrix\nGenerate a zero initialized matrix of the requested shape.\nfun ~~zeros~~(size:\nInt\n):\nMatrix\n<\nInt\n>\nGenerate a zero initialized square matrix of the requested shape.",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix-factory/index.html#defaultintmatrixfactory",
            "text": "class DefaultIntMatrixFactory : MatrixFactory < Matrix < Int >>",
            "title": "DefaultIntMatrixFactory"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix-factory/index.html#constructors",
            "text": "Name  Summary      <init>  DefaultIntMatrixFactory()",
            "title": "Constructors"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix-factory/index.html#functions",
            "text": "Name  Summary      arange  fun arange(start: Double , stop: Double , increment: Double ): Matrix < Int > fun arange(start: Int , stop: Int , increment: Int ): Matrix < Int > Creates a row-vector with the first value of  start  and the last value of  stop , with  increment  steps between each value. fun arange(start: Double , stop: Double ): Matrix < Int > fun arange(start: Int , stop: Int ): Matrix < Int > Creates a row-vector with the first value of  start  and the last value of  stop , with unit steps between each value.    create  fun create(data: IntRange ): Matrix < Int > Creates a row-vector with initial values pulled from an int range, e.g. 1..45 fun create(data: DoubleArray ): Matrix < Int > Creates a row-vector with initial values pulled from a double array fun create(data: Array < DoubleArray >): Matrix < Int > Creates a matrix from an array of arrays (row-major)    eye  fun eye(size: Int ): Matrix < Int > Creates an identity matrix of the requested shape fun eye(rows: Int , cols: Int ): Matrix < Int > Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.    ones  fun ~~ones~~(size: Int ): Matrix < Int > Creates a one initialized square matrix of the requested shape fun ones(rows: Int , cols: Int ): Matrix < Int > Creates a one initialized matrix of the requested shape    rand  fun ~~rand~~(size: Int ): Matrix < Int > Creates a vector of  size  many uniform 0-1 random samples fun rand(rows: Int , cols: Int ): Matrix < Int > Creates a matrix of uniform 0-1 random samples fun rand(rows: Int , cols: Int , seed: Long ): Matrix < Int > Creates a matrix of rows x cols uniform 0-1 samples using the given seed. Two calls with the same seed will produce identical matrices    randn  fun ~~randn~~(size: Int ): Matrix < Int > Creates a vector of  size  many unit-normal random samples fun randn(rows: Int , cols: Int ): Matrix < Int > Creates a matrix of unit-normal random samples fun randn(rows: Int , cols: Int , seed: Long ): Matrix < Int > Creates a matrix of rows x cols random samples using the given seed. Two calls with the same seed will produce identical matrices    zeros  fun zeros(rows: Int , cols: Int ): DefaultIntMatrix Generate a zero initialized matrix of the requested shape. fun ~~zeros~~(size: Int ): Matrix < Int > Generate a zero initialized square matrix of the requested shape.",
            "title": "Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix-factory/ones/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrixFactory\n / \nones\n\n\nones\n\n\nfun ~~ones~~(size:\nInt\n):\nMatrix\n<\nInt\n>\n\n\nOverrides \nMatrixFactory.ones\n\n\nDeprecated:\n Use rows,col overload instead. This method will be removed in a future update.\n\n\nCreates a one initialized square matrix of the requested shape\n\n\nfun ones(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nInt\n>\n\n\nOverrides \nMatrixFactory.ones\n\n\nCreates a one initialized matrix of the requested shape",
            "title": "Ones"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix-factory/ones/index.html#ones",
            "text": "fun ~~ones~~(size: Int ): Matrix < Int >  Overrides  MatrixFactory.ones  Deprecated:  Use rows,col overload instead. This method will be removed in a future update.  Creates a one initialized square matrix of the requested shape  fun ones(rows: Int , cols: Int ): Matrix < Int >  Overrides  MatrixFactory.ones  Creates a one initialized matrix of the requested shape",
            "title": "ones"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix-factory/rand/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrixFactory\n / \nrand\n\n\nrand\n\n\nfun ~~rand~~(size:\nInt\n):\nMatrix\n<\nInt\n>\n\n\nOverrides \nMatrixFactory.rand\n\n\nDeprecated:\n Use rows,col overload instead. This method will be removed in a future update.\n\n\nCreates a vector of \nsize\n many uniform 0-1 random samples\n\n\nfun rand(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nInt\n>\n\n\nOverrides \nMatrixFactory.rand\n\n\nCreates a matrix of uniform 0-1 random samples\n\n\nfun rand(rows:\nInt\n, cols:\nInt\n, seed:\nLong\n):\nMatrix\n<\nInt\n>\n\n\nOverrides \nMatrixFactory.rand\n\n\nCreates a matrix of rows x cols uniform 0-1 samples using the given seed. Two calls with the same seed\nwill produce identical matrices",
            "title": "Rand"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix-factory/rand/index.html#rand",
            "text": "fun ~~rand~~(size: Int ): Matrix < Int >  Overrides  MatrixFactory.rand  Deprecated:  Use rows,col overload instead. This method will be removed in a future update.  Creates a vector of  size  many uniform 0-1 random samples  fun rand(rows: Int , cols: Int ): Matrix < Int >  Overrides  MatrixFactory.rand  Creates a matrix of uniform 0-1 random samples  fun rand(rows: Int , cols: Int , seed: Long ): Matrix < Int >  Overrides  MatrixFactory.rand  Creates a matrix of rows x cols uniform 0-1 samples using the given seed. Two calls with the same seed\nwill produce identical matrices",
            "title": "rand"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix-factory/randn/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrixFactory\n / \nrandn\n\n\nrandn\n\n\nfun ~~randn~~(size:\nInt\n):\nMatrix\n<\nInt\n>\n\n\nOverrides \nMatrixFactory.randn\n\n\nDeprecated:\n Use rows,col overload instead. This method will be removed in a future update.\n\n\nCreates a vector of \nsize\n many unit-normal random samples\n\n\nfun randn(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nInt\n>\n\n\nOverrides \nMatrixFactory.randn\n\n\nCreates a matrix of unit-normal random samples\n\n\nfun randn(rows:\nInt\n, cols:\nInt\n, seed:\nLong\n):\nMatrix\n<\nInt\n>\n\n\nOverrides \nMatrixFactory.randn\n\n\nCreates a matrix of rows x cols random samples using the given seed. Two calls with the same seed\nwill produce identical matrices",
            "title": "Randn"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix-factory/randn/index.html#randn",
            "text": "fun ~~randn~~(size: Int ): Matrix < Int >  Overrides  MatrixFactory.randn  Deprecated:  Use rows,col overload instead. This method will be removed in a future update.  Creates a vector of  size  many unit-normal random samples  fun randn(rows: Int , cols: Int ): Matrix < Int >  Overrides  MatrixFactory.randn  Creates a matrix of unit-normal random samples  fun randn(rows: Int , cols: Int , seed: Long ): Matrix < Int >  Overrides  MatrixFactory.randn  Creates a matrix of rows x cols random samples using the given seed. Two calls with the same seed\nwill produce identical matrices",
            "title": "randn"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix-factory/zeros/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultIntMatrixFactory\n / \nzeros\n\n\nzeros\n\n\nfun zeros(rows:\nInt\n, cols:\nInt\n):\nDefaultIntMatrix\n\n\nOverrides \nMatrixFactory.zeros\n\n\nGenerate a zero initialized matrix of the requested shape.\n\n\nfun ~~zeros~~(size:\nInt\n):\nMatrix\n<\nInt\n>\n\n\nOverrides \nMatrixFactory.zeros\n\n\nDeprecated:\n Use rows,col overload instead. This method will be removed in a future update.\n\n\nGenerate a zero initialized square matrix of the requested shape.",
            "title": "Zeros"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-int-matrix-factory/zeros/index.html#zeros",
            "text": "fun zeros(rows: Int , cols: Int ): DefaultIntMatrix  Overrides  MatrixFactory.zeros  Generate a zero initialized matrix of the requested shape.  fun ~~zeros~~(size: Int ): Matrix < Int >  Overrides  MatrixFactory.zeros  Deprecated:  Use rows,col overload instead. This method will be removed in a future update.  Generate a zero initialized square matrix of the requested shape.",
            "title": "zeros"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/-init-/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \n<init>\n\n\n<init>\n\n\nDefaultLongMatrix(rows:\nInt\n, cols:\nInt\n)",
            "title": " init "
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/-init-/index.html#init",
            "text": "DefaultLongMatrix(rows: Int , cols: Int )",
            "title": "&lt;init&gt;"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/-l-u/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \nLU\n\n\nLU\n\n\nfun LU(): <ERROR CLASS><\nMatrix\n<\nLong\n>,\nMatrix\n<\nLong\n>,\nMatrix\n<\nLong\n>>\n\n\nOverrides \nMatrix.LU",
            "title": " l u"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/-l-u/index.html#lu",
            "text": "fun LU(): <ERROR CLASS>< Matrix < Long >, Matrix < Long >, Matrix < Long >>  Overrides  Matrix.LU",
            "title": "LU"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/-q-r/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \nQR\n\n\nQR\n\n\nfun QR(): <ERROR CLASS><\nMatrix\n<\nLong\n>,\nMatrix\n<\nLong\n>>\n\n\nOverrides \nMatrix.QR",
            "title": " q r"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/-q-r/index.html#qr",
            "text": "fun QR(): <ERROR CLASS>< Matrix < Long >, Matrix < Long >>  Overrides  Matrix.QR",
            "title": "QR"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/-t/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \nT\n\n\nT\n\n\nfun T():\nMatrix\n<\nLong\n>\n\n\nOverrides \nMatrix.T\n\n\nTranspose operator.",
            "title": " t"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/-t/index.html#t",
            "text": "fun T(): Matrix < Long >  Overrides  Matrix.T  Transpose operator.",
            "title": "T"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/arg-max/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \nargMax\n\n\nargMax\n\n\nfun argMax():\nInt\n\n\nOverrides \nMatrix.argMax\n\n\nRow major 1D index.",
            "title": "Arg max"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/arg-max/index.html#argmax",
            "text": "fun argMax(): Int  Overrides  Matrix.argMax  Row major 1D index.",
            "title": "argMax"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/arg-min/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \nargMin\n\n\nargMin\n\n\nfun argMin():\nInt\n\n\nOverrides \nMatrix.argMin\n\n\nRow major 1D index.",
            "title": "Arg min"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/arg-min/index.html#argmin",
            "text": "fun argMin(): Int  Overrides  Matrix.argMin  Row major 1D index.",
            "title": "argMin"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/chol/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \nchol\n\n\nchol\n\n\nfun chol():\nMatrix\n<\nLong\n>\n\n\nOverrides \nMatrix.chol",
            "title": "Chol"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/chol/index.html#chol",
            "text": "fun chol(): Matrix < Long >  Overrides  Matrix.chol",
            "title": "chol"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/cols/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \ncols\n\n\ncols\n\n\nval cols:\nInt",
            "title": "Cols"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/cols/index.html#cols",
            "text": "val cols: Int",
            "title": "cols"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/copy/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \ncopy\n\n\ncopy\n\n\nfun copy():\nMatrix\n<\nLong\n>\n\n\nOverrides \nMatrix.copy",
            "title": "Copy"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/copy/index.html#copy",
            "text": "fun copy(): Matrix < Long >  Overrides  Matrix.copy",
            "title": "copy"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/det/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \ndet\n\n\ndet\n\n\nfun det():\nLong\n\n\nOverrides \nMatrix.det",
            "title": "Det"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/det/index.html#det",
            "text": "fun det(): Long  Overrides  Matrix.det",
            "title": "det"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/diag/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \ndiag\n\n\ndiag\n\n\nfun diag():\nMatrix\n<\nLong\n>\n\n\nOverrides \nMatrix.diag",
            "title": "Diag"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/diag/index.html#diag",
            "text": "fun diag(): Matrix < Long >  Overrides  Matrix.diag",
            "title": "diag"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/div/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \ndiv\n\n\ndiv\n\n\nfun div(other:\nLong\n):\nMatrix\n<\nLong\n>\n\n\nfun div(other:\nInt\n):\nMatrix\n<\nLong\n>\n\n\nOverrides \nMatrix.div",
            "title": "Div"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/div/index.html#div",
            "text": "fun div(other: Long ): Matrix < Long >  fun div(other: Int ): Matrix < Long >  Overrides  Matrix.div",
            "title": "div"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/element-sum/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \nelementSum\n\n\nelementSum\n\n\nfun elementSum():\nLong\n\n\nOverrides \nMatrix.elementSum",
            "title": "Element sum"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/element-sum/index.html#elementsum",
            "text": "fun elementSum(): Long  Overrides  Matrix.elementSum",
            "title": "elementSum"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/element-times/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \nelementTimes\n\n\nelementTimes\n\n\nfun elementTimes(other:\nMatrix\n<\nLong\n>):\nMatrix\n<\nLong\n>",
            "title": "Element times"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/element-times/index.html#elementtimes",
            "text": "fun elementTimes(other: Matrix < Long >): Matrix < Long >",
            "title": "elementTimes"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/epow/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \nepow\n\n\nepow\n\n\nfun epow(other:\nLong\n):\nMatrix\n<\nLong\n>\n\n\nfun epow(other:\nInt\n):\nMatrix\n<\nLong\n>\n\n\nOverrides \nMatrix.epow",
            "title": "Epow"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/epow/index.html#epow",
            "text": "fun epow(other: Long ): Matrix < Long >  fun epow(other: Int ): Matrix < Long >  Overrides  Matrix.epow",
            "title": "epow"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/expm/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \nexpm\n\n\nexpm\n\n\nfun expm():\nMatrix\n<\nLong\n>\n\n\nOverrides \nMatrix.expm",
            "title": "Expm"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/expm/index.html#expm",
            "text": "fun expm(): Matrix < Long >  Overrides  Matrix.expm",
            "title": "expm"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/get-base-matrix/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \ngetBaseMatrix\n\n\ngetBaseMatrix\n\n\nfun getBaseMatrix():\nAny\n\n\nOverrides \nMatrix.getBaseMatrix\n\n\nReturns the underlying matrix object from the back-end this Matrix is wrapping. This should be used\nsparingly (as it breaks encapsulation), but it can increase performance by using computation specifically\ndesigned for a particular back-end. Code using this method should not rely on a particular back-end, and\nshould always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use \nget\n and \nset\n)\nto access the elements generically).",
            "title": "Get base matrix"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/get-base-matrix/index.html#getbasematrix",
            "text": "fun getBaseMatrix(): Any  Overrides  Matrix.getBaseMatrix  Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used\nsparingly (as it breaks encapsulation), but it can increase performance by using computation specifically\ndesigned for a particular back-end. Code using this method should not rely on a particular back-end, and\nshould always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use  get  and  set )\nto access the elements generically).",
            "title": "getBaseMatrix"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/get-col/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \ngetCol\n\n\ngetCol\n\n\nfun getCol(col:\nInt\n):\nMatrix\n<\nLong\n>\n\n\nOverrides \nMatrix.getCol",
            "title": "Get col"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/get-col/index.html#getcol",
            "text": "fun getCol(col: Int ): Matrix < Long >  Overrides  Matrix.getCol",
            "title": "getCol"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/get-double-data/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \ngetDoubleData\n\n\ngetDoubleData\n\n\nfun getDoubleData():\nDoubleArray\n\n\nOverrides \nMatrix.getDoubleData\n\n\nRetrieves the data formatted as doubles in row-major order\nThis method is only for performance over potentially boxing get(Double)\nmethods. This method may or may not return a copy, and thus should be\ntreated as read-only unless backend behavior is known.",
            "title": "Get double data"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/get-double-data/index.html#getdoubledata",
            "text": "fun getDoubleData(): DoubleArray  Overrides  Matrix.getDoubleData  Retrieves the data formatted as doubles in row-major order\nThis method is only for performance over potentially boxing get(Double)\nmethods. This method may or may not return a copy, and thus should be\ntreated as read-only unless backend behavior is known.",
            "title": "getDoubleData"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/get-double/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \ngetDouble\n\n\ngetDouble\n\n\nfun getDouble(i:\nInt\n, j:\nInt\n):\nDouble\n\n\nOverrides \nMatrix.getDouble\n\n\nfun getDouble(i:\nInt\n):\nDouble\n\n\nOverrides \nMatrix.getDouble",
            "title": "Get double"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/get-double/index.html#getdouble",
            "text": "fun getDouble(i: Int , j: Int ): Double  Overrides  Matrix.getDouble  fun getDouble(i: Int ): Double  Overrides  Matrix.getDouble",
            "title": "getDouble"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/get-factory/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \ngetFactory\n\n\ngetFactory\n\n\nfun getFactory():\nMatrixFactory\n<\nMatrix\n<\nLong\n>>\n\n\nOverrides \nMatrix.getFactory\n\n\nBecause sometimes all you have is a Matrix, but you really want a MatrixFactory.",
            "title": "Get factory"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/get-factory/index.html#getfactory",
            "text": "fun getFactory(): MatrixFactory < Matrix < Long >>  Overrides  Matrix.getFactory  Because sometimes all you have is a Matrix, but you really want a MatrixFactory.",
            "title": "getFactory"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/get-float/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \ngetFloat\n\n\ngetFloat\n\n\nfun getFloat(i:\nInt\n, j:\nInt\n):\nFloat\n\n\nOverrides \nMatrix.getFloat\n\n\nfun getFloat(i:\nInt\n):\nFloat\n\n\nOverrides \nMatrix.getFloat",
            "title": "Get float"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/get-float/index.html#getfloat",
            "text": "fun getFloat(i: Int , j: Int ): Float  Overrides  Matrix.getFloat  fun getFloat(i: Int ): Float  Overrides  Matrix.getFloat",
            "title": "getFloat"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/get-generic/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \ngetGeneric\n\n\ngetGeneric\n\n\nfun getGeneric(i:\nInt\n, j:\nInt\n):\nLong\n\n\nOverrides \nMatrix.getGeneric\n\n\nfun getGeneric(i:\nInt\n):\nLong\n\n\nOverrides \nMatrix.getGeneric",
            "title": "Get generic"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/get-generic/index.html#getgeneric",
            "text": "fun getGeneric(i: Int , j: Int ): Long  Overrides  Matrix.getGeneric  fun getGeneric(i: Int ): Long  Overrides  Matrix.getGeneric",
            "title": "getGeneric"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/get-int/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \ngetInt\n\n\ngetInt\n\n\nfun getInt(i:\nInt\n, j:\nInt\n):\nInt\n\n\nOverrides \nMatrix.getInt\n\n\nfun getInt(i:\nInt\n):\nInt\n\n\nOverrides \nMatrix.getInt",
            "title": "Get int"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/get-int/index.html#getint",
            "text": "fun getInt(i: Int , j: Int ): Int  Overrides  Matrix.getInt  fun getInt(i: Int ): Int  Overrides  Matrix.getInt",
            "title": "getInt"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/get-row/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \ngetRow\n\n\ngetRow\n\n\nfun getRow(row:\nInt\n):\nMatrix\n<\nLong\n>\n\n\nOverrides \nMatrix.getRow",
            "title": "Get row"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/get-row/index.html#getrow",
            "text": "fun getRow(row: Int ): Matrix < Long >  Overrides  Matrix.getRow",
            "title": "getRow"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n\n\nDefaultLongMatrix\n\n\nclass DefaultLongMatrix :\nMatrix\n<\nLong\n>\n\n\nConstructors\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\n<init>\n\n\nDefaultLongMatrix(rows:\nInt\n, cols:\nInt\n)\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\ncols\n\n\nval cols:\nInt\n\n\n\n\n\n\nrows\n\n\nval rows:\nInt\n\n\n\n\n\n\nstorage\n\n\nval storage:\nLongArray\n\n\n\n\n\n\n\n\nInherited Properties\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nT\n\n\nopen val T:\nMatrix\n<T>\nTranspose operator.\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nLU\n\n\nfun LU(): <ERROR CLASS><\nMatrix\n<\nLong\n>,\nMatrix\n<\nLong\n>,\nMatrix\n<\nLong\n>>\n\n\n\n\n\n\nQR\n\n\nfun QR(): <ERROR CLASS><\nMatrix\n<\nLong\n>,\nMatrix\n<\nLong\n>>\n\n\n\n\n\n\nT\n\n\nfun T():\nMatrix\n<\nLong\n>\nTranspose operator.\n\n\n\n\n\n\nargMax\n\n\nfun argMax():\nInt\nRow major 1D index.\n\n\n\n\n\n\nargMin\n\n\nfun argMin():\nInt\nRow major 1D index.\n\n\n\n\n\n\nchol\n\n\nfun chol():\nMatrix\n<\nLong\n>\n\n\n\n\n\n\ncopy\n\n\nfun copy():\nMatrix\n<\nLong\n>\n\n\n\n\n\n\ndet\n\n\nfun det():\nLong\n\n\n\n\n\n\ndiag\n\n\nfun diag():\nMatrix\n<\nLong\n>\n\n\n\n\n\n\ndiv\n\n\nfun div(other:\nLong\n):\nMatrix\n<\nLong\n>\nfun div(other:\nInt\n):\nMatrix\n<\nLong\n>\n\n\n\n\n\n\nelementSum\n\n\nfun elementSum():\nLong\n\n\n\n\n\n\nelementTimes\n\n\nfun elementTimes(other:\nMatrix\n<\nLong\n>):\nMatrix\n<\nLong\n>\n\n\n\n\n\n\nepow\n\n\nfun epow(other:\nLong\n):\nMatrix\n<\nLong\n>\nfun epow(other:\nInt\n):\nMatrix\n<\nLong\n>\n\n\n\n\n\n\nexpm\n\n\nfun expm():\nMatrix\n<\nLong\n>\n\n\n\n\n\n\ngetBaseMatrix\n\n\nfun getBaseMatrix():\nAny\nReturns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use \nget\n and \nset\n) to access the elements generically).\n\n\n\n\n\n\ngetCol\n\n\nfun getCol(col:\nInt\n):\nMatrix\n<\nLong\n>\n\n\n\n\n\n\ngetDouble\n\n\nfun getDouble(i:\nInt\n, j:\nInt\n):\nDouble\nfun getDouble(i:\nInt\n):\nDouble\n\n\n\n\n\n\ngetDoubleData\n\n\nfun getDoubleData():\nDoubleArray\nRetrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known.\n\n\n\n\n\n\ngetFactory\n\n\nfun getFactory():\nMatrixFactory\n<\nMatrix\n<\nLong\n>>\nBecause sometimes all you have is a Matrix, but you really want a MatrixFactory.\n\n\n\n\n\n\ngetFloat\n\n\nfun getFloat(i:\nInt\n, j:\nInt\n):\nFloat\nfun getFloat(i:\nInt\n):\nFloat\n\n\n\n\n\n\ngetGeneric\n\n\nfun getGeneric(i:\nInt\n, j:\nInt\n):\nLong\nfun getGeneric(i:\nInt\n):\nLong\n\n\n\n\n\n\ngetInt\n\n\nfun getInt(i:\nInt\n, j:\nInt\n):\nInt\nfun getInt(i:\nInt\n):\nInt\n\n\n\n\n\n\ngetRow\n\n\nfun getRow(row:\nInt\n):\nMatrix\n<\nLong\n>\n\n\n\n\n\n\ninv\n\n\nfun inv():\nMatrix\n<\nLong\n>\n\n\n\n\n\n\nmax\n\n\nfun max():\nLong\n\n\n\n\n\n\nmean\n\n\nfun mean():\nLong\n\n\n\n\n\n\nmin\n\n\nfun min():\nLong\n\n\n\n\n\n\nminus\n\n\nfun minus(other:\nLong\n):\nMatrix\n<\nLong\n>\nfun minus(other:\nMatrix\n<\nLong\n>):\nMatrix\n<\nLong\n>\n\n\n\n\n\n\nnorm\n\n\nfun norm():\nLong\n\n\n\n\n\n\nnormF\n\n\nfun normF():\nLong\n\n\n\n\n\n\nnormIndP1\n\n\nfun normIndP1():\nLong\n\n\n\n\n\n\nnumCols\n\n\nfun numCols():\nInt\n\n\n\n\n\n\nnumRows\n\n\nfun numRows():\nInt\n\n\n\n\n\n\npinv\n\n\nfun pinv():\nMatrix\n<\nLong\n>\n\n\n\n\n\n\nplus\n\n\nfun plus(other:\nLong\n):\nMatrix\n<\nLong\n>\nfun plus(other:\nMatrix\n<\nLong\n>):\nMatrix\n<\nLong\n>\n\n\n\n\n\n\nrem\n\n\nfun rem(other:\nMatrix\n<\nLong\n>):\nMatrix\n<\nLong\n>\n\n\n\n\n\n\nsetCol\n\n\nfun setCol(index:\nInt\n, col:\nMatrix\n<\nLong\n>):\nUnit\n\n\n\n\n\n\nsetDouble\n\n\nfun setDouble(i:\nInt\n, v:\nDouble\n):\nUnit\nfun setDouble(i:\nInt\n, j:\nInt\n, v:\nDouble\n):\nUnit\n\n\n\n\n\n\nsetFloat\n\n\nfun setFloat(i:\nInt\n, v:\nFloat\n):\nUnit\nfun setFloat(i:\nInt\n, j:\nInt\n, v:\nFloat\n):\nUnit\n\n\n\n\n\n\nsetGeneric\n\n\nfun setGeneric(i:\nInt\n, v:\nLong\n):\nUnit\nfun setGeneric(i:\nInt\n, j:\nInt\n, v:\nLong\n):\nUnit\n\n\n\n\n\n\nsetInt\n\n\nfun setInt(i:\nInt\n, v:\nInt\n):\nUnit\nfun setInt(i:\nInt\n, j:\nInt\n, v:\nInt\n):\nUnit\n\n\n\n\n\n\nsetRow\n\n\nfun setRow(index:\nInt\n, row:\nMatrix\n<\nLong\n>):\nUnit\n\n\n\n\n\n\nsolve\n\n\nfun solve(A:\nMatrix\n<\nLong\n>, B:\nMatrix\n<\nLong\n>):\nMatrix\n<\nLong\n>\n\n\n\n\n\n\ntimes\n\n\nfun times(other:\nMatrix\n<\nLong\n>):\nMatrix\n<\nLong\n>\nfun times(other:\nLong\n):\nMatrix\n<\nLong\n>\n\n\n\n\n\n\ntrace\n\n\nfun trace():\nLong\n\n\n\n\n\n\ntranspose\n\n\nfun transpose():\nMatrix\n<\nLong\n>\n\n\n\n\n\n\nunaryMinus\n\n\nfun unaryMinus():\nMatrix\n<\nLong\n>\n\n\n\n\n\n\n\n\nInherited Functions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nasColVector\n\n\nopen fun asColVector():\nMatrix\n<T>\nReturns the given vector as a row vector. Will call transpose() on row vectors\n\n\n\n\n\n\nasRowVector\n\n\nopen fun asRowVector():\nMatrix\n<T>\nReturns the given vector as a row vector. Will call transpose() on column vectors\n\n\n\n\n\n\ncumSum\n\n\nopen fun cumSum():\nMatrix\n<T>\nCalculates the cumulative (ongoing) sum of a matrix's elements. For example, \ncumsum(mat[1,2,3])\n would return \nmat[1,3,6]\n. Assumes matrix type is convertible to double.\n\n\n\n\n\n\npow\n\n\nopen infix fun pow(exponent:\nInt\n):\nMatrix\n<T>\n\n\n\n\n\n\nrepr\n\n\nopen fun repr():\nString\n\n\n\n\n\n\nselectCols\n\n\nopen fun selectCols(vararg idxs:\nInt\n):\nMatrix\n<T>\nSelect a set of cols from a matrix to form the cols of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth cols of an input matrix, you would write \ninput.selectCols(0,1,4)\n.\nopen fun <U :\nNumber\n> selectCols(idxs:\nMatrix\n<U>):\nMatrix\n<T>\n\n\n\n\n\n\nselectRows\n\n\nopen fun <U :\nNumber\n> selectRows(idxs:\nMatrix\n<U>):\nMatrix\n<T>``open fun selectRows(vararg idxs:\nInt\n):\nMatrix\n<T>\nSelect a set of rows from a matrix to form the rows of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth rows of an input matrix, you would write \ninput.selectRows(0,1,4)\n.\n\n\n\n\n\n\nto2DArray\n\n\nopen fun to2DArray():\nArray\n<\nDoubleArray\n>\nReturns a Matrix as a double 2D array. Intended for MATLAB interop.\n\n\n\n\n\n\ntoIterable\n\n\nopen fun toIterable():\nIterable\n<T>\n\n\n\n\n\n\nwrapRange\n\n\nopen fun wrapRange(range:\nIntRange\n, max:\nInt\n):\nIntRange\n\n\n\n\n\n\n\n\nExtension Functions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nget\n\n\noperator fun <T>\nMatrix\n<T>.get(i:\nInt\n, j:\nInt\n): T``operator fun <T>\nMatrix\n<T>.get(i:\nInt\n): T\nGets the ith element in the matrix. If 2D, selects elements in row-major order.\noperator fun <T>\nMatrix\n<T>.get(rows:\nIntRange\n, cols:\nIntRange\n):\nMatrix\n<T>\nAllow slicing, e.g. \nmatrix[1..2, 3..4]\n. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.\noperator fun <T>\nMatrix\n<T>.get(rows:\nIntRange\n, cols:\nInt\n):\nMatrix\n<T>\nAllows for slicing of the rows and selection of a single column\noperator fun <T>\nMatrix\n<T>.get(rows:\nInt\n, cols:\nIntRange\n):\nMatrix\n<T>\nAllows for slicing of the cols and selection of a single row\n\n\n\n\n\n\nset\n\n\noperator fun <T>\nMatrix\n<T>.set(i:\nInt\n, v: T):\nUnit\nSet the ith element in the matrix. If 2D, selects elements in row-major order.\noperator fun <T>\nMatrix\n<T>.set(i:\nInt\n, j:\nInt\n, v: T):\nUnit\noperator fun <T>\nMatrix\n<T>.set(rows:\nIntRange\n, cols:\nIntRange\n, value: T):\nUnit\noperator fun <T>\nMatrix\n<T>.set(rows:\nInt\n, cols:\nIntRange\n, value: T):\nUnit\noperator fun <T>\nMatrix\n<T>.set(rows:\nIntRange\n, cols:\nInt\n, value: T):\nUnit\noperator fun <T>\nMatrix\n<T>.set(rows:\nIntRange\n, cols:\nIntRange\n, value:\nMatrix\n<T>):\nUnit\nAllow assignment to a slice, e.g. \nmatrix[1..2, 3..4]\n=something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.\noperator fun <T>\nMatrix\n<T>.set(rows:\nInt\n, cols:\nIntRange\n, value:\nMatrix\n<T>):\nUnit\nAllow assignment to a slice, e.g. \nmatrix[2, 3..4]\n=something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range.\noperator fun <T>\nMatrix\n<T>.set(rows:\nIntRange\n, cols:\nInt\n, value:\nMatrix\n<T>):\nUnit\nAllow assignment to a slice, e.g. \nmatrix[1..2, 3]\n=something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/index.html#defaultlongmatrix",
            "text": "class DefaultLongMatrix : Matrix < Long >",
            "title": "DefaultLongMatrix"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/index.html#constructors",
            "text": "Name  Summary      <init>  DefaultLongMatrix(rows: Int , cols: Int )",
            "title": "Constructors"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/index.html#properties",
            "text": "Name  Summary      cols  val cols: Int    rows  val rows: Int    storage  val storage: LongArray",
            "title": "Properties"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/index.html#inherited-properties",
            "text": "Name  Summary      T  open val T: Matrix <T> Transpose operator.",
            "title": "Inherited Properties"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/index.html#functions",
            "text": "Name  Summary      LU  fun LU(): <ERROR CLASS>< Matrix < Long >, Matrix < Long >, Matrix < Long >>    QR  fun QR(): <ERROR CLASS>< Matrix < Long >, Matrix < Long >>    T  fun T(): Matrix < Long > Transpose operator.    argMax  fun argMax(): Int Row major 1D index.    argMin  fun argMin(): Int Row major 1D index.    chol  fun chol(): Matrix < Long >    copy  fun copy(): Matrix < Long >    det  fun det(): Long    diag  fun diag(): Matrix < Long >    div  fun div(other: Long ): Matrix < Long > fun div(other: Int ): Matrix < Long >    elementSum  fun elementSum(): Long    elementTimes  fun elementTimes(other: Matrix < Long >): Matrix < Long >    epow  fun epow(other: Long ): Matrix < Long > fun epow(other: Int ): Matrix < Long >    expm  fun expm(): Matrix < Long >    getBaseMatrix  fun getBaseMatrix(): Any Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use  get  and  set ) to access the elements generically).    getCol  fun getCol(col: Int ): Matrix < Long >    getDouble  fun getDouble(i: Int , j: Int ): Double fun getDouble(i: Int ): Double    getDoubleData  fun getDoubleData(): DoubleArray Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known.    getFactory  fun getFactory(): MatrixFactory < Matrix < Long >> Because sometimes all you have is a Matrix, but you really want a MatrixFactory.    getFloat  fun getFloat(i: Int , j: Int ): Float fun getFloat(i: Int ): Float    getGeneric  fun getGeneric(i: Int , j: Int ): Long fun getGeneric(i: Int ): Long    getInt  fun getInt(i: Int , j: Int ): Int fun getInt(i: Int ): Int    getRow  fun getRow(row: Int ): Matrix < Long >    inv  fun inv(): Matrix < Long >    max  fun max(): Long    mean  fun mean(): Long    min  fun min(): Long    minus  fun minus(other: Long ): Matrix < Long > fun minus(other: Matrix < Long >): Matrix < Long >    norm  fun norm(): Long    normF  fun normF(): Long    normIndP1  fun normIndP1(): Long    numCols  fun numCols(): Int    numRows  fun numRows(): Int    pinv  fun pinv(): Matrix < Long >    plus  fun plus(other: Long ): Matrix < Long > fun plus(other: Matrix < Long >): Matrix < Long >    rem  fun rem(other: Matrix < Long >): Matrix < Long >    setCol  fun setCol(index: Int , col: Matrix < Long >): Unit    setDouble  fun setDouble(i: Int , v: Double ): Unit fun setDouble(i: Int , j: Int , v: Double ): Unit    setFloat  fun setFloat(i: Int , v: Float ): Unit fun setFloat(i: Int , j: Int , v: Float ): Unit    setGeneric  fun setGeneric(i: Int , v: Long ): Unit fun setGeneric(i: Int , j: Int , v: Long ): Unit    setInt  fun setInt(i: Int , v: Int ): Unit fun setInt(i: Int , j: Int , v: Int ): Unit    setRow  fun setRow(index: Int , row: Matrix < Long >): Unit    solve  fun solve(A: Matrix < Long >, B: Matrix < Long >): Matrix < Long >    times  fun times(other: Matrix < Long >): Matrix < Long > fun times(other: Long ): Matrix < Long >    trace  fun trace(): Long    transpose  fun transpose(): Matrix < Long >    unaryMinus  fun unaryMinus(): Matrix < Long >",
            "title": "Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/index.html#inherited-functions",
            "text": "Name  Summary      asColVector  open fun asColVector(): Matrix <T> Returns the given vector as a row vector. Will call transpose() on row vectors    asRowVector  open fun asRowVector(): Matrix <T> Returns the given vector as a row vector. Will call transpose() on column vectors    cumSum  open fun cumSum(): Matrix <T> Calculates the cumulative (ongoing) sum of a matrix's elements. For example,  cumsum(mat[1,2,3])  would return  mat[1,3,6] . Assumes matrix type is convertible to double.    pow  open infix fun pow(exponent: Int ): Matrix <T>    repr  open fun repr(): String    selectCols  open fun selectCols(vararg idxs: Int ): Matrix <T> Select a set of cols from a matrix to form the cols of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth cols of an input matrix, you would write  input.selectCols(0,1,4) . open fun <U : Number > selectCols(idxs: Matrix <U>): Matrix <T>    selectRows  open fun <U : Number > selectRows(idxs: Matrix <U>): Matrix <T>``open fun selectRows(vararg idxs: Int ): Matrix <T> Select a set of rows from a matrix to form the rows of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth rows of an input matrix, you would write  input.selectRows(0,1,4) .    to2DArray  open fun to2DArray(): Array < DoubleArray > Returns a Matrix as a double 2D array. Intended for MATLAB interop.    toIterable  open fun toIterable(): Iterable <T>    wrapRange  open fun wrapRange(range: IntRange , max: Int ): IntRange",
            "title": "Inherited Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/index.html#extension-functions",
            "text": "Name  Summary      get  operator fun <T> Matrix <T>.get(i: Int , j: Int ): T``operator fun <T> Matrix <T>.get(i: Int ): T Gets the ith element in the matrix. If 2D, selects elements in row-major order. operator fun <T> Matrix <T>.get(rows: IntRange , cols: IntRange ): Matrix <T> Allow slicing, e.g.  matrix[1..2, 3..4] . Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun <T> Matrix <T>.get(rows: IntRange , cols: Int ): Matrix <T> Allows for slicing of the rows and selection of a single column operator fun <T> Matrix <T>.get(rows: Int , cols: IntRange ): Matrix <T> Allows for slicing of the cols and selection of a single row    set  operator fun <T> Matrix <T>.set(i: Int , v: T): Unit Set the ith element in the matrix. If 2D, selects elements in row-major order. operator fun <T> Matrix <T>.set(i: Int , j: Int , v: T): Unit operator fun <T> Matrix <T>.set(rows: IntRange , cols: IntRange , value: T): Unit operator fun <T> Matrix <T>.set(rows: Int , cols: IntRange , value: T): Unit operator fun <T> Matrix <T>.set(rows: IntRange , cols: Int , value: T): Unit operator fun <T> Matrix <T>.set(rows: IntRange , cols: IntRange , value: Matrix <T>): Unit Allow assignment to a slice, e.g.  matrix[1..2, 3..4] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun <T> Matrix <T>.set(rows: Int , cols: IntRange , value: Matrix <T>): Unit Allow assignment to a slice, e.g.  matrix[2, 3..4] =something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range. operator fun <T> Matrix <T>.set(rows: IntRange , cols: Int , value: Matrix <T>): Unit Allow assignment to a slice, e.g.  matrix[1..2, 3] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range.",
            "title": "Extension Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/inv/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \ninv\n\n\ninv\n\n\nfun inv():\nMatrix\n<\nLong\n>\n\n\nOverrides \nMatrix.inv",
            "title": "Inv"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/inv/index.html#inv",
            "text": "fun inv(): Matrix < Long >  Overrides  Matrix.inv",
            "title": "inv"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/max/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \nmax\n\n\nmax\n\n\nfun max():\nLong\n\n\nOverrides \nMatrix.max",
            "title": "Max"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/max/index.html#max",
            "text": "fun max(): Long  Overrides  Matrix.max",
            "title": "max"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/mean/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \nmean\n\n\nmean\n\n\nfun mean():\nLong\n\n\nOverrides \nMatrix.mean",
            "title": "Mean"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/mean/index.html#mean",
            "text": "fun mean(): Long  Overrides  Matrix.mean",
            "title": "mean"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/min/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \nmin\n\n\nmin\n\n\nfun min():\nLong\n\n\nOverrides \nMatrix.min",
            "title": "Min"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/min/index.html#min",
            "text": "fun min(): Long  Overrides  Matrix.min",
            "title": "min"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/minus/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \nminus\n\n\nminus\n\n\nfun minus(other:\nLong\n):\nMatrix\n<\nLong\n>\n\n\nfun minus(other:\nMatrix\n<\nLong\n>):\nMatrix\n<\nLong\n>",
            "title": "Minus"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/minus/index.html#minus",
            "text": "fun minus(other: Long ): Matrix < Long >  fun minus(other: Matrix < Long >): Matrix < Long >",
            "title": "minus"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/norm-f/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \nnormF\n\n\nnormF\n\n\nfun normF():\nLong\n\n\nOverrides \nMatrix.normF",
            "title": "Norm f"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/norm-f/index.html#normf",
            "text": "fun normF(): Long  Overrides  Matrix.normF",
            "title": "normF"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/norm-ind-p1/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \nnormIndP1\n\n\nnormIndP1\n\n\nfun normIndP1():\nLong\n\n\nOverrides \nMatrix.normIndP1",
            "title": "Norm ind p1"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/norm-ind-p1/index.html#normindp1",
            "text": "fun normIndP1(): Long  Overrides  Matrix.normIndP1",
            "title": "normIndP1"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/norm/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \nnorm\n\n\nnorm\n\n\nfun norm():\nLong\n\n\nOverrides \nMatrix.norm",
            "title": "Norm"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/norm/index.html#norm",
            "text": "fun norm(): Long  Overrides  Matrix.norm",
            "title": "norm"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/num-cols/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \nnumCols\n\n\nnumCols\n\n\nfun numCols():\nInt\n\n\nOverrides \nMatrix.numCols",
            "title": "Num cols"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/num-cols/index.html#numcols",
            "text": "fun numCols(): Int  Overrides  Matrix.numCols",
            "title": "numCols"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/num-rows/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \nnumRows\n\n\nnumRows\n\n\nfun numRows():\nInt\n\n\nOverrides \nMatrix.numRows",
            "title": "Num rows"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/num-rows/index.html#numrows",
            "text": "fun numRows(): Int  Overrides  Matrix.numRows",
            "title": "numRows"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/pinv/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \npinv\n\n\npinv\n\n\nfun pinv():\nMatrix\n<\nLong\n>\n\n\nOverrides \nMatrix.pinv",
            "title": "Pinv"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/pinv/index.html#pinv",
            "text": "fun pinv(): Matrix < Long >  Overrides  Matrix.pinv",
            "title": "pinv"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/plus/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \nplus\n\n\nplus\n\n\nfun plus(other:\nLong\n):\nMatrix\n<\nLong\n>\n\n\nfun plus(other:\nMatrix\n<\nLong\n>):\nMatrix\n<\nLong\n>",
            "title": "Plus"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/plus/index.html#plus",
            "text": "fun plus(other: Long ): Matrix < Long >  fun plus(other: Matrix < Long >): Matrix < Long >",
            "title": "plus"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/rem/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \nrem\n\n\nrem\n\n\nfun rem(other:\nMatrix\n<\nLong\n>):\nMatrix\n<\nLong\n>",
            "title": "Rem"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/rem/index.html#rem",
            "text": "fun rem(other: Matrix < Long >): Matrix < Long >",
            "title": "rem"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/rows/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \nrows\n\n\nrows\n\n\nval rows:\nInt",
            "title": "Rows"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/rows/index.html#rows",
            "text": "val rows: Int",
            "title": "rows"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/set-col/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \nsetCol\n\n\nsetCol\n\n\nfun setCol(index:\nInt\n, col:\nMatrix\n<\nLong\n>):\nUnit",
            "title": "Set col"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/set-col/index.html#setcol",
            "text": "fun setCol(index: Int , col: Matrix < Long >): Unit",
            "title": "setCol"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/set-double/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \nsetDouble\n\n\nsetDouble\n\n\nfun setDouble(i:\nInt\n, v:\nDouble\n):\nUnit\n\n\nOverrides \nMatrix.setDouble\n\n\nfun setDouble(i:\nInt\n, j:\nInt\n, v:\nDouble\n):\nUnit\n\n\nOverrides \nMatrix.setDouble",
            "title": "Set double"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/set-double/index.html#setdouble",
            "text": "fun setDouble(i: Int , v: Double ): Unit  Overrides  Matrix.setDouble  fun setDouble(i: Int , j: Int , v: Double ): Unit  Overrides  Matrix.setDouble",
            "title": "setDouble"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/set-float/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \nsetFloat\n\n\nsetFloat\n\n\nfun setFloat(i:\nInt\n, v:\nFloat\n):\nUnit\n\n\nOverrides \nMatrix.setFloat\n\n\nfun setFloat(i:\nInt\n, j:\nInt\n, v:\nFloat\n):\nUnit\n\n\nOverrides \nMatrix.setFloat",
            "title": "Set float"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/set-float/index.html#setfloat",
            "text": "fun setFloat(i: Int , v: Float ): Unit  Overrides  Matrix.setFloat  fun setFloat(i: Int , j: Int , v: Float ): Unit  Overrides  Matrix.setFloat",
            "title": "setFloat"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/set-generic/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \nsetGeneric\n\n\nsetGeneric\n\n\nfun setGeneric(i:\nInt\n, v:\nLong\n):\nUnit\n\n\nfun setGeneric(i:\nInt\n, j:\nInt\n, v:\nLong\n):\nUnit",
            "title": "Set generic"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/set-generic/index.html#setgeneric",
            "text": "fun setGeneric(i: Int , v: Long ): Unit  fun setGeneric(i: Int , j: Int , v: Long ): Unit",
            "title": "setGeneric"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/set-int/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \nsetInt\n\n\nsetInt\n\n\nfun setInt(i:\nInt\n, v:\nInt\n):\nUnit\n\n\nOverrides \nMatrix.setInt\n\n\nfun setInt(i:\nInt\n, j:\nInt\n, v:\nInt\n):\nUnit\n\n\nOverrides \nMatrix.setInt",
            "title": "Set int"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/set-int/index.html#setint",
            "text": "fun setInt(i: Int , v: Int ): Unit  Overrides  Matrix.setInt  fun setInt(i: Int , j: Int , v: Int ): Unit  Overrides  Matrix.setInt",
            "title": "setInt"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/set-row/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \nsetRow\n\n\nsetRow\n\n\nfun setRow(index:\nInt\n, row:\nMatrix\n<\nLong\n>):\nUnit",
            "title": "Set row"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/set-row/index.html#setrow",
            "text": "fun setRow(index: Int , row: Matrix < Long >): Unit",
            "title": "setRow"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/solve/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \nsolve\n\n\nsolve\n\n\nfun solve(A:\nMatrix\n<\nLong\n>, B:\nMatrix\n<\nLong\n>):\nMatrix\n<\nLong\n>",
            "title": "Solve"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/solve/index.html#solve",
            "text": "fun solve(A: Matrix < Long >, B: Matrix < Long >): Matrix < Long >",
            "title": "solve"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/storage/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \nstorage\n\n\nstorage\n\n\nval storage:\nLongArray",
            "title": "Storage"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/storage/index.html#storage",
            "text": "val storage: LongArray",
            "title": "storage"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/times/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \ntimes\n\n\ntimes\n\n\nfun times(other:\nMatrix\n<\nLong\n>):\nMatrix\n<\nLong\n>\n\n\nfun times(other:\nLong\n):\nMatrix\n<\nLong\n>",
            "title": "Times"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/times/index.html#times",
            "text": "fun times(other: Matrix < Long >): Matrix < Long >  fun times(other: Long ): Matrix < Long >",
            "title": "times"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/trace/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \ntrace\n\n\ntrace\n\n\nfun trace():\nLong\n\n\nOverrides \nMatrix.trace",
            "title": "Trace"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/trace/index.html#trace",
            "text": "fun trace(): Long  Overrides  Matrix.trace",
            "title": "trace"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/transpose/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \ntranspose\n\n\ntranspose\n\n\nfun transpose():\nMatrix\n<\nLong\n>\n\n\nOverrides \nMatrix.transpose",
            "title": "Transpose"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/transpose/index.html#transpose",
            "text": "fun transpose(): Matrix < Long >  Overrides  Matrix.transpose",
            "title": "transpose"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/unary-minus/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrix\n / \nunaryMinus\n\n\nunaryMinus\n\n\nfun unaryMinus():\nMatrix\n<\nLong\n>\n\n\nOverrides \nMatrix.unaryMinus",
            "title": "Unary minus"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix/unary-minus/index.html#unaryminus",
            "text": "fun unaryMinus(): Matrix < Long >  Overrides  Matrix.unaryMinus",
            "title": "unaryMinus"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix-factory/-init-/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrixFactory\n / \n<init>\n\n\n<init>\n\n\nDefaultLongMatrixFactory()",
            "title": " init "
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix-factory/-init-/index.html#init",
            "text": "DefaultLongMatrixFactory()",
            "title": "&lt;init&gt;"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix-factory/arange/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrixFactory\n / \narange\n\n\narange\n\n\nfun arange(start:\nDouble\n, stop:\nDouble\n, increment:\nDouble\n):\nMatrix\n<\nLong\n>\n\n\nOverrides \nMatrixFactory.arange\n\n\nfun arange(start:\nInt\n, stop:\nInt\n, increment:\nInt\n):\nMatrix\n<\nLong\n>\n\n\nOverrides \nMatrixFactory.arange\n\n\nCreates a row-vector with the first value of \nstart\n and the last value of \nstop\n, with \nincrement\n steps\nbetween each value.\n\n\nfun arange(start:\nDouble\n, stop:\nDouble\n):\nMatrix\n<\nLong\n>\n\n\nOverrides \nMatrixFactory.arange\n\n\nfun arange(start:\nInt\n, stop:\nInt\n):\nMatrix\n<\nLong\n>\n\n\nOverrides \nMatrixFactory.arange\n\n\nCreates a row-vector with the first value of \nstart\n and the last value of \nstop\n, with unit steps\nbetween each value.",
            "title": "Arange"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix-factory/arange/index.html#arange",
            "text": "fun arange(start: Double , stop: Double , increment: Double ): Matrix < Long >  Overrides  MatrixFactory.arange  fun arange(start: Int , stop: Int , increment: Int ): Matrix < Long >  Overrides  MatrixFactory.arange  Creates a row-vector with the first value of  start  and the last value of  stop , with  increment  steps\nbetween each value.  fun arange(start: Double , stop: Double ): Matrix < Long >  Overrides  MatrixFactory.arange  fun arange(start: Int , stop: Int ): Matrix < Long >  Overrides  MatrixFactory.arange  Creates a row-vector with the first value of  start  and the last value of  stop , with unit steps\nbetween each value.",
            "title": "arange"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix-factory/create/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrixFactory\n / \ncreate\n\n\ncreate\n\n\nfun create(data:\nIntRange\n):\nMatrix\n<\nLong\n>\n\n\nOverrides \nMatrixFactory.create\n\n\nCreates a row-vector with initial values pulled from an int range, e.g. 1..45\n\n\nfun create(data:\nDoubleArray\n):\nMatrix\n<\nLong\n>\n\n\nOverrides \nMatrixFactory.create\n\n\nCreates a row-vector with initial values pulled from a double array\n\n\nfun create(data:\nArray\n<\nDoubleArray\n>):\nMatrix\n<\nLong\n>\n\n\nOverrides \nMatrixFactory.create\n\n\nCreates a matrix from an array of arrays (row-major)",
            "title": "Create"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix-factory/create/index.html#create",
            "text": "fun create(data: IntRange ): Matrix < Long >  Overrides  MatrixFactory.create  Creates a row-vector with initial values pulled from an int range, e.g. 1..45  fun create(data: DoubleArray ): Matrix < Long >  Overrides  MatrixFactory.create  Creates a row-vector with initial values pulled from a double array  fun create(data: Array < DoubleArray >): Matrix < Long >  Overrides  MatrixFactory.create  Creates a matrix from an array of arrays (row-major)",
            "title": "create"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix-factory/eye/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrixFactory\n / \neye\n\n\neye\n\n\nfun eye(size:\nInt\n):\nMatrix\n<\nLong\n>\n\n\nOverrides \nMatrixFactory.eye\n\n\nCreates an identity matrix of the requested shape\n\n\nfun eye(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nLong\n>\n\n\nOverrides \nMatrixFactory.eye\n\n\nCreates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.",
            "title": "Eye"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix-factory/eye/index.html#eye",
            "text": "fun eye(size: Int ): Matrix < Long >  Overrides  MatrixFactory.eye  Creates an identity matrix of the requested shape  fun eye(rows: Int , cols: Int ): Matrix < Long >  Overrides  MatrixFactory.eye  Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.",
            "title": "eye"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix-factory/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrixFactory\n\n\nDefaultLongMatrixFactory\n\n\nclass DefaultLongMatrixFactory :\nMatrixFactory\n<\nMatrix\n<\nLong\n>>\n\n\nConstructors\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\n<init>\n\n\nDefaultLongMatrixFactory()\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\narange\n\n\nfun arange(start:\nDouble\n, stop:\nDouble\n, increment:\nDouble\n):\nMatrix\n<\nLong\n>\nfun arange(start:\nInt\n, stop:\nInt\n, increment:\nInt\n):\nMatrix\n<\nLong\n>\nCreates a row-vector with the first value of \nstart\n and the last value of \nstop\n, with \nincrement\n steps between each value.\nfun arange(start:\nDouble\n, stop:\nDouble\n):\nMatrix\n<\nLong\n>\nfun arange(start:\nInt\n, stop:\nInt\n):\nMatrix\n<\nLong\n>\nCreates a row-vector with the first value of \nstart\n and the last value of \nstop\n, with unit steps between each value.\n\n\n\n\n\n\ncreate\n\n\nfun create(data:\nIntRange\n):\nMatrix\n<\nLong\n>\nCreates a row-vector with initial values pulled from an int range, e.g. 1..45\nfun create(data:\nDoubleArray\n):\nMatrix\n<\nLong\n>\nCreates a row-vector with initial values pulled from a double array\nfun create(data:\nArray\n<\nDoubleArray\n>):\nMatrix\n<\nLong\n>\nCreates a matrix from an array of arrays (row-major)\n\n\n\n\n\n\neye\n\n\nfun eye(size:\nInt\n):\nMatrix\n<\nLong\n>\nCreates an identity matrix of the requested shape\nfun eye(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nLong\n>\nCreates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.\n\n\n\n\n\n\nones\n\n\nfun ~~ones~~(size:\nInt\n):\nMatrix\n<\nLong\n>\nCreates a one initialized square matrix of the requested shape\nfun ones(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nLong\n>\nCreates a one initialized matrix of the requested shape\n\n\n\n\n\n\nrand\n\n\nfun ~~rand~~(size:\nInt\n):\nMatrix\n<\nLong\n>\nCreates a vector of \nsize\n many uniform 0-1 random samples\nfun rand(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nLong\n>\nCreates a matrix of uniform 0-1 random samples\nfun rand(rows:\nInt\n, cols:\nInt\n, seed:\nLong\n):\nMatrix\n<\nLong\n>\nCreates a matrix of rows x cols uniform 0-1 samples using the given seed. Two calls with the same seed will produce identical matrices\n\n\n\n\n\n\nrandn\n\n\nfun ~~randn~~(size:\nInt\n):\nMatrix\n<\nLong\n>\nCreates a vector of \nsize\n many unit-normal random samples\nfun randn(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nLong\n>\nCreates a matrix of unit-normal random samples\nfun randn(rows:\nInt\n, cols:\nInt\n, seed:\nLong\n):\nMatrix\n<\nLong\n>\nCreates a matrix of rows x cols random samples using the given seed. Two calls with the same seed will produce identical matrices\n\n\n\n\n\n\nzeros\n\n\nfun zeros(rows:\nInt\n, cols:\nInt\n):\nDefaultLongMatrix\nGenerate a zero initialized matrix of the requested shape.\nfun ~~zeros~~(size:\nInt\n):\nMatrix\n<\nLong\n>\nGenerate a zero initialized square matrix of the requested shape.",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix-factory/index.html#defaultlongmatrixfactory",
            "text": "class DefaultLongMatrixFactory : MatrixFactory < Matrix < Long >>",
            "title": "DefaultLongMatrixFactory"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix-factory/index.html#constructors",
            "text": "Name  Summary      <init>  DefaultLongMatrixFactory()",
            "title": "Constructors"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix-factory/index.html#functions",
            "text": "Name  Summary      arange  fun arange(start: Double , stop: Double , increment: Double ): Matrix < Long > fun arange(start: Int , stop: Int , increment: Int ): Matrix < Long > Creates a row-vector with the first value of  start  and the last value of  stop , with  increment  steps between each value. fun arange(start: Double , stop: Double ): Matrix < Long > fun arange(start: Int , stop: Int ): Matrix < Long > Creates a row-vector with the first value of  start  and the last value of  stop , with unit steps between each value.    create  fun create(data: IntRange ): Matrix < Long > Creates a row-vector with initial values pulled from an int range, e.g. 1..45 fun create(data: DoubleArray ): Matrix < Long > Creates a row-vector with initial values pulled from a double array fun create(data: Array < DoubleArray >): Matrix < Long > Creates a matrix from an array of arrays (row-major)    eye  fun eye(size: Int ): Matrix < Long > Creates an identity matrix of the requested shape fun eye(rows: Int , cols: Int ): Matrix < Long > Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.    ones  fun ~~ones~~(size: Int ): Matrix < Long > Creates a one initialized square matrix of the requested shape fun ones(rows: Int , cols: Int ): Matrix < Long > Creates a one initialized matrix of the requested shape    rand  fun ~~rand~~(size: Int ): Matrix < Long > Creates a vector of  size  many uniform 0-1 random samples fun rand(rows: Int , cols: Int ): Matrix < Long > Creates a matrix of uniform 0-1 random samples fun rand(rows: Int , cols: Int , seed: Long ): Matrix < Long > Creates a matrix of rows x cols uniform 0-1 samples using the given seed. Two calls with the same seed will produce identical matrices    randn  fun ~~randn~~(size: Int ): Matrix < Long > Creates a vector of  size  many unit-normal random samples fun randn(rows: Int , cols: Int ): Matrix < Long > Creates a matrix of unit-normal random samples fun randn(rows: Int , cols: Int , seed: Long ): Matrix < Long > Creates a matrix of rows x cols random samples using the given seed. Two calls with the same seed will produce identical matrices    zeros  fun zeros(rows: Int , cols: Int ): DefaultLongMatrix Generate a zero initialized matrix of the requested shape. fun ~~zeros~~(size: Int ): Matrix < Long > Generate a zero initialized square matrix of the requested shape.",
            "title": "Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix-factory/ones/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrixFactory\n / \nones\n\n\nones\n\n\nfun ~~ones~~(size:\nInt\n):\nMatrix\n<\nLong\n>\n\n\nOverrides \nMatrixFactory.ones\n\n\nDeprecated:\n Use rows,col overload instead. This method will be removed in a future update.\n\n\nCreates a one initialized square matrix of the requested shape\n\n\nfun ones(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nLong\n>\n\n\nOverrides \nMatrixFactory.ones\n\n\nCreates a one initialized matrix of the requested shape",
            "title": "Ones"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix-factory/ones/index.html#ones",
            "text": "fun ~~ones~~(size: Int ): Matrix < Long >  Overrides  MatrixFactory.ones  Deprecated:  Use rows,col overload instead. This method will be removed in a future update.  Creates a one initialized square matrix of the requested shape  fun ones(rows: Int , cols: Int ): Matrix < Long >  Overrides  MatrixFactory.ones  Creates a one initialized matrix of the requested shape",
            "title": "ones"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix-factory/rand/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrixFactory\n / \nrand\n\n\nrand\n\n\nfun ~~rand~~(size:\nInt\n):\nMatrix\n<\nLong\n>\n\n\nOverrides \nMatrixFactory.rand\n\n\nDeprecated:\n Use rows,col overload instead. This method will be removed in a future update.\n\n\nCreates a vector of \nsize\n many uniform 0-1 random samples\n\n\nfun rand(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nLong\n>\n\n\nOverrides \nMatrixFactory.rand\n\n\nCreates a matrix of uniform 0-1 random samples\n\n\nfun rand(rows:\nInt\n, cols:\nInt\n, seed:\nLong\n):\nMatrix\n<\nLong\n>\n\n\nOverrides \nMatrixFactory.rand\n\n\nCreates a matrix of rows x cols uniform 0-1 samples using the given seed. Two calls with the same seed\nwill produce identical matrices",
            "title": "Rand"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix-factory/rand/index.html#rand",
            "text": "fun ~~rand~~(size: Int ): Matrix < Long >  Overrides  MatrixFactory.rand  Deprecated:  Use rows,col overload instead. This method will be removed in a future update.  Creates a vector of  size  many uniform 0-1 random samples  fun rand(rows: Int , cols: Int ): Matrix < Long >  Overrides  MatrixFactory.rand  Creates a matrix of uniform 0-1 random samples  fun rand(rows: Int , cols: Int , seed: Long ): Matrix < Long >  Overrides  MatrixFactory.rand  Creates a matrix of rows x cols uniform 0-1 samples using the given seed. Two calls with the same seed\nwill produce identical matrices",
            "title": "rand"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix-factory/randn/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrixFactory\n / \nrandn\n\n\nrandn\n\n\nfun ~~randn~~(size:\nInt\n):\nMatrix\n<\nLong\n>\n\n\nOverrides \nMatrixFactory.randn\n\n\nDeprecated:\n Use rows,col overload instead. This method will be removed in a future update.\n\n\nCreates a vector of \nsize\n many unit-normal random samples\n\n\nfun randn(rows:\nInt\n, cols:\nInt\n):\nMatrix\n<\nLong\n>\n\n\nOverrides \nMatrixFactory.randn\n\n\nCreates a matrix of unit-normal random samples\n\n\nfun randn(rows:\nInt\n, cols:\nInt\n, seed:\nLong\n):\nMatrix\n<\nLong\n>\n\n\nOverrides \nMatrixFactory.randn\n\n\nCreates a matrix of rows x cols random samples using the given seed. Two calls with the same seed\nwill produce identical matrices",
            "title": "Randn"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix-factory/randn/index.html#randn",
            "text": "fun ~~randn~~(size: Int ): Matrix < Long >  Overrides  MatrixFactory.randn  Deprecated:  Use rows,col overload instead. This method will be removed in a future update.  Creates a vector of  size  many unit-normal random samples  fun randn(rows: Int , cols: Int ): Matrix < Long >  Overrides  MatrixFactory.randn  Creates a matrix of unit-normal random samples  fun randn(rows: Int , cols: Int , seed: Long ): Matrix < Long >  Overrides  MatrixFactory.randn  Creates a matrix of rows x cols random samples using the given seed. Two calls with the same seed\nwill produce identical matrices",
            "title": "randn"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix-factory/zeros/index.html",
            "text": "api\n / \nkoma.matrix.default\n / \nDefaultLongMatrixFactory\n / \nzeros\n\n\nzeros\n\n\nfun zeros(rows:\nInt\n, cols:\nInt\n):\nDefaultLongMatrix\n\n\nOverrides \nMatrixFactory.zeros\n\n\nGenerate a zero initialized matrix of the requested shape.\n\n\nfun ~~zeros~~(size:\nInt\n):\nMatrix\n<\nLong\n>\n\n\nOverrides \nMatrixFactory.zeros\n\n\nDeprecated:\n Use rows,col overload instead. This method will be removed in a future update.\n\n\nGenerate a zero initialized square matrix of the requested shape.",
            "title": "Zeros"
        },
        {
            "location": "/Reference_API_Docs/koma.matrix.default/-default-long-matrix-factory/zeros/index.html#zeros",
            "text": "fun zeros(rows: Int , cols: Int ): DefaultLongMatrix  Overrides  MatrixFactory.zeros  Generate a zero initialized matrix of the requested shape.  fun ~~zeros~~(size: Int ): Matrix < Long >  Overrides  MatrixFactory.zeros  Deprecated:  Use rows,col overload instead. This method will be removed in a future update.  Generate a zero initialized square matrix of the requested shape.",
            "title": "zeros"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/index.html",
            "text": "api\n / \nkoma.ndarray\n\n\nPackage koma.ndarray\n\n\nA set of interfaces for N-dimensional containers\n\n\nTypes\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nNDArray\n\n\ninterface NDArray<T>\nA general N-dimensional container for arbitrary types. If you are looking for a ND container restricted to numerical types, please look at \nNumericalNDArray\n. If you are looking for a 2D container supporting linear algebra, please look at \nMatrix\n.\n\n\n\n\n\n\nNumericalNDArray\n\n\ninterface NumericalNDArray<T> :\nNDArray\n<T>\nAn \nNDArray\n that holds a numerical type, such that math operations are available.\n\n\n\n\n\n\nNumericalNDArrayFactory\n\n\ninterface NumericalNDArrayFactory<out T>\nA set of constructors that must be implemented by a koma NDArray backend. Generic parameter is the type of element, i.e. T=NDArray or T=NDArray, etc.",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/index.html#package-komandarray",
            "text": "A set of interfaces for N-dimensional containers",
            "title": "Package koma.ndarray"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/index.html#types",
            "text": "Name  Summary      NDArray  interface NDArray<T> A general N-dimensional container for arbitrary types. If you are looking for a ND container restricted to numerical types, please look at  NumericalNDArray . If you are looking for a 2D container supporting linear algebra, please look at  Matrix .    NumericalNDArray  interface NumericalNDArray<T> : NDArray <T> An  NDArray  that holds a numerical type, such that math operations are available.    NumericalNDArrayFactory  interface NumericalNDArrayFactory<out T> A set of constructors that must be implemented by a koma NDArray backend. Generic parameter is the type of element, i.e. T=NDArray or T=NDArray, etc.",
            "title": "Types"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/copy/index.html",
            "text": "api\n / \nkoma.ndarray\n / \nNDArray\n / \ncopy\n\n\ncopy\n\n\nabstract fun copy():\nNDArray\n<T>",
            "title": "Copy"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/copy/index.html#copy",
            "text": "abstract fun copy(): NDArray <T>",
            "title": "copy"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/for-each-indexed-n/index.html",
            "text": "api\n / \nkoma.ndarray\n / \nNDArray\n / \nforEachIndexedN\n\n\nforEachIndexedN\n\n\nabstract fun forEachIndexedN(f: (idx:\nIntArray\n, ele: T) ->\nUnit\n):\nUnit\n\n\nTakes each element in a NDArray and passes them through f. Index given to f is the full\nND index of the element.\n\n\nParameters\n\n\nf\n - A function that takes in an element. Function also takes\n    in the ND index of the element's location.",
            "title": "For each indexed n"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/for-each-indexed-n/index.html#foreachindexedn",
            "text": "abstract fun forEachIndexedN(f: (idx: IntArray , ele: T) -> Unit ): Unit  Takes each element in a NDArray and passes them through f. Index given to f is the full\nND index of the element.",
            "title": "forEachIndexedN"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/for-each-indexed-n/index.html#parameters",
            "text": "f  - A function that takes in an element. Function also takes\n    in the ND index of the element's location.",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/for-each-indexed/index.html",
            "text": "api\n / \nkoma.ndarray\n / \nNDArray\n / \nforEachIndexed\n\n\nforEachIndexed\n\n\nopen fun forEachIndexed(f: (idx:\nInt\n, ele: T) ->\nUnit\n):\nUnit\n\n\nTakes each element in a NDArray and passes them through f. Index given to f is a linear\nindex, depending on the underlying storage major dimension.\n\n\nParameters\n\n\nf\n - A function that takes in an element. Function also takes\n    in the linear index of the element's location.",
            "title": "For each indexed"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/for-each-indexed/index.html#foreachindexed",
            "text": "open fun forEachIndexed(f: (idx: Int , ele: T) -> Unit ): Unit  Takes each element in a NDArray and passes them through f. Index given to f is a linear\nindex, depending on the underlying storage major dimension.",
            "title": "forEachIndexed"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/for-each-indexed/index.html#parameters",
            "text": "f  - A function that takes in an element. Function also takes\n    in the linear index of the element's location.",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/for-each/index.html",
            "text": "api\n / \nkoma.ndarray\n / \nNDArray\n / \nforEach\n\n\nforEach\n\n\nopen fun forEach(f: (ele: T) ->\nUnit\n):\nUnit\n\n\nTakes each element in a NDArray and passes them through f.\n\n\nParameters\n\n\nf\n - A function that takes in an element",
            "title": "For each"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/for-each/index.html#foreach",
            "text": "open fun forEach(f: (ele: T) -> Unit ): Unit  Takes each element in a NDArray and passes them through f.",
            "title": "forEach"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/for-each/index.html#parameters",
            "text": "f  - A function that takes in an element",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/get-base-array/index.html",
            "text": "api\n / \nkoma.ndarray\n / \nNDArray\n / \ngetBaseArray\n\n\ngetBaseArray\n\n\nabstract fun getBaseArray():\nAny",
            "title": "Get base array"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/get-base-array/index.html#getbasearray",
            "text": "abstract fun getBaseArray(): Any",
            "title": "getBaseArray"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/get-linear/index.html",
            "text": "api\n / \nkoma.ndarray\n / \nNDArray\n / \ngetLinear\n\n\ngetLinear\n\n\nabstract fun getLinear(index:\nInt\n): T",
            "title": "Get linear"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/get-linear/index.html#getlinear",
            "text": "abstract fun getLinear(index: Int ): T",
            "title": "getLinear"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/get/index.html",
            "text": "api\n / \nkoma.ndarray\n / \nNDArray\n / \nget\n\n\nget\n\n\nabstract operator fun get(vararg indices:\nInt\n): T\n\n\nabstract operator fun get(vararg indices:\nIntRange\n):\nNDArray\n<T>",
            "title": "Get"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/get/index.html#get",
            "text": "abstract operator fun get(vararg indices: Int ): T  abstract operator fun get(vararg indices: IntRange ): NDArray <T>",
            "title": "get"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/index.html",
            "text": "api\n / \nkoma.ndarray\n / \nNDArray\n\n\nNDArray\n\n\ninterface NDArray<T>\n\n\nA general N-dimensional container for arbitrary types. If you are looking\nfor a ND container restricted to numerical types, please look at \nNumericalNDArray\n.\nIf you are looking for a 2D container supporting linear algebra, please look at\n\nMatrix\n.\n\n\nFunctions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\ncopy\n\n\nabstract fun copy(): NDArray<T>\n\n\n\n\n\n\nforEach\n\n\nopen fun forEach(f: (ele: T) ->\nUnit\n):\nUnit\nTakes each element in a NDArray and passes them through f.\n\n\n\n\n\n\nforEachIndexed\n\n\nopen fun forEachIndexed(f: (idx:\nInt\n, ele: T) ->\nUnit\n):\nUnit\nTakes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension.\n\n\n\n\n\n\nforEachIndexedN\n\n\nabstract fun forEachIndexedN(f: (idx:\nIntArray\n, ele: T) ->\nUnit\n):\nUnit\nTakes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element.\n\n\n\n\n\n\nget\n\n\nabstract operator fun get(vararg indices:\nInt\n): T\nabstract operator fun get(vararg indices:\nIntRange\n): NDArray<T>\n\n\n\n\n\n\ngetBaseArray\n\n\nabstract fun getBaseArray():\nAny\n\n\n\n\n\n\ngetLinear\n\n\nabstract fun getLinear(index:\nInt\n): T\n\n\n\n\n\n\nmap\n\n\nopen fun map(f: (T) -> T): NDArray<T>\nTakes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray.\n\n\n\n\n\n\nmapIndexed\n\n\nopen fun mapIndexed(f: (idx:\nInt\n, ele: T) -> T): NDArray<T>\nTakes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension.\n\n\n\n\n\n\nmapIndexedN\n\n\nabstract fun mapIndexedN(f: (idx:\nIntArray\n, ele: T) -> T): NDArray<T>\nTakes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element.\n\n\n\n\n\n\nset\n\n\nabstract operator fun set(vararg indices:\nInt\n, value: T):\nUnit\nabstract operator fun set(vararg indices:\nInt\n, value: NDArray<T>):\nUnit\n\n\n\n\n\n\nsetLinear\n\n\nabstract fun setLinear(index:\nInt\n, value: T):\nUnit\n\n\n\n\n\n\nshape\n\n\nabstract fun shape():\nList\n<\nInt\n>\n\n\n\n\n\n\ntoIterable\n\n\nopen fun toIterable():\nIterable\n<T>\n\n\n\n\n\n\n\n\nExtension Functions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\ntoNumerical\n\n\nfun NDArray<\nDouble\n>.toNumerical():\nNumericalNDArray\n<\nDouble\n>\nfun NDArray<\nFloat\n>.toNumerical():\nNumericalNDArray\n<\nFloat\n>\nfun NDArray<\nInt\n>.toNumerical():\nNumericalNDArray\n<\nInt\n>\nfun NDArray<\nLong\n>.toNumerical():\nNumericalNDArray\n<\nLong\n>\nConverts a regular NDArray with the same primitive type to a NumericalNDArray, attempting to avoid a copy when possible\n\n\n\n\n\n\n\n\nInheritors\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nDefaultNDArray\n\n\nopen class DefaultNDArray<T> : NDArray<T>\nAn (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports.\n\n\n\n\n\n\nNumericalNDArray\n\n\ninterface NumericalNDArray<T> : NDArray<T>\nAn NDArray that holds a numerical type, such that math operations are available.",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/index.html#ndarray",
            "text": "interface NDArray<T>  A general N-dimensional container for arbitrary types. If you are looking\nfor a ND container restricted to numerical types, please look at  NumericalNDArray .\nIf you are looking for a 2D container supporting linear algebra, please look at Matrix .",
            "title": "NDArray"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/index.html#functions",
            "text": "Name  Summary      copy  abstract fun copy(): NDArray<T>    forEach  open fun forEach(f: (ele: T) -> Unit ): Unit Takes each element in a NDArray and passes them through f.    forEachIndexed  open fun forEachIndexed(f: (idx: Int , ele: T) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension.    forEachIndexedN  abstract fun forEachIndexedN(f: (idx: IntArray , ele: T) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element.    get  abstract operator fun get(vararg indices: Int ): T abstract operator fun get(vararg indices: IntRange ): NDArray<T>    getBaseArray  abstract fun getBaseArray(): Any    getLinear  abstract fun getLinear(index: Int ): T    map  open fun map(f: (T) -> T): NDArray<T> Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray.    mapIndexed  open fun mapIndexed(f: (idx: Int , ele: T) -> T): NDArray<T> Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension.    mapIndexedN  abstract fun mapIndexedN(f: (idx: IntArray , ele: T) -> T): NDArray<T> Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element.    set  abstract operator fun set(vararg indices: Int , value: T): Unit abstract operator fun set(vararg indices: Int , value: NDArray<T>): Unit    setLinear  abstract fun setLinear(index: Int , value: T): Unit    shape  abstract fun shape(): List < Int >    toIterable  open fun toIterable(): Iterable <T>",
            "title": "Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/index.html#extension-functions",
            "text": "Name  Summary      toNumerical  fun NDArray< Double >.toNumerical(): NumericalNDArray < Double > fun NDArray< Float >.toNumerical(): NumericalNDArray < Float > fun NDArray< Int >.toNumerical(): NumericalNDArray < Int > fun NDArray< Long >.toNumerical(): NumericalNDArray < Long > Converts a regular NDArray with the same primitive type to a NumericalNDArray, attempting to avoid a copy when possible",
            "title": "Extension Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/index.html#inheritors",
            "text": "Name  Summary      DefaultNDArray  open class DefaultNDArray<T> : NDArray<T> An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports.    NumericalNDArray  interface NumericalNDArray<T> : NDArray<T> An NDArray that holds a numerical type, such that math operations are available.",
            "title": "Inheritors"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/map-indexed-n/index.html",
            "text": "api\n / \nkoma.ndarray\n / \nNDArray\n / \nmapIndexedN\n\n\nmapIndexedN\n\n\nabstract fun mapIndexedN(f: (idx:\nIntArray\n, ele: T) -> T):\nNDArray\n<T>\n\n\nTakes each element in a NDArray, passes them through f, and puts the output of f into an\noutput NDArray. Index given to f is the full ND index of the element.\n\n\nParameters\n\n\nf\n - A function that takes in an element and returns an element. Function also takes\n    in the ND index of the element's location.\n\n\nReturn\n\nthe new NDArray after each element is mapped through f",
            "title": "Map indexed n"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/map-indexed-n/index.html#mapindexedn",
            "text": "abstract fun mapIndexedN(f: (idx: IntArray , ele: T) -> T): NDArray <T>  Takes each element in a NDArray, passes them through f, and puts the output of f into an\noutput NDArray. Index given to f is the full ND index of the element.",
            "title": "mapIndexedN"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/map-indexed-n/index.html#parameters",
            "text": "f  - A function that takes in an element and returns an element. Function also takes\n    in the ND index of the element's location.  Return \nthe new NDArray after each element is mapped through f",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/map-indexed/index.html",
            "text": "api\n / \nkoma.ndarray\n / \nNDArray\n / \nmapIndexed\n\n\nmapIndexed\n\n\nopen fun mapIndexed(f: (idx:\nInt\n, ele: T) -> T):\nNDArray\n<T>\n\n\nTakes each element in a NDArray, passes them through f, and puts the output of f into an\noutput NDArray. Index given to f is a linear index, depending on the underlying storage\nmajor dimension.\n\n\nParameters\n\n\nf\n - A function that takes in an element and returns an element. Function also takes\n    in the linear index of the element's location.\n\n\nReturn\n\nthe new NDArray after each element is mapped through f",
            "title": "Map indexed"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/map-indexed/index.html#mapindexed",
            "text": "open fun mapIndexed(f: (idx: Int , ele: T) -> T): NDArray <T>  Takes each element in a NDArray, passes them through f, and puts the output of f into an\noutput NDArray. Index given to f is a linear index, depending on the underlying storage\nmajor dimension.",
            "title": "mapIndexed"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/map-indexed/index.html#parameters",
            "text": "f  - A function that takes in an element and returns an element. Function also takes\n    in the linear index of the element's location.  Return \nthe new NDArray after each element is mapped through f",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/map/index.html",
            "text": "api\n / \nkoma.ndarray\n / \nNDArray\n / \nmap\n\n\nmap\n\n\nopen fun map(f: (T) -> T):\nNDArray\n<T>\n\n\nTakes each element in a NDArray, passes them through f, and puts the output of f into an\noutput NDArray.\n\n\nParameters\n\n\nf\n - A function that takes in an element and returns an element\n\n\nReturn\n\nthe new NDArray after each element is mapped through f",
            "title": "Map"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/map/index.html#map",
            "text": "open fun map(f: (T) -> T): NDArray <T>  Takes each element in a NDArray, passes them through f, and puts the output of f into an\noutput NDArray.",
            "title": "map"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/map/index.html#parameters",
            "text": "f  - A function that takes in an element and returns an element  Return \nthe new NDArray after each element is mapped through f",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/set-linear/index.html",
            "text": "api\n / \nkoma.ndarray\n / \nNDArray\n / \nsetLinear\n\n\nsetLinear\n\n\nabstract fun setLinear(index:\nInt\n, value: T):\nUnit",
            "title": "Set linear"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/set-linear/index.html#setlinear",
            "text": "abstract fun setLinear(index: Int , value: T): Unit",
            "title": "setLinear"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/set/index.html",
            "text": "api\n / \nkoma.ndarray\n / \nNDArray\n / \nset\n\n\nset\n\n\nabstract operator fun set(vararg indices:\nInt\n, value: T):\nUnit\n\n\nabstract operator fun set(vararg indices:\nInt\n, value:\nNDArray\n<T>):\nUnit",
            "title": "Set"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/set/index.html#set",
            "text": "abstract operator fun set(vararg indices: Int , value: T): Unit  abstract operator fun set(vararg indices: Int , value: NDArray <T>): Unit",
            "title": "set"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/shape/index.html",
            "text": "api\n / \nkoma.ndarray\n / \nNDArray\n / \nshape\n\n\nshape\n\n\nabstract fun shape():\nList\n<\nInt\n>",
            "title": "Shape"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/shape/index.html#shape",
            "text": "abstract fun shape(): List < Int >",
            "title": "shape"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/to-iterable/index.html",
            "text": "api\n / \nkoma.ndarray\n / \nNDArray\n / \ntoIterable\n\n\ntoIterable\n\n\nopen fun toIterable():\nIterable\n<T>",
            "title": "To iterable"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-n-d-array/to-iterable/index.html#toiterable",
            "text": "open fun toIterable(): Iterable <T>",
            "title": "toIterable"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-numerical-n-d-array/div/index.html",
            "text": "api\n / \nkoma.ndarray\n / \nNumericalNDArray\n / \ndiv\n\n\ndiv\n\n\nabstract operator fun div(other: T):\nNumericalNDArray\n<T>",
            "title": "Div"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-numerical-n-d-array/div/index.html#div",
            "text": "abstract operator fun div(other: T): NumericalNDArray <T>",
            "title": "div"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-numerical-n-d-array/index.html",
            "text": "api\n / \nkoma.ndarray\n / \nNumericalNDArray\n\n\nNumericalNDArray\n\n\ninterface NumericalNDArray<T> :\nNDArray\n<T>\n\n\nAn \nNDArray\n that holds a numerical type, such that\nmath operations are available.\n\n\nFunctions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\ndiv\n\n\nabstract operator fun div(other: T): NumericalNDArray<T>\n\n\n\n\n\n\nminus\n\n\nabstract operator fun minus(other: T): NumericalNDArray<T>\nabstract operator fun minus(other:\nNDArray\n<T>): NumericalNDArray<T>\n\n\n\n\n\n\nplus\n\n\nabstract operator fun plus(other: T): NumericalNDArray<T>\nabstract operator fun plus(other:\nNDArray\n<T>): NumericalNDArray<T>\n\n\n\n\n\n\npow\n\n\nabstract infix fun pow(exponent:\nInt\n): NumericalNDArray<T>\n\n\n\n\n\n\ntimes\n\n\nabstract operator fun times(other:\nNDArray\n<T>): NumericalNDArray<T>\nabstract operator fun times(other: T): NumericalNDArray<T>\n\n\n\n\n\n\nunaryMinus\n\n\nabstract operator fun unaryMinus(): NumericalNDArray<T>\n\n\n\n\n\n\n\n\nInherited Functions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\ncopy\n\n\nabstract fun copy():\nNDArray\n<T>\n\n\n\n\n\n\nget\n\n\nabstract operator fun get(vararg indices:\nInt\n): T\nabstract operator fun get(vararg indices:\nIntRange\n):\nNDArray\n<T>\n\n\n\n\n\n\ngetBaseArray\n\n\nabstract fun getBaseArray():\nAny\n\n\n\n\n\n\ngetLinear\n\n\nabstract fun getLinear(index:\nInt\n): T\n\n\n\n\n\n\nshape\n\n\nabstract fun shape():\nList\n<\nInt\n>\n\n\n\n\n\n\ntoIterable\n\n\nopen fun toIterable():\nIterable\n<T>\n\n\n\n\n\n\n\n\nInheritors\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nDefaultDoubleNDArray\n\n\nclass DefaultDoubleNDArray :\nDefaultNDArray\n<\nDouble\n>, NumericalNDArray<\nDouble\n>\n\n\n\n\n\n\nDefaultFloatNDArray\n\n\nclass DefaultFloatNDArray :\nDefaultNDArray\n<\nFloat\n>, NumericalNDArray<\nFloat\n>\n\n\n\n\n\n\nDefaultIntNDArray\n\n\nclass DefaultIntNDArray :\nDefaultNDArray\n<\nInt\n>, NumericalNDArray<\nInt\n>\n\n\n\n\n\n\nDefaultLongNDArray\n\n\nclass DefaultLongNDArray :\nDefaultNDArray\n<\nLong\n>, NumericalNDArray<\nLong\n>",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-numerical-n-d-array/index.html#numericalndarray",
            "text": "interface NumericalNDArray<T> : NDArray <T>  An  NDArray  that holds a numerical type, such that\nmath operations are available.",
            "title": "NumericalNDArray"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-numerical-n-d-array/index.html#functions",
            "text": "Name  Summary      div  abstract operator fun div(other: T): NumericalNDArray<T>    minus  abstract operator fun minus(other: T): NumericalNDArray<T> abstract operator fun minus(other: NDArray <T>): NumericalNDArray<T>    plus  abstract operator fun plus(other: T): NumericalNDArray<T> abstract operator fun plus(other: NDArray <T>): NumericalNDArray<T>    pow  abstract infix fun pow(exponent: Int ): NumericalNDArray<T>    times  abstract operator fun times(other: NDArray <T>): NumericalNDArray<T> abstract operator fun times(other: T): NumericalNDArray<T>    unaryMinus  abstract operator fun unaryMinus(): NumericalNDArray<T>",
            "title": "Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-numerical-n-d-array/index.html#inherited-functions",
            "text": "Name  Summary      copy  abstract fun copy(): NDArray <T>    get  abstract operator fun get(vararg indices: Int ): T abstract operator fun get(vararg indices: IntRange ): NDArray <T>    getBaseArray  abstract fun getBaseArray(): Any    getLinear  abstract fun getLinear(index: Int ): T    shape  abstract fun shape(): List < Int >    toIterable  open fun toIterable(): Iterable <T>",
            "title": "Inherited Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-numerical-n-d-array/index.html#inheritors",
            "text": "Name  Summary      DefaultDoubleNDArray  class DefaultDoubleNDArray : DefaultNDArray < Double >, NumericalNDArray< Double >    DefaultFloatNDArray  class DefaultFloatNDArray : DefaultNDArray < Float >, NumericalNDArray< Float >    DefaultIntNDArray  class DefaultIntNDArray : DefaultNDArray < Int >, NumericalNDArray< Int >    DefaultLongNDArray  class DefaultLongNDArray : DefaultNDArray < Long >, NumericalNDArray< Long >",
            "title": "Inheritors"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-numerical-n-d-array/minus/index.html",
            "text": "api\n / \nkoma.ndarray\n / \nNumericalNDArray\n / \nminus\n\n\nminus\n\n\nabstract operator fun minus(other: T):\nNumericalNDArray\n<T>\n\n\nabstract operator fun minus(other:\nNDArray\n<T>):\nNumericalNDArray\n<T>",
            "title": "Minus"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-numerical-n-d-array/minus/index.html#minus",
            "text": "abstract operator fun minus(other: T): NumericalNDArray <T>  abstract operator fun minus(other: NDArray <T>): NumericalNDArray <T>",
            "title": "minus"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-numerical-n-d-array/plus/index.html",
            "text": "api\n / \nkoma.ndarray\n / \nNumericalNDArray\n / \nplus\n\n\nplus\n\n\nabstract operator fun plus(other: T):\nNumericalNDArray\n<T>\n\n\nabstract operator fun plus(other:\nNDArray\n<T>):\nNumericalNDArray\n<T>",
            "title": "Plus"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-numerical-n-d-array/plus/index.html#plus",
            "text": "abstract operator fun plus(other: T): NumericalNDArray <T>  abstract operator fun plus(other: NDArray <T>): NumericalNDArray <T>",
            "title": "plus"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-numerical-n-d-array/pow/index.html",
            "text": "api\n / \nkoma.ndarray\n / \nNumericalNDArray\n / \npow\n\n\npow\n\n\nabstract infix fun pow(exponent:\nInt\n):\nNumericalNDArray\n<T>",
            "title": "Pow"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-numerical-n-d-array/pow/index.html#pow",
            "text": "abstract infix fun pow(exponent: Int ): NumericalNDArray <T>",
            "title": "pow"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-numerical-n-d-array/times/index.html",
            "text": "api\n / \nkoma.ndarray\n / \nNumericalNDArray\n / \ntimes\n\n\ntimes\n\n\nabstract operator fun times(other:\nNDArray\n<T>):\nNumericalNDArray\n<T>\n\n\nabstract operator fun times(other: T):\nNumericalNDArray\n<T>",
            "title": "Times"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-numerical-n-d-array/times/index.html#times",
            "text": "abstract operator fun times(other: NDArray <T>): NumericalNDArray <T>  abstract operator fun times(other: T): NumericalNDArray <T>",
            "title": "times"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-numerical-n-d-array/unary-minus/index.html",
            "text": "api\n / \nkoma.ndarray\n / \nNumericalNDArray\n / \nunaryMinus\n\n\nunaryMinus\n\n\nabstract operator fun unaryMinus():\nNumericalNDArray\n<T>",
            "title": "Unary minus"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-numerical-n-d-array/unary-minus/index.html#unaryminus",
            "text": "abstract operator fun unaryMinus(): NumericalNDArray <T>",
            "title": "unaryMinus"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-numerical-n-d-array-factory/arange/index.html",
            "text": "api\n / \nkoma.ndarray\n / \nNumericalNDArrayFactory\n / \narange\n\n\narange\n\n\nabstract fun arange(start:\nDouble\n, stop:\nDouble\n, increment:\nDouble\n): T\n\n\nabstract fun arange(start:\nInt\n, stop:\nInt\n, increment:\nInt\n): T\n\n\nCreates a 1D vector with the first value of \nstart\n and the last value of \nstop\n, with \nincrement\n steps\nbetween each value.\n\n\nabstract fun arange(start:\nDouble\n, stop:\nDouble\n): T\n\n\nabstract fun arange(start:\nInt\n, stop:\nInt\n): T\n\n\nCreates a 1D vector with the first value of \nstart\n and the last value of \nstop\n, with unit steps\nbetween each value.",
            "title": "Arange"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-numerical-n-d-array-factory/arange/index.html#arange",
            "text": "abstract fun arange(start: Double , stop: Double , increment: Double ): T  abstract fun arange(start: Int , stop: Int , increment: Int ): T  Creates a 1D vector with the first value of  start  and the last value of  stop , with  increment  steps\nbetween each value.  abstract fun arange(start: Double , stop: Double ): T  abstract fun arange(start: Int , stop: Int ): T  Creates a 1D vector with the first value of  start  and the last value of  stop , with unit steps\nbetween each value.",
            "title": "arange"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-numerical-n-d-array-factory/create/index.html",
            "text": "api\n / \nkoma.ndarray\n / \nNumericalNDArrayFactory\n / \ncreate\n\n\ncreate\n\n\nabstract fun create(data:\nIntRange\n): T\n\n\nCreates a 1D vector with initial values pulled from an int range, e.g. 1..45\n\n\nabstract fun create(data:\nDoubleArray\n): T\n\n\nCreates a 1D vector with initial values pulled from a double array\n\n\nabstract fun create(data:\nArray\n<\nDoubleArray\n>): T\n\n\nCreates a ND container from an array of arrays (row-major, 2D)",
            "title": "Create"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-numerical-n-d-array-factory/create/index.html#create",
            "text": "abstract fun create(data: IntRange ): T  Creates a 1D vector with initial values pulled from an int range, e.g. 1..45  abstract fun create(data: DoubleArray ): T  Creates a 1D vector with initial values pulled from a double array  abstract fun create(data: Array < DoubleArray >): T  Creates a ND container from an array of arrays (row-major, 2D)",
            "title": "create"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-numerical-n-d-array-factory/index.html",
            "text": "api\n / \nkoma.ndarray\n / \nNumericalNDArrayFactory\n\n\nNumericalNDArrayFactory\n\n\ninterface NumericalNDArrayFactory<out T>\n\n\nA set of constructors that must be implemented by a koma NDArray backend.\nGeneric parameter is the type of element, i.e. T=NDArray or T=NDArray, etc.\n\n\nFunctions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\narange\n\n\nabstract fun arange(start:\nDouble\n, stop:\nDouble\n, increment:\nDouble\n): T\nabstract fun arange(start:\nInt\n, stop:\nInt\n, increment:\nInt\n): T\nCreates a 1D vector with the first value of \nstart\n and the last value of \nstop\n, with \nincrement\n steps between each value.\nabstract fun arange(start:\nDouble\n, stop:\nDouble\n): T\nabstract fun arange(start:\nInt\n, stop:\nInt\n): T\nCreates a 1D vector with the first value of \nstart\n and the last value of \nstop\n, with unit steps between each value.\n\n\n\n\n\n\ncreate\n\n\nabstract fun create(data:\nIntRange\n): T\nCreates a 1D vector with initial values pulled from an int range, e.g. 1..45\nabstract fun create(data:\nDoubleArray\n): T\nCreates a 1D vector with initial values pulled from a double array\nabstract fun create(data:\nArray\n<\nDoubleArray\n>): T\nCreates a ND container from an array of arrays (row-major, 2D)\n\n\n\n\n\n\nones\n\n\nabstract fun ones(vararg lengths:\nInt\n): T\nCreates a 1 initialized ND container of the requested shape\n\n\n\n\n\n\nrand\n\n\nabstract fun rand(vararg lengths:\nInt\n): T\nCreates a ND container of uniform 0-1 random samples\n\n\n\n\n\n\nrandn\n\n\nabstract fun randn(vararg lengths:\nInt\n): T\nCreates a ND container of unit-normal random samples\n\n\n\n\n\n\nzeros\n\n\nabstract fun zeros(vararg lengths:\nInt\n): T\nGenerate a zero initialized ND container of the requested shape\n\n\n\n\n\n\n\n\nInheritors\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nNumericalNDArrayFacBase\n\n\nabstract class NumericalNDArrayFacBase<out T> : NumericalNDArrayFactory<T>",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-numerical-n-d-array-factory/index.html#numericalndarrayfactory",
            "text": "interface NumericalNDArrayFactory<out T>  A set of constructors that must be implemented by a koma NDArray backend.\nGeneric parameter is the type of element, i.e. T=NDArray or T=NDArray, etc.",
            "title": "NumericalNDArrayFactory"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-numerical-n-d-array-factory/index.html#functions",
            "text": "Name  Summary      arange  abstract fun arange(start: Double , stop: Double , increment: Double ): T abstract fun arange(start: Int , stop: Int , increment: Int ): T Creates a 1D vector with the first value of  start  and the last value of  stop , with  increment  steps between each value. abstract fun arange(start: Double , stop: Double ): T abstract fun arange(start: Int , stop: Int ): T Creates a 1D vector with the first value of  start  and the last value of  stop , with unit steps between each value.    create  abstract fun create(data: IntRange ): T Creates a 1D vector with initial values pulled from an int range, e.g. 1..45 abstract fun create(data: DoubleArray ): T Creates a 1D vector with initial values pulled from a double array abstract fun create(data: Array < DoubleArray >): T Creates a ND container from an array of arrays (row-major, 2D)    ones  abstract fun ones(vararg lengths: Int ): T Creates a 1 initialized ND container of the requested shape    rand  abstract fun rand(vararg lengths: Int ): T Creates a ND container of uniform 0-1 random samples    randn  abstract fun randn(vararg lengths: Int ): T Creates a ND container of unit-normal random samples    zeros  abstract fun zeros(vararg lengths: Int ): T Generate a zero initialized ND container of the requested shape",
            "title": "Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-numerical-n-d-array-factory/index.html#inheritors",
            "text": "Name  Summary      NumericalNDArrayFacBase  abstract class NumericalNDArrayFacBase<out T> : NumericalNDArrayFactory<T>",
            "title": "Inheritors"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-numerical-n-d-array-factory/ones/index.html",
            "text": "api\n / \nkoma.ndarray\n / \nNumericalNDArrayFactory\n / \nones\n\n\nones\n\n\nabstract fun ones(vararg lengths:\nInt\n): T\n\n\nCreates a 1 initialized ND container of the requested shape",
            "title": "Ones"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-numerical-n-d-array-factory/ones/index.html#ones",
            "text": "abstract fun ones(vararg lengths: Int ): T  Creates a 1 initialized ND container of the requested shape",
            "title": "ones"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-numerical-n-d-array-factory/rand/index.html",
            "text": "api\n / \nkoma.ndarray\n / \nNumericalNDArrayFactory\n / \nrand\n\n\nrand\n\n\nabstract fun rand(vararg lengths:\nInt\n): T\n\n\nCreates a ND container of uniform 0-1 random samples",
            "title": "Rand"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-numerical-n-d-array-factory/rand/index.html#rand",
            "text": "abstract fun rand(vararg lengths: Int ): T  Creates a ND container of uniform 0-1 random samples",
            "title": "rand"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-numerical-n-d-array-factory/randn/index.html",
            "text": "api\n / \nkoma.ndarray\n / \nNumericalNDArrayFactory\n / \nrandn\n\n\nrandn\n\n\nabstract fun randn(vararg lengths:\nInt\n): T\n\n\nCreates a ND container of unit-normal random samples",
            "title": "Randn"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-numerical-n-d-array-factory/randn/index.html#randn",
            "text": "abstract fun randn(vararg lengths: Int ): T  Creates a ND container of unit-normal random samples",
            "title": "randn"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-numerical-n-d-array-factory/zeros/index.html",
            "text": "api\n / \nkoma.ndarray\n / \nNumericalNDArrayFactory\n / \nzeros\n\n\nzeros\n\n\nabstract fun zeros(vararg lengths:\nInt\n): T\n\n\nGenerate a zero initialized ND container of the requested shape",
            "title": "Zeros"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray/-numerical-n-d-array-factory/zeros/index.html#zeros",
            "text": "abstract fun zeros(vararg lengths: Int ): T  Generate a zero initialized ND container of the requested shape",
            "title": "zeros"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.common/index.html",
            "text": "api\n / \nkoma.ndarray.common\n\n\nPackage koma.ndarray.common\n\n\nBase classes for ndarrays\n\n\nTypes\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nNumericalNDArrayFacBase\n\n\nabstract class NumericalNDArrayFacBase<out T> :\nNumericalNDArrayFactory\n<T>",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.common/index.html#package-komandarraycommon",
            "text": "Base classes for ndarrays",
            "title": "Package koma.ndarray.common"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.common/index.html#types",
            "text": "Name  Summary      NumericalNDArrayFacBase  abstract class NumericalNDArrayFacBase<out T> : NumericalNDArrayFactory <T>",
            "title": "Types"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.common/-numerical-n-d-array-fac-base/-init-/index.html",
            "text": "api\n / \nkoma.ndarray.common\n / \nNumericalNDArrayFacBase\n / \n<init>\n\n\n<init>\n\n\nNumericalNDArrayFacBase()",
            "title": " init "
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.common/-numerical-n-d-array-fac-base/-init-/index.html#init",
            "text": "NumericalNDArrayFacBase()",
            "title": "&lt;init&gt;"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.common/-numerical-n-d-array-fac-base/arange/index.html",
            "text": "api\n / \nkoma.ndarray.common\n / \nNumericalNDArrayFacBase\n / \narange\n\n\narange\n\n\nopen fun arange(start:\nDouble\n, stop:\nDouble\n): T\n\n\nOverrides \nNumericalNDArrayFactory.arange\n\n\nopen fun arange(start:\nInt\n, stop:\nInt\n): T\n\n\nOverrides \nNumericalNDArrayFactory.arange\n\n\nCreates a 1D vector with the first value of \nstart\n and the last value of \nstop\n, with unit steps\nbetween each value.\n\n\nopen fun arange(start:\nInt\n, stop:\nInt\n, increment:\nInt\n): T\n\n\nOverrides \nNumericalNDArrayFactory.arange\n\n\nCreates a 1D vector with the first value of \nstart\n and the last value of \nstop\n, with \nincrement\n steps\nbetween each value.",
            "title": "Arange"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.common/-numerical-n-d-array-fac-base/arange/index.html#arange",
            "text": "open fun arange(start: Double , stop: Double ): T  Overrides  NumericalNDArrayFactory.arange  open fun arange(start: Int , stop: Int ): T  Overrides  NumericalNDArrayFactory.arange  Creates a 1D vector with the first value of  start  and the last value of  stop , with unit steps\nbetween each value.  open fun arange(start: Int , stop: Int , increment: Int ): T  Overrides  NumericalNDArrayFactory.arange  Creates a 1D vector with the first value of  start  and the last value of  stop , with  increment  steps\nbetween each value.",
            "title": "arange"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.common/-numerical-n-d-array-fac-base/index.html",
            "text": "api\n / \nkoma.ndarray.common\n / \nNumericalNDArrayFacBase\n\n\nNumericalNDArrayFacBase\n\n\nabstract class NumericalNDArrayFacBase<out T> :\nNumericalNDArrayFactory\n<T>\n\n\nConstructors\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\n<init>\n\n\nNumericalNDArrayFacBase()\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\narange\n\n\nopen fun arange(start:\nDouble\n, stop:\nDouble\n): T\nopen fun arange(start:\nInt\n, stop:\nInt\n): T\nCreates a 1D vector with the first value of \nstart\n and the last value of \nstop\n, with unit steps between each value.\nopen fun arange(start:\nInt\n, stop:\nInt\n, increment:\nInt\n): T\nCreates a 1D vector with the first value of \nstart\n and the last value of \nstop\n, with \nincrement\n steps between each value.\n\n\n\n\n\n\n\n\nInherited Functions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\narange\n\n\nabstract fun arange(start:\nDouble\n, stop:\nDouble\n, increment:\nDouble\n): T\nCreates a 1D vector with the first value of \nstart\n and the last value of \nstop\n, with \nincrement\n steps between each value.\n\n\n\n\n\n\ncreate\n\n\nabstract fun create(data:\nArray\n<\nDoubleArray\n>): T\nCreates a ND container from an array of arrays (row-major, 2D)\nabstract fun create(data:\nDoubleArray\n): T\nCreates a 1D vector with initial values pulled from a double array\nabstract fun create(data:\nIntRange\n): T\nCreates a 1D vector with initial values pulled from an int range, e.g. 1..45\n\n\n\n\n\n\nones\n\n\nabstract fun ones(vararg lengths:\nInt\n): T\nCreates a 1 initialized ND container of the requested shape\n\n\n\n\n\n\nrand\n\n\nabstract fun rand(vararg lengths:\nInt\n): T\nCreates a ND container of uniform 0-1 random samples\n\n\n\n\n\n\nrandn\n\n\nabstract fun randn(vararg lengths:\nInt\n): T\nCreates a ND container of unit-normal random samples\n\n\n\n\n\n\nzeros\n\n\nabstract fun zeros(vararg lengths:\nInt\n): T\nGenerate a zero initialized ND container of the requested shape",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.common/-numerical-n-d-array-fac-base/index.html#numericalndarrayfacbase",
            "text": "abstract class NumericalNDArrayFacBase<out T> : NumericalNDArrayFactory <T>",
            "title": "NumericalNDArrayFacBase"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.common/-numerical-n-d-array-fac-base/index.html#constructors",
            "text": "Name  Summary      <init>  NumericalNDArrayFacBase()",
            "title": "Constructors"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.common/-numerical-n-d-array-fac-base/index.html#functions",
            "text": "Name  Summary      arange  open fun arange(start: Double , stop: Double ): T open fun arange(start: Int , stop: Int ): T Creates a 1D vector with the first value of  start  and the last value of  stop , with unit steps between each value. open fun arange(start: Int , stop: Int , increment: Int ): T Creates a 1D vector with the first value of  start  and the last value of  stop , with  increment  steps between each value.",
            "title": "Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.common/-numerical-n-d-array-fac-base/index.html#inherited-functions",
            "text": "Name  Summary      arange  abstract fun arange(start: Double , stop: Double , increment: Double ): T Creates a 1D vector with the first value of  start  and the last value of  stop , with  increment  steps between each value.    create  abstract fun create(data: Array < DoubleArray >): T Creates a ND container from an array of arrays (row-major, 2D) abstract fun create(data: DoubleArray ): T Creates a 1D vector with initial values pulled from a double array abstract fun create(data: IntRange ): T Creates a 1D vector with initial values pulled from an int range, e.g. 1..45    ones  abstract fun ones(vararg lengths: Int ): T Creates a 1 initialized ND container of the requested shape    rand  abstract fun rand(vararg lengths: Int ): T Creates a ND container of uniform 0-1 random samples    randn  abstract fun randn(vararg lengths: Int ): T Creates a ND container of unit-normal random samples    zeros  abstract fun zeros(vararg lengths: Int ): T Generate a zero initialized ND container of the requested shape",
            "title": "Inherited Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/index.html",
            "text": "api\n / \nkoma.ndarray.default\n\n\nPackage koma.ndarray.default\n\n\nA set of (unoptimized) implementations of NDArrays that run on all platforms\n\n\nTypes\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nDefaultDoubleNDArray\n\n\nclass DefaultDoubleNDArray :\nDefaultNDArray\n<\nDouble\n>,\nNumericalNDArray\n<\nDouble\n>\n\n\n\n\n\n\nDefaultFloatNDArray\n\n\nclass DefaultFloatNDArray :\nDefaultNDArray\n<\nFloat\n>,\nNumericalNDArray\n<\nFloat\n>\n\n\n\n\n\n\nDefaultIntNDArray\n\n\nclass DefaultIntNDArray :\nDefaultNDArray\n<\nInt\n>,\nNumericalNDArray\n<\nInt\n>\n\n\n\n\n\n\nDefaultLongNDArray\n\n\nclass DefaultLongNDArray :\nDefaultNDArray\n<\nLong\n>,\nNumericalNDArray\n<\nLong\n>\n\n\n\n\n\n\nDefaultNDArray\n\n\nopen class DefaultNDArray<T> :\nNDArray\n<T>\nAn (unoptimized) implementation of \nNDArray\n in pure Kotlin, for portability between the different platforms koma supports.\n\n\n\n\n\n\n\n\nExtensions for External Classes\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nkotlin.collections.List\n\n\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\ntoNumerical\n\n\nfun\nNDArray\n<\nDouble\n>.toNumerical():\nNumericalNDArray\n<\nDouble\n>\nfun\nNDArray\n<\nFloat\n>.toNumerical():\nNumericalNDArray\n<\nFloat\n>\nfun\nNDArray\n<\nInt\n>.toNumerical():\nNumericalNDArray\n<\nInt\n>\nfun\nNDArray\n<\nLong\n>.toNumerical():\nNumericalNDArray\n<\nLong\n>\nConverts a regular \nNDArray\n with the same primitive type to a NumericalNDArray, attempting to avoid a copy when possible",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/index.html#package-komandarraydefault",
            "text": "A set of (unoptimized) implementations of NDArrays that run on all platforms",
            "title": "Package koma.ndarray.default"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/index.html#types",
            "text": "Name  Summary      DefaultDoubleNDArray  class DefaultDoubleNDArray : DefaultNDArray < Double >, NumericalNDArray < Double >    DefaultFloatNDArray  class DefaultFloatNDArray : DefaultNDArray < Float >, NumericalNDArray < Float >    DefaultIntNDArray  class DefaultIntNDArray : DefaultNDArray < Int >, NumericalNDArray < Int >    DefaultLongNDArray  class DefaultLongNDArray : DefaultNDArray < Long >, NumericalNDArray < Long >    DefaultNDArray  open class DefaultNDArray<T> : NDArray <T> An (unoptimized) implementation of  NDArray  in pure Kotlin, for portability between the different platforms koma supports.",
            "title": "Types"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/index.html#extensions-for-external-classes",
            "text": "Name  Summary      kotlin.collections.List",
            "title": "Extensions for External Classes"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/index.html#functions",
            "text": "Name  Summary      toNumerical  fun NDArray < Double >.toNumerical(): NumericalNDArray < Double > fun NDArray < Float >.toNumerical(): NumericalNDArray < Float > fun NDArray < Int >.toNumerical(): NumericalNDArray < Int > fun NDArray < Long >.toNumerical(): NumericalNDArray < Long > Converts a regular  NDArray  with the same primitive type to a NumericalNDArray, attempting to avoid a copy when possible",
            "title": "Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/to-numerical/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \ntoNumerical\n\n\ntoNumerical\n\n\nfun\nNDArray\n<\nDouble\n>.toNumerical():\nNumericalNDArray\n<\nDouble\n>\n\n\nfun\nNDArray\n<\nFloat\n>.toNumerical():\nNumericalNDArray\n<\nFloat\n>\n\n\nfun\nNDArray\n<\nInt\n>.toNumerical():\nNumericalNDArray\n<\nInt\n>\n\n\nfun\nNDArray\n<\nLong\n>.toNumerical():\nNumericalNDArray\n<\nLong\n>\n\n\nConverts a regular \nNDArray\n with the same primitive type to\na NumericalNDArray, attempting to avoid a copy when possible",
            "title": "To numerical"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/to-numerical/index.html#tonumerical",
            "text": "fun NDArray < Double >.toNumerical(): NumericalNDArray < Double >  fun NDArray < Float >.toNumerical(): NumericalNDArray < Float >  fun NDArray < Int >.toNumerical(): NumericalNDArray < Int >  fun NDArray < Long >.toNumerical(): NumericalNDArray < Long >  Converts a regular  NDArray  with the same primitive type to\na NumericalNDArray, attempting to avoid a copy when possible",
            "title": "toNumerical"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-double-n-d-array/-init-/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultDoubleNDArray\n / \n<init>\n\n\n<init>\n\n\nDefaultDoubleNDArray(vararg shape:\nInt\n, init: (\nIntArray\n) ->\nDouble\n)",
            "title": " init "
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-double-n-d-array/-init-/index.html#init",
            "text": "DefaultDoubleNDArray(vararg shape: Int , init: ( IntArray ) -> Double )",
            "title": "&lt;init&gt;"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-double-n-d-array/copy/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultDoubleNDArray\n / \ncopy\n\n\ncopy\n\n\nfun copy():\nNDArray\n<\nDouble\n>\n\n\nOverrides \nDefaultNDArray.copy\n\n\nOverrides \nNDArray.copy",
            "title": "Copy"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-double-n-d-array/copy/index.html#copy",
            "text": "fun copy(): NDArray < Double >  Overrides  DefaultNDArray.copy  Overrides  NDArray.copy",
            "title": "copy"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-double-n-d-array/div/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultDoubleNDArray\n / \ndiv\n\n\ndiv\n\n\nfun div(other:\nDouble\n):\nNumericalNDArray\n<\nDouble\n>",
            "title": "Div"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-double-n-d-array/div/index.html#div",
            "text": "fun div(other: Double ): NumericalNDArray < Double >",
            "title": "div"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-double-n-d-array/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultDoubleNDArray\n\n\nDefaultDoubleNDArray\n\n\nclass DefaultDoubleNDArray :\nDefaultNDArray\n<\nDouble\n>,\nNumericalNDArray\n<\nDouble\n>\n\n\nConstructors\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\n<init>\n\n\nDefaultDoubleNDArray(vararg shape:\nInt\n, init: (\nIntArray\n) ->\nDouble\n)\n\n\n\n\n\n\n\n\nInherited Properties\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nshape\n\n\nvararg val shape:\nIntArray\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\ncopy\n\n\nfun copy():\nNDArray\n<\nDouble\n>\n\n\n\n\n\n\ndiv\n\n\nfun div(other:\nDouble\n):\nNumericalNDArray\n<\nDouble\n>\n\n\n\n\n\n\nminus\n\n\nfun minus(other:\nDouble\n):\nNumericalNDArray\n<\nDouble\n>\nfun minus(other:\nNDArray\n<\nDouble\n>):\nNumericalNDArray\n<\nDouble\n>\n\n\n\n\n\n\nplus\n\n\nfun plus(other:\nDouble\n):\nNumericalNDArray\n<\nDouble\n>\nfun plus(other:\nNDArray\n<\nDouble\n>):\nNumericalNDArray\n<\nDouble\n>\n\n\n\n\n\n\npow\n\n\nfun pow(exponent:\nInt\n):\nNumericalNDArray\n<\nDouble\n>\n\n\n\n\n\n\ntimes\n\n\nfun times(other:\nNDArray\n<\nDouble\n>):\nNumericalNDArray\n<\nDouble\n>\nfun times(other:\nDouble\n):\nNumericalNDArray\n<\nDouble\n>\n\n\n\n\n\n\nunaryMinus\n\n\nfun unaryMinus():\nNumericalNDArray\n<\nDouble\n>\n\n\n\n\n\n\n\n\nInherited Functions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\ncheckIndices\n\n\nfun checkIndices(indices:\nIntArray\n):\nUnit\n\n\n\n\n\n\nget\n\n\nopen fun get(vararg indices:\nInt\n): T\nopen fun get(vararg indices:\nIntRange\n):\nNDArray\n<T>\n\n\n\n\n\n\ngetBaseArray\n\n\nopen fun getBaseArray():\nAny\n\n\n\n\n\n\ngetLinear\n\n\nopen fun getLinear(index:\nInt\n): T\n\n\n\n\n\n\nshape\n\n\nopen fun shape():\nList\n<\nInt\n>\n\n\n\n\n\n\n\n\nExtension Functions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\ntoNumerical\n\n\nfun\nNDArray\n<\nDouble\n>.toNumerical():\nNumericalNDArray\n<\nDouble\n>\nConverts a regular \nNDArray\n with the same primitive type to a NumericalNDArray, attempting to avoid a copy when possible",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-double-n-d-array/index.html#defaultdoublendarray",
            "text": "class DefaultDoubleNDArray : DefaultNDArray < Double >, NumericalNDArray < Double >",
            "title": "DefaultDoubleNDArray"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-double-n-d-array/index.html#constructors",
            "text": "Name  Summary      <init>  DefaultDoubleNDArray(vararg shape: Int , init: ( IntArray ) -> Double )",
            "title": "Constructors"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-double-n-d-array/index.html#inherited-properties",
            "text": "Name  Summary      shape  vararg val shape: IntArray",
            "title": "Inherited Properties"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-double-n-d-array/index.html#functions",
            "text": "Name  Summary      copy  fun copy(): NDArray < Double >    div  fun div(other: Double ): NumericalNDArray < Double >    minus  fun minus(other: Double ): NumericalNDArray < Double > fun minus(other: NDArray < Double >): NumericalNDArray < Double >    plus  fun plus(other: Double ): NumericalNDArray < Double > fun plus(other: NDArray < Double >): NumericalNDArray < Double >    pow  fun pow(exponent: Int ): NumericalNDArray < Double >    times  fun times(other: NDArray < Double >): NumericalNDArray < Double > fun times(other: Double ): NumericalNDArray < Double >    unaryMinus  fun unaryMinus(): NumericalNDArray < Double >",
            "title": "Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-double-n-d-array/index.html#inherited-functions",
            "text": "Name  Summary      checkIndices  fun checkIndices(indices: IntArray ): Unit    get  open fun get(vararg indices: Int ): T open fun get(vararg indices: IntRange ): NDArray <T>    getBaseArray  open fun getBaseArray(): Any    getLinear  open fun getLinear(index: Int ): T    shape  open fun shape(): List < Int >",
            "title": "Inherited Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-double-n-d-array/index.html#extension-functions",
            "text": "Name  Summary      toNumerical  fun NDArray < Double >.toNumerical(): NumericalNDArray < Double > Converts a regular  NDArray  with the same primitive type to a NumericalNDArray, attempting to avoid a copy when possible",
            "title": "Extension Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-double-n-d-array/minus/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultDoubleNDArray\n / \nminus\n\n\nminus\n\n\nfun minus(other:\nDouble\n):\nNumericalNDArray\n<\nDouble\n>\n\n\nfun minus(other:\nNDArray\n<\nDouble\n>):\nNumericalNDArray\n<\nDouble\n>",
            "title": "Minus"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-double-n-d-array/minus/index.html#minus",
            "text": "fun minus(other: Double ): NumericalNDArray < Double >  fun minus(other: NDArray < Double >): NumericalNDArray < Double >",
            "title": "minus"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-double-n-d-array/plus/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultDoubleNDArray\n / \nplus\n\n\nplus\n\n\nfun plus(other:\nDouble\n):\nNumericalNDArray\n<\nDouble\n>\n\n\nfun plus(other:\nNDArray\n<\nDouble\n>):\nNumericalNDArray\n<\nDouble\n>",
            "title": "Plus"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-double-n-d-array/plus/index.html#plus",
            "text": "fun plus(other: Double ): NumericalNDArray < Double >  fun plus(other: NDArray < Double >): NumericalNDArray < Double >",
            "title": "plus"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-double-n-d-array/pow/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultDoubleNDArray\n / \npow\n\n\npow\n\n\nfun pow(exponent:\nInt\n):\nNumericalNDArray\n<\nDouble\n>\n\n\nOverrides \nNumericalNDArray.pow",
            "title": "Pow"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-double-n-d-array/pow/index.html#pow",
            "text": "fun pow(exponent: Int ): NumericalNDArray < Double >  Overrides  NumericalNDArray.pow",
            "title": "pow"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-double-n-d-array/times/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultDoubleNDArray\n / \ntimes\n\n\ntimes\n\n\nfun times(other:\nNDArray\n<\nDouble\n>):\nNumericalNDArray\n<\nDouble\n>\n\n\nfun times(other:\nDouble\n):\nNumericalNDArray\n<\nDouble\n>",
            "title": "Times"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-double-n-d-array/times/index.html#times",
            "text": "fun times(other: NDArray < Double >): NumericalNDArray < Double >  fun times(other: Double ): NumericalNDArray < Double >",
            "title": "times"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-double-n-d-array/unary-minus/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultDoubleNDArray\n / \nunaryMinus\n\n\nunaryMinus\n\n\nfun unaryMinus():\nNumericalNDArray\n<\nDouble\n>\n\n\nOverrides \nNumericalNDArray.unaryMinus",
            "title": "Unary minus"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-double-n-d-array/unary-minus/index.html#unaryminus",
            "text": "fun unaryMinus(): NumericalNDArray < Double >  Overrides  NumericalNDArray.unaryMinus",
            "title": "unaryMinus"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-float-n-d-array/-init-/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultFloatNDArray\n / \n<init>\n\n\n<init>\n\n\nDefaultFloatNDArray(vararg shape:\nInt\n, init: (\nIntArray\n) ->\nFloat\n)",
            "title": " init "
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-float-n-d-array/-init-/index.html#init",
            "text": "DefaultFloatNDArray(vararg shape: Int , init: ( IntArray ) -> Float )",
            "title": "&lt;init&gt;"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-float-n-d-array/copy/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultFloatNDArray\n / \ncopy\n\n\ncopy\n\n\nfun copy():\nNDArray\n<\nFloat\n>\n\n\nOverrides \nDefaultNDArray.copy\n\n\nOverrides \nNDArray.copy",
            "title": "Copy"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-float-n-d-array/copy/index.html#copy",
            "text": "fun copy(): NDArray < Float >  Overrides  DefaultNDArray.copy  Overrides  NDArray.copy",
            "title": "copy"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-float-n-d-array/div/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultFloatNDArray\n / \ndiv\n\n\ndiv\n\n\nfun div(other:\nFloat\n):\nNumericalNDArray\n<\nFloat\n>",
            "title": "Div"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-float-n-d-array/div/index.html#div",
            "text": "fun div(other: Float ): NumericalNDArray < Float >",
            "title": "div"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-float-n-d-array/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultFloatNDArray\n\n\nDefaultFloatNDArray\n\n\nclass DefaultFloatNDArray :\nDefaultNDArray\n<\nFloat\n>,\nNumericalNDArray\n<\nFloat\n>\n\n\nConstructors\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\n<init>\n\n\nDefaultFloatNDArray(vararg shape:\nInt\n, init: (\nIntArray\n) ->\nFloat\n)\n\n\n\n\n\n\n\n\nInherited Properties\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nshape\n\n\nvararg val shape:\nIntArray\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\ncopy\n\n\nfun copy():\nNDArray\n<\nFloat\n>\n\n\n\n\n\n\ndiv\n\n\nfun div(other:\nFloat\n):\nNumericalNDArray\n<\nFloat\n>\n\n\n\n\n\n\nminus\n\n\nfun minus(other:\nFloat\n):\nNumericalNDArray\n<\nFloat\n>\nfun minus(other:\nNDArray\n<\nFloat\n>):\nNumericalNDArray\n<\nFloat\n>\n\n\n\n\n\n\nplus\n\n\nfun plus(other:\nFloat\n):\nNumericalNDArray\n<\nFloat\n>\nfun plus(other:\nNDArray\n<\nFloat\n>):\nNumericalNDArray\n<\nFloat\n>\n\n\n\n\n\n\npow\n\n\nfun pow(exponent:\nInt\n):\nNumericalNDArray\n<\nFloat\n>\n\n\n\n\n\n\ntimes\n\n\nfun times(other:\nNDArray\n<\nFloat\n>):\nNumericalNDArray\n<\nFloat\n>\nfun times(other:\nFloat\n):\nNumericalNDArray\n<\nFloat\n>\n\n\n\n\n\n\nunaryMinus\n\n\nfun unaryMinus():\nNumericalNDArray\n<\nFloat\n>\n\n\n\n\n\n\n\n\nInherited Functions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\ncheckIndices\n\n\nfun checkIndices(indices:\nIntArray\n):\nUnit\n\n\n\n\n\n\nget\n\n\nopen fun get(vararg indices:\nInt\n): T\nopen fun get(vararg indices:\nIntRange\n):\nNDArray\n<T>\n\n\n\n\n\n\ngetBaseArray\n\n\nopen fun getBaseArray():\nAny\n\n\n\n\n\n\ngetLinear\n\n\nopen fun getLinear(index:\nInt\n): T\n\n\n\n\n\n\nshape\n\n\nopen fun shape():\nList\n<\nInt\n>\n\n\n\n\n\n\n\n\nExtension Functions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\ntoNumerical\n\n\nfun\nNDArray\n<\nFloat\n>.toNumerical():\nNumericalNDArray\n<\nFloat\n>\nConverts a regular \nNDArray\n with the same primitive type to a NumericalNDArray, attempting to avoid a copy when possible",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-float-n-d-array/index.html#defaultfloatndarray",
            "text": "class DefaultFloatNDArray : DefaultNDArray < Float >, NumericalNDArray < Float >",
            "title": "DefaultFloatNDArray"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-float-n-d-array/index.html#constructors",
            "text": "Name  Summary      <init>  DefaultFloatNDArray(vararg shape: Int , init: ( IntArray ) -> Float )",
            "title": "Constructors"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-float-n-d-array/index.html#inherited-properties",
            "text": "Name  Summary      shape  vararg val shape: IntArray",
            "title": "Inherited Properties"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-float-n-d-array/index.html#functions",
            "text": "Name  Summary      copy  fun copy(): NDArray < Float >    div  fun div(other: Float ): NumericalNDArray < Float >    minus  fun minus(other: Float ): NumericalNDArray < Float > fun minus(other: NDArray < Float >): NumericalNDArray < Float >    plus  fun plus(other: Float ): NumericalNDArray < Float > fun plus(other: NDArray < Float >): NumericalNDArray < Float >    pow  fun pow(exponent: Int ): NumericalNDArray < Float >    times  fun times(other: NDArray < Float >): NumericalNDArray < Float > fun times(other: Float ): NumericalNDArray < Float >    unaryMinus  fun unaryMinus(): NumericalNDArray < Float >",
            "title": "Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-float-n-d-array/index.html#inherited-functions",
            "text": "Name  Summary      checkIndices  fun checkIndices(indices: IntArray ): Unit    get  open fun get(vararg indices: Int ): T open fun get(vararg indices: IntRange ): NDArray <T>    getBaseArray  open fun getBaseArray(): Any    getLinear  open fun getLinear(index: Int ): T    shape  open fun shape(): List < Int >",
            "title": "Inherited Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-float-n-d-array/index.html#extension-functions",
            "text": "Name  Summary      toNumerical  fun NDArray < Float >.toNumerical(): NumericalNDArray < Float > Converts a regular  NDArray  with the same primitive type to a NumericalNDArray, attempting to avoid a copy when possible",
            "title": "Extension Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-float-n-d-array/minus/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultFloatNDArray\n / \nminus\n\n\nminus\n\n\nfun minus(other:\nFloat\n):\nNumericalNDArray\n<\nFloat\n>\n\n\nfun minus(other:\nNDArray\n<\nFloat\n>):\nNumericalNDArray\n<\nFloat\n>",
            "title": "Minus"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-float-n-d-array/minus/index.html#minus",
            "text": "fun minus(other: Float ): NumericalNDArray < Float >  fun minus(other: NDArray < Float >): NumericalNDArray < Float >",
            "title": "minus"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-float-n-d-array/plus/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultFloatNDArray\n / \nplus\n\n\nplus\n\n\nfun plus(other:\nFloat\n):\nNumericalNDArray\n<\nFloat\n>\n\n\nfun plus(other:\nNDArray\n<\nFloat\n>):\nNumericalNDArray\n<\nFloat\n>",
            "title": "Plus"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-float-n-d-array/plus/index.html#plus",
            "text": "fun plus(other: Float ): NumericalNDArray < Float >  fun plus(other: NDArray < Float >): NumericalNDArray < Float >",
            "title": "plus"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-float-n-d-array/pow/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultFloatNDArray\n / \npow\n\n\npow\n\n\nfun pow(exponent:\nInt\n):\nNumericalNDArray\n<\nFloat\n>\n\n\nOverrides \nNumericalNDArray.pow",
            "title": "Pow"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-float-n-d-array/pow/index.html#pow",
            "text": "fun pow(exponent: Int ): NumericalNDArray < Float >  Overrides  NumericalNDArray.pow",
            "title": "pow"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-float-n-d-array/times/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultFloatNDArray\n / \ntimes\n\n\ntimes\n\n\nfun times(other:\nNDArray\n<\nFloat\n>):\nNumericalNDArray\n<\nFloat\n>\n\n\nfun times(other:\nFloat\n):\nNumericalNDArray\n<\nFloat\n>",
            "title": "Times"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-float-n-d-array/times/index.html#times",
            "text": "fun times(other: NDArray < Float >): NumericalNDArray < Float >  fun times(other: Float ): NumericalNDArray < Float >",
            "title": "times"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-float-n-d-array/unary-minus/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultFloatNDArray\n / \nunaryMinus\n\n\nunaryMinus\n\n\nfun unaryMinus():\nNumericalNDArray\n<\nFloat\n>\n\n\nOverrides \nNumericalNDArray.unaryMinus",
            "title": "Unary minus"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-float-n-d-array/unary-minus/index.html#unaryminus",
            "text": "fun unaryMinus(): NumericalNDArray < Float >  Overrides  NumericalNDArray.unaryMinus",
            "title": "unaryMinus"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-int-n-d-array/-init-/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultIntNDArray\n / \n<init>\n\n\n<init>\n\n\nDefaultIntNDArray(vararg shape:\nInt\n, init: (\nIntArray\n) ->\nInt\n)",
            "title": " init "
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-int-n-d-array/-init-/index.html#init",
            "text": "DefaultIntNDArray(vararg shape: Int , init: ( IntArray ) -> Int )",
            "title": "&lt;init&gt;"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-int-n-d-array/copy/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultIntNDArray\n / \ncopy\n\n\ncopy\n\n\nfun copy():\nNDArray\n<\nInt\n>\n\n\nOverrides \nDefaultNDArray.copy\n\n\nOverrides \nNDArray.copy",
            "title": "Copy"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-int-n-d-array/copy/index.html#copy",
            "text": "fun copy(): NDArray < Int >  Overrides  DefaultNDArray.copy  Overrides  NDArray.copy",
            "title": "copy"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-int-n-d-array/div/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultIntNDArray\n / \ndiv\n\n\ndiv\n\n\nfun div(other:\nInt\n):\nNumericalNDArray\n<\nInt\n>",
            "title": "Div"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-int-n-d-array/div/index.html#div",
            "text": "fun div(other: Int ): NumericalNDArray < Int >",
            "title": "div"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-int-n-d-array/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultIntNDArray\n\n\nDefaultIntNDArray\n\n\nclass DefaultIntNDArray :\nDefaultNDArray\n<\nInt\n>,\nNumericalNDArray\n<\nInt\n>\n\n\nConstructors\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\n<init>\n\n\nDefaultIntNDArray(vararg shape:\nInt\n, init: (\nIntArray\n) ->\nInt\n)\n\n\n\n\n\n\n\n\nInherited Properties\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nshape\n\n\nvararg val shape:\nIntArray\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\ncopy\n\n\nfun copy():\nNDArray\n<\nInt\n>\n\n\n\n\n\n\ndiv\n\n\nfun div(other:\nInt\n):\nNumericalNDArray\n<\nInt\n>\n\n\n\n\n\n\nminus\n\n\nfun minus(other:\nInt\n):\nNumericalNDArray\n<\nInt\n>\nfun minus(other:\nNDArray\n<\nInt\n>):\nNumericalNDArray\n<\nInt\n>\n\n\n\n\n\n\nplus\n\n\nfun plus(other:\nInt\n):\nNumericalNDArray\n<\nInt\n>\nfun plus(other:\nNDArray\n<\nInt\n>):\nNumericalNDArray\n<\nInt\n>\n\n\n\n\n\n\npow\n\n\nfun pow(exponent:\nInt\n):\nNumericalNDArray\n<\nInt\n>\n\n\n\n\n\n\ntimes\n\n\nfun times(other:\nNDArray\n<\nInt\n>):\nNumericalNDArray\n<\nInt\n>\nfun times(other:\nInt\n):\nNumericalNDArray\n<\nInt\n>\n\n\n\n\n\n\nunaryMinus\n\n\nfun unaryMinus():\nNumericalNDArray\n<\nInt\n>\n\n\n\n\n\n\n\n\nInherited Functions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\ncheckIndices\n\n\nfun checkIndices(indices:\nIntArray\n):\nUnit\n\n\n\n\n\n\nget\n\n\nopen fun get(vararg indices:\nInt\n): T\nopen fun get(vararg indices:\nIntRange\n):\nNDArray\n<T>\n\n\n\n\n\n\ngetBaseArray\n\n\nopen fun getBaseArray():\nAny\n\n\n\n\n\n\ngetLinear\n\n\nopen fun getLinear(index:\nInt\n): T\n\n\n\n\n\n\nshape\n\n\nopen fun shape():\nList\n<\nInt\n>\n\n\n\n\n\n\n\n\nExtension Functions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\ntoNumerical\n\n\nfun\nNDArray\n<\nInt\n>.toNumerical():\nNumericalNDArray\n<\nInt\n>\nConverts a regular \nNDArray\n with the same primitive type to a NumericalNDArray, attempting to avoid a copy when possible",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-int-n-d-array/index.html#defaultintndarray",
            "text": "class DefaultIntNDArray : DefaultNDArray < Int >, NumericalNDArray < Int >",
            "title": "DefaultIntNDArray"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-int-n-d-array/index.html#constructors",
            "text": "Name  Summary      <init>  DefaultIntNDArray(vararg shape: Int , init: ( IntArray ) -> Int )",
            "title": "Constructors"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-int-n-d-array/index.html#inherited-properties",
            "text": "Name  Summary      shape  vararg val shape: IntArray",
            "title": "Inherited Properties"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-int-n-d-array/index.html#functions",
            "text": "Name  Summary      copy  fun copy(): NDArray < Int >    div  fun div(other: Int ): NumericalNDArray < Int >    minus  fun minus(other: Int ): NumericalNDArray < Int > fun minus(other: NDArray < Int >): NumericalNDArray < Int >    plus  fun plus(other: Int ): NumericalNDArray < Int > fun plus(other: NDArray < Int >): NumericalNDArray < Int >    pow  fun pow(exponent: Int ): NumericalNDArray < Int >    times  fun times(other: NDArray < Int >): NumericalNDArray < Int > fun times(other: Int ): NumericalNDArray < Int >    unaryMinus  fun unaryMinus(): NumericalNDArray < Int >",
            "title": "Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-int-n-d-array/index.html#inherited-functions",
            "text": "Name  Summary      checkIndices  fun checkIndices(indices: IntArray ): Unit    get  open fun get(vararg indices: Int ): T open fun get(vararg indices: IntRange ): NDArray <T>    getBaseArray  open fun getBaseArray(): Any    getLinear  open fun getLinear(index: Int ): T    shape  open fun shape(): List < Int >",
            "title": "Inherited Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-int-n-d-array/index.html#extension-functions",
            "text": "Name  Summary      toNumerical  fun NDArray < Int >.toNumerical(): NumericalNDArray < Int > Converts a regular  NDArray  with the same primitive type to a NumericalNDArray, attempting to avoid a copy when possible",
            "title": "Extension Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-int-n-d-array/minus/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultIntNDArray\n / \nminus\n\n\nminus\n\n\nfun minus(other:\nInt\n):\nNumericalNDArray\n<\nInt\n>\n\n\nfun minus(other:\nNDArray\n<\nInt\n>):\nNumericalNDArray\n<\nInt\n>",
            "title": "Minus"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-int-n-d-array/minus/index.html#minus",
            "text": "fun minus(other: Int ): NumericalNDArray < Int >  fun minus(other: NDArray < Int >): NumericalNDArray < Int >",
            "title": "minus"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-int-n-d-array/plus/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultIntNDArray\n / \nplus\n\n\nplus\n\n\nfun plus(other:\nInt\n):\nNumericalNDArray\n<\nInt\n>\n\n\nfun plus(other:\nNDArray\n<\nInt\n>):\nNumericalNDArray\n<\nInt\n>",
            "title": "Plus"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-int-n-d-array/plus/index.html#plus",
            "text": "fun plus(other: Int ): NumericalNDArray < Int >  fun plus(other: NDArray < Int >): NumericalNDArray < Int >",
            "title": "plus"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-int-n-d-array/pow/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultIntNDArray\n / \npow\n\n\npow\n\n\nfun pow(exponent:\nInt\n):\nNumericalNDArray\n<\nInt\n>\n\n\nOverrides \nNumericalNDArray.pow",
            "title": "Pow"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-int-n-d-array/pow/index.html#pow",
            "text": "fun pow(exponent: Int ): NumericalNDArray < Int >  Overrides  NumericalNDArray.pow",
            "title": "pow"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-int-n-d-array/times/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultIntNDArray\n / \ntimes\n\n\ntimes\n\n\nfun times(other:\nNDArray\n<\nInt\n>):\nNumericalNDArray\n<\nInt\n>\n\n\nfun times(other:\nInt\n):\nNumericalNDArray\n<\nInt\n>",
            "title": "Times"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-int-n-d-array/times/index.html#times",
            "text": "fun times(other: NDArray < Int >): NumericalNDArray < Int >  fun times(other: Int ): NumericalNDArray < Int >",
            "title": "times"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-int-n-d-array/unary-minus/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultIntNDArray\n / \nunaryMinus\n\n\nunaryMinus\n\n\nfun unaryMinus():\nNumericalNDArray\n<\nInt\n>\n\n\nOverrides \nNumericalNDArray.unaryMinus",
            "title": "Unary minus"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-int-n-d-array/unary-minus/index.html#unaryminus",
            "text": "fun unaryMinus(): NumericalNDArray < Int >  Overrides  NumericalNDArray.unaryMinus",
            "title": "unaryMinus"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-long-n-d-array/-init-/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultLongNDArray\n / \n<init>\n\n\n<init>\n\n\nDefaultLongNDArray(vararg shape:\nInt\n, init: (\nIntArray\n) ->\nLong\n)",
            "title": " init "
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-long-n-d-array/-init-/index.html#init",
            "text": "DefaultLongNDArray(vararg shape: Int , init: ( IntArray ) -> Long )",
            "title": "&lt;init&gt;"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-long-n-d-array/copy/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultLongNDArray\n / \ncopy\n\n\ncopy\n\n\nfun copy():\nNDArray\n<\nLong\n>\n\n\nOverrides \nDefaultNDArray.copy\n\n\nOverrides \nNDArray.copy",
            "title": "Copy"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-long-n-d-array/copy/index.html#copy",
            "text": "fun copy(): NDArray < Long >  Overrides  DefaultNDArray.copy  Overrides  NDArray.copy",
            "title": "copy"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-long-n-d-array/div/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultLongNDArray\n / \ndiv\n\n\ndiv\n\n\nfun div(other:\nLong\n):\nNumericalNDArray\n<\nLong\n>",
            "title": "Div"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-long-n-d-array/div/index.html#div",
            "text": "fun div(other: Long ): NumericalNDArray < Long >",
            "title": "div"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-long-n-d-array/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultLongNDArray\n\n\nDefaultLongNDArray\n\n\nclass DefaultLongNDArray :\nDefaultNDArray\n<\nLong\n>,\nNumericalNDArray\n<\nLong\n>\n\n\nConstructors\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\n<init>\n\n\nDefaultLongNDArray(vararg shape:\nInt\n, init: (\nIntArray\n) ->\nLong\n)\n\n\n\n\n\n\n\n\nInherited Properties\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nshape\n\n\nvararg val shape:\nIntArray\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\ncopy\n\n\nfun copy():\nNDArray\n<\nLong\n>\n\n\n\n\n\n\ndiv\n\n\nfun div(other:\nLong\n):\nNumericalNDArray\n<\nLong\n>\n\n\n\n\n\n\nminus\n\n\nfun minus(other:\nLong\n):\nNumericalNDArray\n<\nLong\n>\nfun minus(other:\nNDArray\n<\nLong\n>):\nNumericalNDArray\n<\nLong\n>\n\n\n\n\n\n\nplus\n\n\nfun plus(other:\nLong\n):\nNumericalNDArray\n<\nLong\n>\nfun plus(other:\nNDArray\n<\nLong\n>):\nNumericalNDArray\n<\nLong\n>\n\n\n\n\n\n\npow\n\n\nfun pow(exponent:\nInt\n):\nNumericalNDArray\n<\nLong\n>\n\n\n\n\n\n\ntimes\n\n\nfun times(other:\nNDArray\n<\nLong\n>):\nNumericalNDArray\n<\nLong\n>\nfun times(other:\nLong\n):\nNumericalNDArray\n<\nLong\n>\n\n\n\n\n\n\nunaryMinus\n\n\nfun unaryMinus():\nNumericalNDArray\n<\nLong\n>\n\n\n\n\n\n\n\n\nInherited Functions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\ncheckIndices\n\n\nfun checkIndices(indices:\nIntArray\n):\nUnit\n\n\n\n\n\n\nget\n\n\nopen fun get(vararg indices:\nIntRange\n):\nNDArray\n<T>\nopen fun get(vararg indices:\nInt\n): T\n\n\n\n\n\n\ngetBaseArray\n\n\nopen fun getBaseArray():\nAny\n\n\n\n\n\n\ngetLinear\n\n\nopen fun getLinear(index:\nInt\n): T\n\n\n\n\n\n\nshape\n\n\nopen fun shape():\nList\n<\nInt\n>\n\n\n\n\n\n\n\n\nExtension Functions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\ntoNumerical\n\n\nfun\nNDArray\n<\nLong\n>.toNumerical():\nNumericalNDArray\n<\nLong\n>\nConverts a regular \nNDArray\n with the same primitive type to a NumericalNDArray, attempting to avoid a copy when possible",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-long-n-d-array/index.html#defaultlongndarray",
            "text": "class DefaultLongNDArray : DefaultNDArray < Long >, NumericalNDArray < Long >",
            "title": "DefaultLongNDArray"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-long-n-d-array/index.html#constructors",
            "text": "Name  Summary      <init>  DefaultLongNDArray(vararg shape: Int , init: ( IntArray ) -> Long )",
            "title": "Constructors"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-long-n-d-array/index.html#inherited-properties",
            "text": "Name  Summary      shape  vararg val shape: IntArray",
            "title": "Inherited Properties"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-long-n-d-array/index.html#functions",
            "text": "Name  Summary      copy  fun copy(): NDArray < Long >    div  fun div(other: Long ): NumericalNDArray < Long >    minus  fun minus(other: Long ): NumericalNDArray < Long > fun minus(other: NDArray < Long >): NumericalNDArray < Long >    plus  fun plus(other: Long ): NumericalNDArray < Long > fun plus(other: NDArray < Long >): NumericalNDArray < Long >    pow  fun pow(exponent: Int ): NumericalNDArray < Long >    times  fun times(other: NDArray < Long >): NumericalNDArray < Long > fun times(other: Long ): NumericalNDArray < Long >    unaryMinus  fun unaryMinus(): NumericalNDArray < Long >",
            "title": "Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-long-n-d-array/index.html#inherited-functions",
            "text": "Name  Summary      checkIndices  fun checkIndices(indices: IntArray ): Unit    get  open fun get(vararg indices: IntRange ): NDArray <T> open fun get(vararg indices: Int ): T    getBaseArray  open fun getBaseArray(): Any    getLinear  open fun getLinear(index: Int ): T    shape  open fun shape(): List < Int >",
            "title": "Inherited Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-long-n-d-array/index.html#extension-functions",
            "text": "Name  Summary      toNumerical  fun NDArray < Long >.toNumerical(): NumericalNDArray < Long > Converts a regular  NDArray  with the same primitive type to a NumericalNDArray, attempting to avoid a copy when possible",
            "title": "Extension Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-long-n-d-array/minus/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultLongNDArray\n / \nminus\n\n\nminus\n\n\nfun minus(other:\nLong\n):\nNumericalNDArray\n<\nLong\n>\n\n\nfun minus(other:\nNDArray\n<\nLong\n>):\nNumericalNDArray\n<\nLong\n>",
            "title": "Minus"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-long-n-d-array/minus/index.html#minus",
            "text": "fun minus(other: Long ): NumericalNDArray < Long >  fun minus(other: NDArray < Long >): NumericalNDArray < Long >",
            "title": "minus"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-long-n-d-array/plus/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultLongNDArray\n / \nplus\n\n\nplus\n\n\nfun plus(other:\nLong\n):\nNumericalNDArray\n<\nLong\n>\n\n\nfun plus(other:\nNDArray\n<\nLong\n>):\nNumericalNDArray\n<\nLong\n>",
            "title": "Plus"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-long-n-d-array/plus/index.html#plus",
            "text": "fun plus(other: Long ): NumericalNDArray < Long >  fun plus(other: NDArray < Long >): NumericalNDArray < Long >",
            "title": "plus"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-long-n-d-array/pow/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultLongNDArray\n / \npow\n\n\npow\n\n\nfun pow(exponent:\nInt\n):\nNumericalNDArray\n<\nLong\n>\n\n\nOverrides \nNumericalNDArray.pow",
            "title": "Pow"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-long-n-d-array/pow/index.html#pow",
            "text": "fun pow(exponent: Int ): NumericalNDArray < Long >  Overrides  NumericalNDArray.pow",
            "title": "pow"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-long-n-d-array/times/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultLongNDArray\n / \ntimes\n\n\ntimes\n\n\nfun times(other:\nNDArray\n<\nLong\n>):\nNumericalNDArray\n<\nLong\n>\n\n\nfun times(other:\nLong\n):\nNumericalNDArray\n<\nLong\n>",
            "title": "Times"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-long-n-d-array/times/index.html#times",
            "text": "fun times(other: NDArray < Long >): NumericalNDArray < Long >  fun times(other: Long ): NumericalNDArray < Long >",
            "title": "times"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-long-n-d-array/unary-minus/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultLongNDArray\n / \nunaryMinus\n\n\nunaryMinus\n\n\nfun unaryMinus():\nNumericalNDArray\n<\nLong\n>\n\n\nOverrides \nNumericalNDArray.unaryMinus",
            "title": "Unary minus"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-long-n-d-array/unary-minus/index.html#unaryminus",
            "text": "fun unaryMinus(): NumericalNDArray < Long >  Overrides  NumericalNDArray.unaryMinus",
            "title": "unaryMinus"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-n-d-array/-init-/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultNDArray\n / \n<init>\n\n\n<init>\n\n\nDefaultNDArray(vararg shape:\nInt\n, init: (\nIntArray\n) -> T)\n\n\nAn (unoptimized) implementation of \nNDArray\n in pure Kotlin, for portability between the\ndifferent platforms koma supports.\n\n\nParameters\n\n\nshape\n - A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8)\n\n\ninit\n - A function that takes a location in the new array and returns its initial value.",
            "title": " init "
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-n-d-array/-init-/index.html#init",
            "text": "DefaultNDArray(vararg shape: Int , init: ( IntArray ) -> T)  An (unoptimized) implementation of  NDArray  in pure Kotlin, for portability between the\ndifferent platforms koma supports.",
            "title": "&lt;init&gt;"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-n-d-array/-init-/index.html#parameters",
            "text": "shape  - A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8)  init  - A function that takes a location in the new array and returns its initial value.",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-n-d-array/check-indices/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultNDArray\n / \ncheckIndices\n\n\ncheckIndices\n\n\nfun checkIndices(indices:\nIntArray\n):\nUnit",
            "title": "Check indices"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-n-d-array/check-indices/index.html#checkindices",
            "text": "fun checkIndices(indices: IntArray ): Unit",
            "title": "checkIndices"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-n-d-array/copy/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultNDArray\n / \ncopy\n\n\ncopy\n\n\nopen fun copy():\nNDArray\n<T>\n\n\nOverrides \nNDArray.copy",
            "title": "Copy"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-n-d-array/copy/index.html#copy",
            "text": "open fun copy(): NDArray <T>  Overrides  NDArray.copy",
            "title": "copy"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-n-d-array/for-each-indexed-n/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultNDArray\n / \nforEachIndexedN\n\n\nforEachIndexedN\n\n\nopen fun forEachIndexedN(f: (idx:\nIntArray\n, ele: T) ->\nUnit\n):\nUnit\n\n\nTakes each element in a NDArray and passes them through f. Index given to f is the full\nND index of the element.\n\n\nParameters\n\n\nf\n - A function that takes in an element. Function also takes\n    in the ND index of the element's location.",
            "title": "For each indexed n"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-n-d-array/for-each-indexed-n/index.html#foreachindexedn",
            "text": "open fun forEachIndexedN(f: (idx: IntArray , ele: T) -> Unit ): Unit  Takes each element in a NDArray and passes them through f. Index given to f is the full\nND index of the element.",
            "title": "forEachIndexedN"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-n-d-array/for-each-indexed-n/index.html#parameters",
            "text": "f  - A function that takes in an element. Function also takes\n    in the ND index of the element's location.",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-n-d-array/get-base-array/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultNDArray\n / \ngetBaseArray\n\n\ngetBaseArray\n\n\nopen fun getBaseArray():\nAny\n\n\nOverrides \nNDArray.getBaseArray",
            "title": "Get base array"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-n-d-array/get-base-array/index.html#getbasearray",
            "text": "open fun getBaseArray(): Any  Overrides  NDArray.getBaseArray",
            "title": "getBaseArray"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-n-d-array/get-linear/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultNDArray\n / \ngetLinear\n\n\ngetLinear\n\n\nopen fun getLinear(index:\nInt\n): T\n\n\nOverrides \nNDArray.getLinear",
            "title": "Get linear"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-n-d-array/get-linear/index.html#getlinear",
            "text": "open fun getLinear(index: Int ): T  Overrides  NDArray.getLinear",
            "title": "getLinear"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-n-d-array/get/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultNDArray\n / \nget\n\n\nget\n\n\nopen fun get(vararg indices:\nInt\n): T\n\n\nOverrides \nNDArray.get\n\n\nopen fun get(vararg indices:\nIntRange\n):\nNDArray\n<T>\n\n\nOverrides \nNDArray.get",
            "title": "Get"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-n-d-array/get/index.html#get",
            "text": "open fun get(vararg indices: Int ): T  Overrides  NDArray.get  open fun get(vararg indices: IntRange ): NDArray <T>  Overrides  NDArray.get",
            "title": "get"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-n-d-array/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultNDArray\n\n\nDefaultNDArray\n\n\nopen class DefaultNDArray<T> :\nNDArray\n<T>\n\n\nAn (unoptimized) implementation of \nNDArray\n in pure Kotlin, for portability between the\ndifferent platforms koma supports.\n\n\nParameters\n\n\nshape\n - A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8)\n\n\ninit\n - A function that takes a location in the new array and returns its initial value.\n\n\nConstructors\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\n<init>\n\n\nDefaultNDArray(vararg shape:\nInt\n, init: (\nIntArray\n) -> T)\nAn (unoptimized) implementation of \nNDArray\n in pure Kotlin, for portability between the different platforms koma supports.\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nshape\n\n\nvararg val shape:\nIntArray\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\ncheckIndices\n\n\nfun checkIndices(indices:\nIntArray\n):\nUnit\n\n\n\n\n\n\ncopy\n\n\nopen fun copy():\nNDArray\n<T>\n\n\n\n\n\n\nforEachIndexedN\n\n\nopen fun forEachIndexedN(f: (idx:\nIntArray\n, ele: T) ->\nUnit\n):\nUnit\nTakes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element.\n\n\n\n\n\n\nget\n\n\nopen fun get(vararg indices:\nInt\n): T\nopen fun get(vararg indices:\nIntRange\n):\nNDArray\n<T>\n\n\n\n\n\n\ngetBaseArray\n\n\nopen fun getBaseArray():\nAny\n\n\n\n\n\n\ngetLinear\n\n\nopen fun getLinear(index:\nInt\n): T\n\n\n\n\n\n\nmapIndexedN\n\n\nopen fun mapIndexedN(f: (idx:\nIntArray\n, ele: T) -> T):\nNDArray\n<T>\nTakes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element.\n\n\n\n\n\n\nset\n\n\nopen operator fun set(vararg indices:\nInt\n, value: T):\nUnit\nopen fun set(vararg indices:\nInt\n, value:\nNDArray\n<T>):\nUnit\n\n\n\n\n\n\nsetLinear\n\n\nopen fun setLinear(index:\nInt\n, value: T):\nUnit\n\n\n\n\n\n\nshape\n\n\nopen fun shape():\nList\n<\nInt\n>\n\n\n\n\n\n\n\n\nInherited Functions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\ntoIterable\n\n\nopen fun toIterable():\nIterable\n<T>\n\n\n\n\n\n\n\n\nInheritors\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nDefaultDoubleNDArray\n\n\nclass DefaultDoubleNDArray : DefaultNDArray<\nDouble\n>,\nNumericalNDArray\n<\nDouble\n>\n\n\n\n\n\n\nDefaultFloatNDArray\n\n\nclass DefaultFloatNDArray : DefaultNDArray<\nFloat\n>,\nNumericalNDArray\n<\nFloat\n>\n\n\n\n\n\n\nDefaultIntNDArray\n\n\nclass DefaultIntNDArray : DefaultNDArray<\nInt\n>,\nNumericalNDArray\n<\nInt\n>\n\n\n\n\n\n\nDefaultLongNDArray\n\n\nclass DefaultLongNDArray : DefaultNDArray<\nLong\n>,\nNumericalNDArray\n<\nLong\n>",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-n-d-array/index.html#defaultndarray",
            "text": "open class DefaultNDArray<T> : NDArray <T>  An (unoptimized) implementation of  NDArray  in pure Kotlin, for portability between the\ndifferent platforms koma supports.",
            "title": "DefaultNDArray"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-n-d-array/index.html#parameters",
            "text": "shape  - A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8)  init  - A function that takes a location in the new array and returns its initial value.",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-n-d-array/index.html#constructors",
            "text": "Name  Summary      <init>  DefaultNDArray(vararg shape: Int , init: ( IntArray ) -> T) An (unoptimized) implementation of  NDArray  in pure Kotlin, for portability between the different platforms koma supports.",
            "title": "Constructors"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-n-d-array/index.html#properties",
            "text": "Name  Summary      shape  vararg val shape: IntArray",
            "title": "Properties"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-n-d-array/index.html#functions",
            "text": "Name  Summary      checkIndices  fun checkIndices(indices: IntArray ): Unit    copy  open fun copy(): NDArray <T>    forEachIndexedN  open fun forEachIndexedN(f: (idx: IntArray , ele: T) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element.    get  open fun get(vararg indices: Int ): T open fun get(vararg indices: IntRange ): NDArray <T>    getBaseArray  open fun getBaseArray(): Any    getLinear  open fun getLinear(index: Int ): T    mapIndexedN  open fun mapIndexedN(f: (idx: IntArray , ele: T) -> T): NDArray <T> Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element.    set  open operator fun set(vararg indices: Int , value: T): Unit open fun set(vararg indices: Int , value: NDArray <T>): Unit    setLinear  open fun setLinear(index: Int , value: T): Unit    shape  open fun shape(): List < Int >",
            "title": "Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-n-d-array/index.html#inherited-functions",
            "text": "Name  Summary      toIterable  open fun toIterable(): Iterable <T>",
            "title": "Inherited Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-n-d-array/index.html#inheritors",
            "text": "Name  Summary      DefaultDoubleNDArray  class DefaultDoubleNDArray : DefaultNDArray< Double >, NumericalNDArray < Double >    DefaultFloatNDArray  class DefaultFloatNDArray : DefaultNDArray< Float >, NumericalNDArray < Float >    DefaultIntNDArray  class DefaultIntNDArray : DefaultNDArray< Int >, NumericalNDArray < Int >    DefaultLongNDArray  class DefaultLongNDArray : DefaultNDArray< Long >, NumericalNDArray < Long >",
            "title": "Inheritors"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-n-d-array/map-indexed-n/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultNDArray\n / \nmapIndexedN\n\n\nmapIndexedN\n\n\nopen fun mapIndexedN(f: (idx:\nIntArray\n, ele: T) -> T):\nNDArray\n<T>\n\n\nTakes each element in a NDArray, passes them through f, and puts the output of f into an\noutput NDArray. Index given to f is the full ND index of the element.\n\n\nParameters\n\n\nf\n - A function that takes in an element and returns an element. Function also takes\n    in the ND index of the element's location.\n\n\nReturn\n\nthe new NDArray after each element is mapped through f",
            "title": "Map indexed n"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-n-d-array/map-indexed-n/index.html#mapindexedn",
            "text": "open fun mapIndexedN(f: (idx: IntArray , ele: T) -> T): NDArray <T>  Takes each element in a NDArray, passes them through f, and puts the output of f into an\noutput NDArray. Index given to f is the full ND index of the element.",
            "title": "mapIndexedN"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-n-d-array/map-indexed-n/index.html#parameters",
            "text": "f  - A function that takes in an element and returns an element. Function also takes\n    in the ND index of the element's location.  Return \nthe new NDArray after each element is mapped through f",
            "title": "Parameters"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-n-d-array/set-linear/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultNDArray\n / \nsetLinear\n\n\nsetLinear\n\n\nopen fun setLinear(index:\nInt\n, value: T):\nUnit",
            "title": "Set linear"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-n-d-array/set-linear/index.html#setlinear",
            "text": "open fun setLinear(index: Int , value: T): Unit",
            "title": "setLinear"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-n-d-array/set/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultNDArray\n / \nset\n\n\nset\n\n\nopen operator fun set(vararg indices:\nInt\n, value: T):\nUnit\n\n\nopen fun set(vararg indices:\nInt\n, value:\nNDArray\n<T>):\nUnit",
            "title": "Set"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-n-d-array/set/index.html#set",
            "text": "open operator fun set(vararg indices: Int , value: T): Unit  open fun set(vararg indices: Int , value: NDArray <T>): Unit",
            "title": "set"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-n-d-array/shape/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nDefaultNDArray\n / \nshape\n\n\nshape\n\n\nopen fun shape():\nList\n<\nInt\n>\n\n\nOverrides \nNDArray.shape\n\n\nprotected vararg val shape:\nIntArray",
            "title": "Shape"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/-default-n-d-array/shape/index.html#shape",
            "text": "open fun shape(): List < Int >  Overrides  NDArray.shape  protected vararg val shape: IntArray",
            "title": "shape"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/kotlin.collections.-list/accumulate-right/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nkotlin.collections.List\n / \naccumulateRight\n\n\naccumulateRight\n\n\nfun <T>\nList\n<T>.accumulateRight(f: (T, T) -> T): <ERROR CLASS>\n\n\nSimilar to reduceRight, except the results of each stage are stored off into\nthe output list instead of just the final result.",
            "title": "Accumulate right"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/kotlin.collections.-list/accumulate-right/index.html#accumulateright",
            "text": "fun <T> List <T>.accumulateRight(f: (T, T) -> T): <ERROR CLASS>  Similar to reduceRight, except the results of each stage are stored off into\nthe output list instead of just the final result.",
            "title": "accumulateRight"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/kotlin.collections.-list/index.html",
            "text": "api\n / \nkoma.ndarray.default\n / \nkotlin.collections.List\n\n\nExtensions for kotlin.collections.List\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\naccumulateRight\n\n\nfun <T>\nList\n<T>.accumulateRight(f: (T, T) -> T): <ERROR CLASS>\nSimilar to reduceRight, except the results of each stage are stored off into the output list instead of just the final result.",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma.ndarray.default/kotlin.collections.-list/index.html#extensions-for-kotlincollectionslist",
            "text": "Name  Summary      accumulateRight  fun <T> List <T>.accumulateRight(f: (T, T) -> T): <ERROR CLASS> Similar to reduceRight, except the results of each stage are stored off into the output list instead of just the final result.",
            "title": "Extensions for kotlin.collections.List"
        },
        {
            "location": "/Reference_API_Docs/koma.util/from-collection/index.html",
            "text": "api\n / \nkoma.util\n / \nfromCollection\n\n\nfromCollection\n\n\nfun fromCollection(collection:\nCollection\n<\nDouble\n>):\nDoubleArray\n\n\nfun fromCollection(collection:\nCollection\n<\nInt\n>):\nIntArray\n\n\nConverts a collection into a primitive DoubleArray",
            "title": "From collection"
        },
        {
            "location": "/Reference_API_Docs/koma.util/from-collection/index.html#fromcollection",
            "text": "fun fromCollection(collection: Collection < Double >): DoubleArray  fun fromCollection(collection: Collection < Int >): IntArray  Converts a collection into a primitive DoubleArray",
            "title": "fromCollection"
        },
        {
            "location": "/Reference_API_Docs/koma.util/index.html",
            "text": "api\n / \nkoma.util\n\n\nPackage koma.util\n\n\nUtility functions.\n\n\nFunctions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nfromCollection\n\n\nfun fromCollection(collection:\nCollection\n<\nDouble\n>):\nDoubleArray\nfun fromCollection(collection:\nCollection\n<\nInt\n>):\nIntArray\nConverts a collection into a primitive DoubleArray",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma.util/index.html#package-komautil",
            "text": "Utility functions.",
            "title": "Package koma.util"
        },
        {
            "location": "/Reference_API_Docs/koma.util/index.html#functions",
            "text": "Name  Summary      fromCollection  fun fromCollection(collection: Collection < Double >): DoubleArray fun fromCollection(collection: Collection < Int >): IntArray Converts a collection into a primitive DoubleArray",
            "title": "Functions"
        },
        {
            "location": "/Reference_API_Docs/koma.util.test/all-backends/index.html",
            "text": "api\n / \nkoma.util.test\n / \nallBackends\n\n\nallBackends\n\n\nfun allBackends(f: () ->\nUnit\n):\nUnit\n\n\nA helper function to run tests against all available backends in sequence. Sets \nkoma.factory\n to each backend\nconsecutively and then runs the passed in block of code. Note that code that manually sets its own backend\n(e.g. by creating a MTJMatrix instance explicitly) will not be affected by this function. Code that uses\ntop-level functions and generic Matrix functions should work correctly.\n\n\nNote: this function sets koma.factory to an arbitrary backend, so reset it afterwards if needed.",
            "title": "All backends"
        },
        {
            "location": "/Reference_API_Docs/koma.util.test/all-backends/index.html#allbackends",
            "text": "fun allBackends(f: () -> Unit ): Unit  A helper function to run tests against all available backends in sequence. Sets  koma.factory  to each backend\nconsecutively and then runs the passed in block of code. Note that code that manually sets its own backend\n(e.g. by creating a MTJMatrix instance explicitly) will not be affected by this function. Code that uses\ntop-level functions and generic Matrix functions should work correctly.  Note: this function sets koma.factory to an arbitrary backend, so reset it afterwards if needed.",
            "title": "allBackends"
        },
        {
            "location": "/Reference_API_Docs/koma.util.test/assert-matrix-equals/index.html",
            "text": "api\n / \nkoma.util.test\n / \nassertMatrixEquals\n\n\nassertMatrixEquals\n\n\nfun <T :\nNumber\n> assertMatrixEquals(expected:\nMatrix\n<T>, actual:\nMatrix\n<T>, eps:\nDouble\n= 1e-6):\nUnit\n\n\nAsserts that a matrix \nexpected\n, koma.matrix.Matrix((koma.util.test.assertMatrixEquals.T)), kotlin.Double)/expected) roughly equals a matrix \nactual\n, koma.matrix.Matrix((koma.util.test.assertMatrixEquals.T)), kotlin.Double)/actual). eps is the acceptable numerical error.",
            "title": "Assert matrix equals"
        },
        {
            "location": "/Reference_API_Docs/koma.util.test/assert-matrix-equals/index.html#assertmatrixequals",
            "text": "fun <T : Number > assertMatrixEquals(expected: Matrix <T>, actual: Matrix <T>, eps: Double = 1e-6): Unit  Asserts that a matrix  expected , koma.matrix.Matrix((koma.util.test.assertMatrixEquals.T)), kotlin.Double)/expected) roughly equals a matrix  actual , koma.matrix.Matrix((koma.util.test.assertMatrixEquals.T)), kotlin.Double)/actual). eps is the acceptable numerical error.",
            "title": "assertMatrixEquals"
        },
        {
            "location": "/Reference_API_Docs/koma.util.test/index.html",
            "text": "api\n / \nkoma.util.test\n\n\nPackage koma.util.test\n\n\nUtility functions for writing tests with matrices.\n\n\nFunctions\n\n\n\n\n\n\n\n\nName\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\nallBackends\n\n\nfun allBackends(f: () ->\nUnit\n):\nUnit\nA helper function to run tests against all available backends in sequence. Sets \nkoma.factory\n to each backend consecutively and then runs the passed in block of code. Note that code that manually sets its own backend (e.g. by creating a MTJMatrix instance explicitly) will not be affected by this function. Code that uses top-level functions and generic Matrix functions should work correctly.\n\n\n\n\n\n\nassertMatrixEquals\n\n\nfun <T :\nNumber\n> assertMatrixEquals(expected:\nMatrix\n<T>, actual:\nMatrix\n<T>, eps:\nDouble\n= 1e-6):\nUnit\nAsserts that a matrix \nexpected\n, koma.matrix.Matrix((koma.util.test.assertMatrixEquals.T)), kotlin.Double)/expected) roughly equals a matrix \nactual\n, koma.matrix.Matrix((koma.util.test.assertMatrixEquals.T)), kotlin.Double)/actual). eps is the acceptable numerical error.",
            "title": "Home"
        },
        {
            "location": "/Reference_API_Docs/koma.util.test/index.html#package-komautiltest",
            "text": "Utility functions for writing tests with matrices.",
            "title": "Package koma.util.test"
        },
        {
            "location": "/Reference_API_Docs/koma.util.test/index.html#functions",
            "text": "Name  Summary      allBackends  fun allBackends(f: () -> Unit ): Unit A helper function to run tests against all available backends in sequence. Sets  koma.factory  to each backend consecutively and then runs the passed in block of code. Note that code that manually sets its own backend (e.g. by creating a MTJMatrix instance explicitly) will not be affected by this function. Code that uses top-level functions and generic Matrix functions should work correctly.    assertMatrixEquals  fun <T : Number > assertMatrixEquals(expected: Matrix <T>, actual: Matrix <T>, eps: Double = 1e-6): Unit Asserts that a matrix  expected , koma.matrix.Matrix((koma.util.test.assertMatrixEquals.T)), kotlin.Double)/expected) roughly equals a matrix  actual , koma.matrix.Matrix((koma.util.test.assertMatrixEquals.T)), kotlin.Double)/actual). eps is the acceptable numerical error.",
            "title": "Functions"
        }
    ]
}