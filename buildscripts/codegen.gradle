task codegen {
    doLast {
        ['Double', 'Float', 'Int'].forEach { dtype ->
            copy {
                from 'core/templates'
                into 'core/srcgen/koma.matrix.default'
                include 'DefaultXMatrix.kt'
                rename { "Default${dtype}Matrix.kt" }

                expand(epow: getEPow(dtype),
                        dtype: dtype)
            }
            copy {
                from 'core/templates'
                into 'core/srcgen/koma.matrix.default'
                include 'DefaultXMatrixFactory.kt'
                rename { "Default${dtype}MatrixFactory.kt" }

                expand(epow: getEPow(dtype),
                        dtype: dtype)
            }
            copy {
                from 'core/templates'
                into 'core/srcgen/koma.ndarray.default'
                include 'DefaultXNDArray*.kt'
                rename { "Default${dtype}NDArray.kt"}
                expand(dtype: dtype)
            }
            copy {
                from 'core/templates'
                into 'core/srcgen/koma.matrix'
                include 'XMatrix.kt'
                rename { dtype+"Matrix.kt" }
                expand(dtype: dtype)
            }
        }
        copy {
            from 'core/templates'
            into 'core/srcgen/koma.matrix'
            include 'Matrix.kt'
            expand(recursive: false,
                   mattype: "Matrix<T>",
                   override: "")
        }
        copy {
            from 'core/templates'
            into 'core/srcgen/koma.matrix'
            include 'Matrix.kt'
            rename { "RMatrix.kt" }
            expand(recursive: true,
                   mattype: "MatType",
                   override: "override")
        }
    }

}
def getEPow(dtype) {
    if (dtype != 'Int')
        return """
    override fun epow(other: ${dtype}): ${dtype}Matrix 
            = this.mapMatIndexed { row, col, ele -> Math.pow(ele.toDouble(), other.toDouble()).to${dtype}() }
"""
    else
        return ""

}